# !!! THIS FILE IS AUTO-GENERATED, PLEASE DO NOT MODIFY. !!!

module THC
using ..THArrays: Tensor, Scalar, TorchNumber, tensor_from_ptr



"""
    __and__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_and\\_\\_(gc\\_tensor self, scalar other)
"""
function __and__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___and__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __and__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_and\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __and__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___and__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __iand__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_iand\\_\\_(gc\\_tensor self, scalar other)
"""
function __iand__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___iand__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __iand__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_iand\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __iand__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___iand__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __ilshift__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_ilshift\\_\\_(gc\\_tensor self, scalar other)
"""
function __ilshift__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___ilshift__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __ilshift__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_ilshift\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __ilshift__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___ilshift__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __ior__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_ior\\_\\_(gc\\_tensor self, scalar other)
"""
function __ior__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___ior__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __ior__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_ior\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __ior__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___ior__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __irshift__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_irshift\\_\\_(gc\\_tensor self, scalar other)
"""
function __irshift__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___irshift__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __irshift__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_irshift\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __irshift__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___irshift__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __ixor__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_ixor\\_\\_(gc\\_tensor self, scalar other)
"""
function __ixor__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___ixor__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __ixor__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_ixor\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __ixor__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___ixor__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __lshift__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_lshift\\_\\_(gc\\_tensor self, scalar other)
"""
function __lshift__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___lshift__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __lshift__scalar_out!(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_lshift\\_\\_scalar\\_out\\_(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function __lshift__scalar_out!(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___lshift__scalar_out_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __lshift__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_lshift\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __lshift__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___lshift__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __lshift__tensor_out!(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_lshift\\_\\_tensor\\_out\\_(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function __lshift__tensor_out!(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg___lshift__tensor_out_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __or__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_or\\_\\_(gc\\_tensor self, scalar other)
"""
function __or__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___or__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __or__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_or\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __or__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___or__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __rshift__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_rshift\\_\\_(gc\\_tensor self, scalar other)
"""
function __rshift__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___rshift__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __rshift__scalar_out!(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_rshift\\_\\_scalar\\_out\\_(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function __rshift__scalar_out!(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___rshift__scalar_out_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __rshift__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_rshift\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __rshift__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___rshift__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __rshift__tensor_out!(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_rshift\\_\\_tensor\\_out\\_(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function __rshift__tensor_out!(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg___rshift__tensor_out_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __xor__(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_xor\\_\\_(gc\\_tensor self, scalar other)
"""
function __xor__(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg___xor__, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    __xor__tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_\\_xor\\_\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function __xor__tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg___xor__tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _adaptive_avg_pool2d(self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_adaptive\\_avg\\_pool2d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function _adaptive_avg_pool2d(self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__adaptive_avg_pool2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    _adaptive_avg_pool2d_backward(grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_adaptive\\_avg\\_pool2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function _adaptive_avg_pool2d_backward(grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg__adaptive_avg_pool2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _adaptive_avg_pool2d_backward_out(out::Tensor, grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_adaptive\\_avg\\_pool2d\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function _adaptive_avg_pool2d_backward_out(out::Tensor, grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg__adaptive_avg_pool2d_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _adaptive_avg_pool2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_adaptive\\_avg\\_pool2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function _adaptive_avg_pool2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__adaptive_avg_pool2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    _adaptive_avg_pool3d(self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_adaptive\\_avg\\_pool3d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function _adaptive_avg_pool3d(self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__adaptive_avg_pool3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    _adaptive_avg_pool3d_backward(grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_adaptive\\_avg\\_pool3d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function _adaptive_avg_pool3d_backward(grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg__adaptive_avg_pool3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _adaptive_avg_pool3d_backward_out(out::Tensor, grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_adaptive\\_avg\\_pool3d\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function _adaptive_avg_pool3d_backward_out(out::Tensor, grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg__adaptive_avg_pool3d_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _adaptive_avg_pool3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_adaptive\\_avg\\_pool3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function _adaptive_avg_pool3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__adaptive_avg_pool3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    _add_batch_dim(self::Tensor, batch_dim::Int64, level::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_add\\_batch\\_dim(gc\\_tensor self, int64\\_t batch\\_dim, int64\\_t level)
"""
function _add_batch_dim(self::Tensor, batch_dim::Int64, level::Int64)

    __cret = ccall((:atg__add_batch_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, batch_dim, level)
    return tensor_from_ptr(__cret)
end


"""
    _add_relu(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_add\\_relu(gc\\_tensor self, gc\\_tensor other)
"""
function _add_relu(self::Tensor, other::Tensor)

    __cret = ccall((:atg__add_relu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _add_relu!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_add\\_relu\\_(gc\\_tensor self, gc\\_tensor other)
"""
function _add_relu!(self::Tensor, other::Tensor)

    __cret = ccall((:atg__add_relu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _add_relu_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_add\\_relu\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function _add_relu_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg__add_relu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _add_relu_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_add\\_relu\\_scalar(gc\\_tensor self, scalar other)
"""
function _add_relu_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg__add_relu_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _add_relu_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_add\\_relu\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function _add_relu_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg__add_relu_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _add_relu_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_\\_add\\_relu\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function _add_relu_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg__add_relu_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _addmm_activation(self::Tensor, mat1::Tensor, mat2::Tensor, use_gelu::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_addmm\\_activation(gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2, int use\\_gelu)
"""
function _addmm_activation(self::Tensor, mat1::Tensor, mat2::Tensor, use_gelu::Int)

    __cret = ccall((:atg__addmm_activation, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, mat1.pointer, mat2.pointer, use_gelu)
    return tensor_from_ptr(__cret)
end


"""
    _addmm_activation_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor, use_gelu::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_addmm\\_activation\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2, int use\\_gelu)
"""
function _addmm_activation_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor, use_gelu::Int)

    __cret = ccall((:atg__addmm_activation_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, mat1.pointer, mat2.pointer, use_gelu)
    return tensor_from_ptr(__cret)
end
# _aminmax ignored

# _aminmax_dim ignored

# _aminmax_dim_out ignored

# _aminmax_out ignored

# _amp_update_scale ignored



"""
    _amp_update_scale!(self::Tensor, growth_tracker::Tensor, found_inf::Tensor, scale_growth_factor::Float64, scale_backoff_factor::Float64, growth_interval::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_amp\\_update\\_scale\\_(gc\\_tensor self, gc\\_tensor growth\\_tracker, gc\\_tensor found\\_inf, double scale\\_growth\\_factor, double scale\\_backoff\\_factor, int64\\_t growth\\_interval)
"""
function _amp_update_scale!(self::Tensor, growth_tracker::Tensor, found_inf::Tensor, scale_growth_factor::Float64, scale_backoff_factor::Float64, growth_interval::Int64)

    __cret = ccall((:atg__amp_update_scale_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble, Clonglong),
                 self.pointer, growth_tracker.pointer, found_inf.pointer, scale_growth_factor, scale_backoff_factor, growth_interval)
    return tensor_from_ptr(__cret)
end


"""
    _amp_update_scale_out(out::Tensor, self::Tensor, growth_tracker::Tensor, found_inf::Tensor, scale_growth_factor::Float64, scale_backoff_factor::Float64, growth_interval::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_amp\\_update\\_scale\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor growth\\_tracker, gc\\_tensor found\\_inf, double scale\\_growth\\_factor, double scale\\_backoff\\_factor, int64\\_t growth\\_interval)
"""
function _amp_update_scale_out(out::Tensor, self::Tensor, growth_tracker::Tensor, found_inf::Tensor, scale_growth_factor::Float64, scale_backoff_factor::Float64, growth_interval::Int64)

    __cret = ccall((:atg__amp_update_scale_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble, Clonglong),
                 out.pointer, self.pointer, growth_tracker.pointer, found_inf.pointer, scale_growth_factor, scale_backoff_factor, growth_interval)
    return tensor_from_ptr(__cret)
end


"""
    _assert_tensor_metadata(a::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, dtype::Int)

 Wrapper of C++ function void atg\\_\\_assert\\_tensor\\_metadata(gc\\_tensor a, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int dtype)
"""
function _assert_tensor_metadata(a::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, dtype::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg__assert_tensor_metadata, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 a.pointer, size_data, size_len, stride_data, stride_len, dtype)
    return __cret
end


"""
    _autocast_to_full_precision(self::Tensor, cuda_enabled::Int, cpu_enabled::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_autocast\\_to\\_full\\_precision(gc\\_tensor self, int cuda\\_enabled, int cpu\\_enabled)
"""
function _autocast_to_full_precision(self::Tensor, cuda_enabled::Int, cpu_enabled::Int)

    __cret = ccall((:atg__autocast_to_full_precision, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint),
                 self.pointer, cuda_enabled, cpu_enabled)
    return tensor_from_ptr(__cret)
end


"""
    _autocast_to_reduced_precision(self::Tensor, cuda_enabled::Int, cpu_enabled::Int, cuda_dtype::Int, cpu_dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_autocast\\_to\\_reduced\\_precision(gc\\_tensor self, int cuda\\_enabled, int cpu\\_enabled, int cuda\\_dtype, int cpu\\_dtype)
"""
function _autocast_to_reduced_precision(self::Tensor, cuda_enabled::Int, cpu_enabled::Int, cuda_dtype::Int, cpu_dtype::Int)

    __cret = ccall((:atg__autocast_to_reduced_precision, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint, Cint),
                 self.pointer, cuda_enabled, cpu_enabled, cuda_dtype, cpu_dtype)
    return tensor_from_ptr(__cret)
end


"""
    _cast_byte(self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cast\\_byte(gc\\_tensor self, int non\\_blocking)
"""
function _cast_byte(self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__cast_byte, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cast_char(self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cast\\_char(gc\\_tensor self, int non\\_blocking)
"""
function _cast_char(self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__cast_char, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cast_double(self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cast\\_double(gc\\_tensor self, int non\\_blocking)
"""
function _cast_double(self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__cast_double, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cast_float(self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cast\\_float(gc\\_tensor self, int non\\_blocking)
"""
function _cast_float(self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__cast_float, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cast_half(self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cast\\_half(gc\\_tensor self, int non\\_blocking)
"""
function _cast_half(self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__cast_half, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cast_int(self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cast\\_int(gc\\_tensor self, int non\\_blocking)
"""
function _cast_int(self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__cast_int, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cast_long(self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cast\\_long(gc\\_tensor self, int non\\_blocking)
"""
function _cast_long(self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__cast_long, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cast_short(self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cast\\_short(gc\\_tensor self, int non\\_blocking)
"""
function _cast_short(self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__cast_short, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cdist_backward(grad::Tensor, x1::Tensor, x2::Tensor, p::Float64, cdist::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cdist\\_backward(gc\\_tensor grad, gc\\_tensor x1, gc\\_tensor x2, double p, gc\\_tensor cdist)
"""
function _cdist_backward(grad::Tensor, x1::Tensor, x2::Tensor, p::Float64, cdist::Tensor)

    __cret = ccall((:atg__cdist_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Ptr{Cvoid}),
                 grad.pointer, x1.pointer, x2.pointer, p, cdist.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _cdist_backward_out(out::Tensor, grad::Tensor, x1::Tensor, x2::Tensor, p::Float64, cdist::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cdist\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad, gc\\_tensor x1, gc\\_tensor x2, double p, gc\\_tensor cdist)
"""
function _cdist_backward_out(out::Tensor, grad::Tensor, x1::Tensor, x2::Tensor, p::Float64, cdist::Tensor)

    __cret = ccall((:atg__cdist_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Ptr{Cvoid}),
                 out.pointer, grad.pointer, x1.pointer, x2.pointer, p, cdist.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _cholesky_solve_helper(self::Tensor, A::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cholesky\\_solve\\_helper(gc\\_tensor self, gc\\_tensor A, int upper)
"""
function _cholesky_solve_helper(self::Tensor, A::Tensor, upper::Int)

    __cret = ccall((:atg__cholesky_solve_helper, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, A.pointer, upper)
    return tensor_from_ptr(__cret)
end


"""
    _cholesky_solve_helper_out(out::Tensor, self::Tensor, A::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cholesky\\_solve\\_helper\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor A, int upper)
"""
function _cholesky_solve_helper_out(out::Tensor, self::Tensor, A::Tensor, upper::Int)

    __cret = ccall((:atg__cholesky_solve_helper_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, A.pointer, upper)
    return tensor_from_ptr(__cret)
end


"""
    _coalesce(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_coalesce(gc\\_tensor self)
"""
function _coalesce(self::Tensor)

    __cret = ccall((:atg__coalesce, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _coalesce_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_coalesce\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _coalesce_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__coalesce_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _coalesced(self::Tensor, coalesced::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_coalesced(gc\\_tensor self, int coalesced)
"""
function _coalesced(self::Tensor, coalesced::Int)

    __cret = ccall((:atg__coalesced, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, coalesced)
    return tensor_from_ptr(__cret)
end


"""
    _coalesced!(self::Tensor, coalesced::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_coalesced\\_(gc\\_tensor self, int coalesced)
"""
function _coalesced!(self::Tensor, coalesced::Int)

    __cret = ccall((:atg__coalesced_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, coalesced)
    return tensor_from_ptr(__cret)
end


"""
    _coalesced_out(out::Tensor, self::Tensor, coalesced::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_coalesced\\_out(gc\\_tensor out, gc\\_tensor self, int coalesced)
"""
function _coalesced_out(out::Tensor, self::Tensor, coalesced::Int)

    __cret = ccall((:atg__coalesced_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, coalesced)
    return tensor_from_ptr(__cret)
end


"""
    _compute_linear_combination(input::Tensor, coefficients::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_compute\\_linear\\_combination(gc\\_tensor input, gc\\_tensor coefficients)
"""
function _compute_linear_combination(input::Tensor, coefficients::Tensor)

    __cret = ccall((:atg__compute_linear_combination, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, coefficients.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _compute_linear_combination_out(out::Tensor, input::Tensor, coefficients::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_compute\\_linear\\_combination\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor coefficients)
"""
function _compute_linear_combination_out(out::Tensor, input::Tensor, coefficients::Tensor)

    __cret = ccall((:atg__compute_linear_combination_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, input.pointer, coefficients.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _conj(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_conj(gc\\_tensor self)
"""
function _conj(self::Tensor)

    __cret = ccall((:atg__conj, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _conj_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_conj\\_copy(gc\\_tensor self)
"""
function _conj_copy(self::Tensor)

    __cret = ccall((:atg__conj_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _conj_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_conj\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _conj_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__conj_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _conj_physical(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_conj\\_physical(gc\\_tensor self)
"""
function _conj_physical(self::Tensor)

    __cret = ccall((:atg__conj_physical, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _conj_physical_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_conj\\_physical\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _conj_physical_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__conj_physical_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _conv_depthwise2d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_conv\\_depthwise2d(gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function _conv_depthwise2d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg__conv_depthwise2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    _conv_depthwise2d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_conv\\_depthwise2d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function _conv_depthwise2d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg__conv_depthwise2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    _convert_indices_from_coo_to_csr(self::Tensor, size::Int64, out_int32::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_convert\\_indices\\_from\\_coo\\_to\\_csr(gc\\_tensor self, int64\\_t size, int out\\_int32)
"""
function _convert_indices_from_coo_to_csr(self::Tensor, size::Int64, out_int32::Int)

    __cret = ccall((:atg__convert_indices_from_coo_to_csr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, size, out_int32)
    return tensor_from_ptr(__cret)
end


"""
    _convert_indices_from_coo_to_csr_out(out::Tensor, self::Tensor, size::Int64, out_int32::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_convert\\_indices\\_from\\_coo\\_to\\_csr\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t size, int out\\_int32)
"""
function _convert_indices_from_coo_to_csr_out(out::Tensor, self::Tensor, size::Int64, out_int32::Int)

    __cret = ccall((:atg__convert_indices_from_coo_to_csr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, size, out_int32)
    return tensor_from_ptr(__cret)
end


"""
    _convert_indices_from_csr_to_coo(crow_indices::Tensor, col_indices::Tensor, out_int32::Int, transpose::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_convert\\_indices\\_from\\_csr\\_to\\_coo(gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, int out\\_int32, int transpose)
"""
function _convert_indices_from_csr_to_coo(crow_indices::Tensor, col_indices::Tensor, out_int32::Int, transpose::Int)

    __cret = ccall((:atg__convert_indices_from_csr_to_coo, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 crow_indices.pointer, col_indices.pointer, out_int32, transpose)
    return tensor_from_ptr(__cret)
end


"""
    _convert_indices_from_csr_to_coo_out(out::Tensor, crow_indices::Tensor, col_indices::Tensor, out_int32::Int, transpose::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_convert\\_indices\\_from\\_csr\\_to\\_coo\\_out(gc\\_tensor out, gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, int out\\_int32, int transpose)
"""
function _convert_indices_from_csr_to_coo_out(out::Tensor, crow_indices::Tensor, col_indices::Tensor, out_int32::Int, transpose::Int)

    __cret = ccall((:atg__convert_indices_from_csr_to_coo_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, crow_indices.pointer, col_indices.pointer, out_int32, transpose)
    return tensor_from_ptr(__cret)
end


"""
    _convolution(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, cudnn_enabled::Int, allow_tf32::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_convolution(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int transposed, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups, int benchmark, int deterministic, int cudnn\\_enabled, int allow\\_tf32)
"""
function _convolution(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, cudnn_enabled::Int, allow_tf32::Int)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    output_padding_len = length(output_padding_data)
    __cret = ccall((:atg__convolution, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint, Cint, Cint),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, transposed, output_padding_data, output_padding_len, groups, benchmark, deterministic, cudnn_enabled, allow_tf32)
    return tensor_from_ptr(__cret)
end


"""
    _convolution_deprecated(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, cudnn_enabled::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_convolution\\_deprecated(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int transposed, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups, int benchmark, int deterministic, int cudnn\\_enabled)
"""
function _convolution_deprecated(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, cudnn_enabled::Int)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    output_padding_len = length(output_padding_data)
    __cret = ccall((:atg__convolution_deprecated, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint, Cint),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, transposed, output_padding_data, output_padding_len, groups, benchmark, deterministic, cudnn_enabled)
    return tensor_from_ptr(__cret)
end
# _convolution_mode ignored



"""
    _convolution_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, cudnn_enabled::Int, allow_tf32::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_convolution\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int transposed, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups, int benchmark, int deterministic, int cudnn\\_enabled, int allow\\_tf32)
"""
function _convolution_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, cudnn_enabled::Int, allow_tf32::Int)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    output_padding_len = length(output_padding_data)
    __cret = ccall((:atg__convolution_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint, Cint, Cint),
                 out.pointer, input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, transposed, output_padding_data, output_padding_len, groups, benchmark, deterministic, cudnn_enabled, allow_tf32)
    return tensor_from_ptr(__cret)
end


"""
    _copy_from(self::Tensor, dst::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_copy\\_from(gc\\_tensor self, gc\\_tensor dst, int non\\_blocking)
"""
function _copy_from(self::Tensor, dst::Tensor, non_blocking::Int)

    __cret = ccall((:atg__copy_from, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dst.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _copy_from_and_resize(self::Tensor, dst::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_copy\\_from\\_and\\_resize(gc\\_tensor self, gc\\_tensor dst)
"""
function _copy_from_and_resize(self::Tensor, dst::Tensor)

    __cret = ccall((:atg__copy_from_and_resize, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dst.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _copy_from_and_resize_out(out::Tensor, self::Tensor, dst::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_copy\\_from\\_and\\_resize\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor dst)
"""
function _copy_from_and_resize_out(out::Tensor, self::Tensor, dst::Tensor)

    __cret = ccall((:atg__copy_from_and_resize_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, dst.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _copy_from_out(out::Tensor, self::Tensor, dst::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_copy\\_from\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor dst, int non\\_blocking)
"""
function _copy_from_out(out::Tensor, self::Tensor, dst::Tensor, non_blocking::Int)

    __cret = ccall((:atg__copy_from_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dst.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _cslt_compress(input::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cslt\\_compress(gc\\_tensor input)
"""
function _cslt_compress(input::Tensor)

    __cret = ccall((:atg__cslt_compress, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 input.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _cslt_sparse_mm(compressed_A::Tensor, dense_B::Tensor, bias::Tensor, transpose_result::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cslt\\_sparse\\_mm(gc\\_tensor compressed\\_A, gc\\_tensor dense\\_B, gc\\_tensor bias, int transpose\\_result)
"""
function _cslt_sparse_mm(compressed_A::Tensor, dense_B::Tensor, bias::Tensor, transpose_result::Int)

    __cret = ccall((:atg__cslt_sparse_mm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 compressed_A.pointer, dense_B.pointer, bias.pointer, transpose_result)
    return tensor_from_ptr(__cret)
end
# _ctc_loss ignored



"""
    _ctc_loss_backward(grad::Tensor, log_probs::Tensor, targets::Tensor, input_lengths_data::Array{Int64}, target_lengths_data::Array{Int64}, neg_log_likelihood::Tensor, log_alpha::Tensor, blank::Int64, zero_infinity::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_ctc\\_loss\\_backward(gc\\_tensor grad, gc\\_tensor log\\_probs, gc\\_tensor targets, int64\\_t *input\\_lengths\\_data, int input\\_lengths\\_len, int64\\_t *target\\_lengths\\_data, int target\\_lengths\\_len, gc\\_tensor neg\\_log\\_likelihood, gc\\_tensor log\\_alpha, int64\\_t blank, int zero\\_infinity)
"""
function _ctc_loss_backward(grad::Tensor, log_probs::Tensor, targets::Tensor, input_lengths_data::Array{Int64}, target_lengths_data::Array{Int64}, neg_log_likelihood::Tensor, log_alpha::Tensor, blank::Int64, zero_infinity::Int)
    input_lengths_len = length(input_lengths_data)
    target_lengths_len = length(target_lengths_data)
    __cret = ccall((:atg__ctc_loss_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 grad.pointer, log_probs.pointer, targets.pointer, input_lengths_data, input_lengths_len, target_lengths_data, target_lengths_len, neg_log_likelihood.pointer, log_alpha.pointer, blank, zero_infinity)
    return tensor_from_ptr(__cret)
end


"""
    _ctc_loss_backward_out(out::Tensor, grad::Tensor, log_probs::Tensor, targets::Tensor, input_lengths_data::Array{Int64}, target_lengths_data::Array{Int64}, neg_log_likelihood::Tensor, log_alpha::Tensor, blank::Int64, zero_infinity::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_ctc\\_loss\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad, gc\\_tensor log\\_probs, gc\\_tensor targets, int64\\_t *input\\_lengths\\_data, int input\\_lengths\\_len, int64\\_t *target\\_lengths\\_data, int target\\_lengths\\_len, gc\\_tensor neg\\_log\\_likelihood, gc\\_tensor log\\_alpha, int64\\_t blank, int zero\\_infinity)
"""
function _ctc_loss_backward_out(out::Tensor, grad::Tensor, log_probs::Tensor, targets::Tensor, input_lengths_data::Array{Int64}, target_lengths_data::Array{Int64}, neg_log_likelihood::Tensor, log_alpha::Tensor, blank::Int64, zero_infinity::Int)
    input_lengths_len = length(input_lengths_data)
    target_lengths_len = length(target_lengths_data)
    __cret = ccall((:atg__ctc_loss_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, grad.pointer, log_probs.pointer, targets.pointer, input_lengths_data, input_lengths_len, target_lengths_data, target_lengths_len, neg_log_likelihood.pointer, log_alpha.pointer, blank, zero_infinity)
    return tensor_from_ptr(__cret)
end


"""
    _ctc_loss_backward_tensor(grad::Tensor, log_probs::Tensor, targets::Tensor, input_lengths::Tensor, target_lengths::Tensor, neg_log_likelihood::Tensor, log_alpha::Tensor, blank::Int64, zero_infinity::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_ctc\\_loss\\_backward\\_tensor(gc\\_tensor grad, gc\\_tensor log\\_probs, gc\\_tensor targets, gc\\_tensor input\\_lengths, gc\\_tensor target\\_lengths, gc\\_tensor neg\\_log\\_likelihood, gc\\_tensor log\\_alpha, int64\\_t blank, int zero\\_infinity)
"""
function _ctc_loss_backward_tensor(grad::Tensor, log_probs::Tensor, targets::Tensor, input_lengths::Tensor, target_lengths::Tensor, neg_log_likelihood::Tensor, log_alpha::Tensor, blank::Int64, zero_infinity::Int)

    __cret = ccall((:atg__ctc_loss_backward_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 grad.pointer, log_probs.pointer, targets.pointer, input_lengths.pointer, target_lengths.pointer, neg_log_likelihood.pointer, log_alpha.pointer, blank, zero_infinity)
    return tensor_from_ptr(__cret)
end
# _ctc_loss_out ignored

# _ctc_loss_tensor ignored

# _ctc_loss_tensor_out ignored

# _cudnn_ctc_loss ignored

# _cudnn_ctc_loss_out ignored

# _cudnn_ctc_loss_tensor ignored



"""
    _cudnn_init_dropout_state(dropout::Float64, train::Int, dropout_seed::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cudnn\\_init\\_dropout\\_state(double dropout, int train, int64\\_t dropout\\_seed, int options\\_kind, int options\\_device)
"""
function _cudnn_init_dropout_state(dropout::Float64, train::Int, dropout_seed::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg__cudnn_init_dropout_state, :libtorch_capi),
                 Ptr{Cvoid}, (Cdouble, Cint, Clonglong, Cint, Cint),
                 dropout, train, dropout_seed, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _cudnn_init_dropout_state_out(out::Tensor, dropout::Float64, train::Int, dropout_seed::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_cudnn\\_init\\_dropout\\_state\\_out(gc\\_tensor out, double dropout, int train, int64\\_t dropout\\_seed)
"""
function _cudnn_init_dropout_state_out(out::Tensor, dropout::Float64, train::Int, dropout_seed::Int64)

    __cret = ccall((:atg__cudnn_init_dropout_state_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint, Clonglong),
                 out.pointer, dropout, train, dropout_seed)
    return tensor_from_ptr(__cret)
end
# _cudnn_rnn ignored

# _cudnn_rnn_flatten_weight ignored

# _cudnn_rnn_flatten_weight_out ignored

# _cudnn_rnn_out ignored



"""
    _debug_has_internal_overlap(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_\\_debug\\_has\\_internal\\_overlap(gc\\_tensor self)
"""
function _debug_has_internal_overlap(self::Tensor)

    __cret = ccall((:atg__debug_has_internal_overlap, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    _dim_arange(like::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_dim\\_arange(gc\\_tensor like, int64\\_t dim)
"""
function _dim_arange(like::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg__dim_arange, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 like.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    _dimi(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_\\_dimi(gc\\_tensor self)
"""
function _dimi(self::Tensor)

    __cret = ccall((:atg__dimi, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    _dimv(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_\\_dimv(gc\\_tensor self)
"""
function _dimv(self::Tensor)

    __cret = ccall((:atg__dimv, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    _dirichlet_grad(x::Tensor, alpha::Tensor, total::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_dirichlet\\_grad(gc\\_tensor x, gc\\_tensor alpha, gc\\_tensor total)
"""
function _dirichlet_grad(x::Tensor, alpha::Tensor, total::Tensor)

    __cret = ccall((:atg__dirichlet_grad, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, alpha.pointer, total.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _dirichlet_grad_out(out::Tensor, x::Tensor, alpha::Tensor, total::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_dirichlet\\_grad\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor alpha, gc\\_tensor total)
"""
function _dirichlet_grad_out(out::Tensor, x::Tensor, alpha::Tensor, total::Tensor)

    __cret = ccall((:atg__dirichlet_grad_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, alpha.pointer, total.pointer)
    return tensor_from_ptr(__cret)
end
# _efficient_attention_backward ignored



"""
    _efficientzerotensor(size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_efficientzerotensor(int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function _efficientzerotensor(size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__efficientzerotensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _efficientzerotensor_out(out::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_efficientzerotensor\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len)
"""
function _efficientzerotensor_out(out::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__efficientzerotensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end
# _embedding_bag ignored



"""
    _embedding_bag_backward(grad::Tensor, indices::Tensor, offsets::Tensor, offset2bag::Tensor, bag_size::Tensor, maximum_indices::Tensor, num_weights::Int64, scale_grad_by_freq::Int, mode::Int64, sparse::Int, per_sample_weights::Tensor, padding_idx::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_embedding\\_bag\\_backward(gc\\_tensor grad, gc\\_tensor indices, gc\\_tensor offsets, gc\\_tensor offset2bag, gc\\_tensor bag\\_size, gc\\_tensor maximum\\_indices, int64\\_t num\\_weights, int scale\\_grad\\_by\\_freq, int64\\_t mode, int sparse, gc\\_tensor per\\_sample\\_weights, int64\\_t padding\\_idx)
"""
function _embedding_bag_backward(grad::Tensor, indices::Tensor, offsets::Tensor, offset2bag::Tensor, bag_size::Tensor, maximum_indices::Tensor, num_weights::Int64, scale_grad_by_freq::Int, mode::Int64, sparse::Int, per_sample_weights::Tensor, padding_idx::Int64)

    __cret = ccall((:atg__embedding_bag_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Clonglong, Cint, Ptr{Cvoid}, Clonglong),
                 grad.pointer, indices.pointer, offsets.pointer, offset2bag.pointer, bag_size.pointer, maximum_indices.pointer, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights.pointer, padding_idx)
    return tensor_from_ptr(__cret)
end


"""
    _embedding_bag_dense_backward(grad::Tensor, indices::Tensor, offset2bag::Tensor, bag_size::Tensor, maximum_indices::Tensor, num_weights::Int64, scale_grad_by_freq::Int, mode::Int64, per_sample_weights::Tensor, padding_idx::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_embedding\\_bag\\_dense\\_backward(gc\\_tensor grad, gc\\_tensor indices, gc\\_tensor offset2bag, gc\\_tensor bag\\_size, gc\\_tensor maximum\\_indices, int64\\_t num\\_weights, int scale\\_grad\\_by\\_freq, int64\\_t mode, gc\\_tensor per\\_sample\\_weights, int64\\_t padding\\_idx)
"""
function _embedding_bag_dense_backward(grad::Tensor, indices::Tensor, offset2bag::Tensor, bag_size::Tensor, maximum_indices::Tensor, num_weights::Int64, scale_grad_by_freq::Int, mode::Int64, per_sample_weights::Tensor, padding_idx::Int64)

    __cret = ccall((:atg__embedding_bag_dense_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Clonglong, Ptr{Cvoid}, Clonglong),
                 grad.pointer, indices.pointer, offset2bag.pointer, bag_size.pointer, maximum_indices.pointer, num_weights, scale_grad_by_freq, mode, per_sample_weights.pointer, padding_idx)
    return tensor_from_ptr(__cret)
end


"""
    _embedding_bag_dense_backward_out(out::Tensor, grad::Tensor, indices::Tensor, offset2bag::Tensor, bag_size::Tensor, maximum_indices::Tensor, num_weights::Int64, scale_grad_by_freq::Int, mode::Int64, per_sample_weights::Tensor, padding_idx::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_embedding\\_bag\\_dense\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad, gc\\_tensor indices, gc\\_tensor offset2bag, gc\\_tensor bag\\_size, gc\\_tensor maximum\\_indices, int64\\_t num\\_weights, int scale\\_grad\\_by\\_freq, int64\\_t mode, gc\\_tensor per\\_sample\\_weights, int64\\_t padding\\_idx)
"""
function _embedding_bag_dense_backward_out(out::Tensor, grad::Tensor, indices::Tensor, offset2bag::Tensor, bag_size::Tensor, maximum_indices::Tensor, num_weights::Int64, scale_grad_by_freq::Int, mode::Int64, per_sample_weights::Tensor, padding_idx::Int64)

    __cret = ccall((:atg__embedding_bag_dense_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Clonglong, Ptr{Cvoid}, Clonglong),
                 out.pointer, grad.pointer, indices.pointer, offset2bag.pointer, bag_size.pointer, maximum_indices.pointer, num_weights, scale_grad_by_freq, mode, per_sample_weights.pointer, padding_idx)
    return tensor_from_ptr(__cret)
end
# _embedding_bag_forward_only ignored

# _embedding_bag_forward_only_out ignored

# _embedding_bag_out ignored



"""
    _embedding_bag_per_sample_weights_backward(grad::Tensor, weight::Tensor, indices::Tensor, offsets::Tensor, offset2bag::Tensor, mode::Int64, padding_idx::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_embedding\\_bag\\_per\\_sample\\_weights\\_backward(gc\\_tensor grad, gc\\_tensor weight, gc\\_tensor indices, gc\\_tensor offsets, gc\\_tensor offset2bag, int64\\_t mode, int64\\_t padding\\_idx)
"""
function _embedding_bag_per_sample_weights_backward(grad::Tensor, weight::Tensor, indices::Tensor, offsets::Tensor, offset2bag::Tensor, mode::Int64, padding_idx::Int64)

    __cret = ccall((:atg__embedding_bag_per_sample_weights_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 grad.pointer, weight.pointer, indices.pointer, offsets.pointer, offset2bag.pointer, mode, padding_idx)
    return tensor_from_ptr(__cret)
end


"""
    _embedding_bag_per_sample_weights_backward_out(out::Tensor, grad::Tensor, weight::Tensor, indices::Tensor, offsets::Tensor, offset2bag::Tensor, mode::Int64, padding_idx::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_embedding\\_bag\\_per\\_sample\\_weights\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad, gc\\_tensor weight, gc\\_tensor indices, gc\\_tensor offsets, gc\\_tensor offset2bag, int64\\_t mode, int64\\_t padding\\_idx)
"""
function _embedding_bag_per_sample_weights_backward_out(out::Tensor, grad::Tensor, weight::Tensor, indices::Tensor, offsets::Tensor, offset2bag::Tensor, mode::Int64, padding_idx::Int64)

    __cret = ccall((:atg__embedding_bag_per_sample_weights_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, grad.pointer, weight.pointer, indices.pointer, offsets.pointer, offset2bag.pointer, mode, padding_idx)
    return tensor_from_ptr(__cret)
end


"""
    _embedding_bag_sparse_backward(grad::Tensor, indices::Tensor, offsets::Tensor, offset2bag::Tensor, bag_size::Tensor, num_weights::Int64, scale_grad_by_freq::Int, mode::Int64, per_sample_weights::Tensor, padding_idx::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_embedding\\_bag\\_sparse\\_backward(gc\\_tensor grad, gc\\_tensor indices, gc\\_tensor offsets, gc\\_tensor offset2bag, gc\\_tensor bag\\_size, int64\\_t num\\_weights, int scale\\_grad\\_by\\_freq, int64\\_t mode, gc\\_tensor per\\_sample\\_weights, int64\\_t padding\\_idx)
"""
function _embedding_bag_sparse_backward(grad::Tensor, indices::Tensor, offsets::Tensor, offset2bag::Tensor, bag_size::Tensor, num_weights::Int64, scale_grad_by_freq::Int, mode::Int64, per_sample_weights::Tensor, padding_idx::Int64)

    __cret = ccall((:atg__embedding_bag_sparse_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Clonglong, Ptr{Cvoid}, Clonglong),
                 grad.pointer, indices.pointer, offsets.pointer, offset2bag.pointer, bag_size.pointer, num_weights, scale_grad_by_freq, mode, per_sample_weights.pointer, padding_idx)
    return tensor_from_ptr(__cret)
end


"""
    _empty_affine_quantized(size_data::Array{Int64}, options_kind::Int, options_device::Int, scale::Float64, zero_point::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_empty\\_affine\\_quantized(int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device, double scale, int64\\_t zero\\_point)
"""
function _empty_affine_quantized(size_data::Array{Int64}, options_kind::Int, options_device::Int, scale::Float64, zero_point::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg__empty_affine_quantized, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint, Cdouble, Clonglong),
                 size_data, size_len, options_kind, options_device, scale, zero_point)
    return tensor_from_ptr(__cret)
end


"""
    _empty_affine_quantized_out(out::Tensor, size_data::Array{Int64}, scale::Float64, zero_point::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_empty\\_affine\\_quantized\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len, double scale, int64\\_t zero\\_point)
"""
function _empty_affine_quantized_out(out::Tensor, size_data::Array{Int64}, scale::Float64, zero_point::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg__empty_affine_quantized_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Clonglong),
                 out.pointer, size_data, size_len, scale, zero_point)
    return tensor_from_ptr(__cret)
end


"""
    _empty_per_channel_affine_quantized(size_data::Array{Int64}, scales::Tensor, zero_points::Tensor, axis::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_empty\\_per\\_channel\\_affine\\_quantized(int64\\_t *size\\_data, int size\\_len, gc\\_tensor scales, gc\\_tensor zero\\_points, int64\\_t axis, int options\\_kind, int options\\_device)
"""
function _empty_per_channel_affine_quantized(size_data::Array{Int64}, scales::Tensor, zero_points::Tensor, axis::Int64, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__empty_per_channel_affine_quantized, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Cint),
                 size_data, size_len, scales.pointer, zero_points.pointer, axis, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _empty_per_channel_affine_quantized_out(out::Tensor, size_data::Array{Int64}, scales::Tensor, zero_points::Tensor, axis::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_empty\\_per\\_channel\\_affine\\_quantized\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len, gc\\_tensor scales, gc\\_tensor zero\\_points, int64\\_t axis)
"""
function _empty_per_channel_affine_quantized_out(out::Tensor, size_data::Array{Int64}, scales::Tensor, zero_points::Tensor, axis::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg__empty_per_channel_affine_quantized_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, size_data, size_len, scales.pointer, zero_points.pointer, axis)
    return tensor_from_ptr(__cret)
end


"""
    _euclidean_dist(x1::Tensor, x2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_euclidean\\_dist(gc\\_tensor x1, gc\\_tensor x2)
"""
function _euclidean_dist(x1::Tensor, x2::Tensor)

    __cret = ccall((:atg__euclidean_dist, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x1.pointer, x2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _euclidean_dist_out(out::Tensor, x1::Tensor, x2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_euclidean\\_dist\\_out(gc\\_tensor out, gc\\_tensor x1, gc\\_tensor x2)
"""
function _euclidean_dist_out(out::Tensor, x1::Tensor, x2::Tensor)

    __cret = ccall((:atg__euclidean_dist_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x1.pointer, x2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _fake_quantize_learnable_per_channel_affine(self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64, quant_min::Int64, quant_max::Int64, grad_factor::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fake\\_quantize\\_learnable\\_per\\_channel\\_affine(gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int64\\_t axis, int64\\_t quant\\_min, int64\\_t quant\\_max, double grad\\_factor)
"""
function _fake_quantize_learnable_per_channel_affine(self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64, quant_min::Int64, quant_max::Int64, grad_factor::Float64)

    __cret = ccall((:atg__fake_quantize_learnable_per_channel_affine, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong, Cdouble),
                 self.pointer, scale.pointer, zero_point.pointer, axis, quant_min, quant_max, grad_factor)
    return tensor_from_ptr(__cret)
end
# _fake_quantize_learnable_per_channel_affine_backward ignored



"""
    _fake_quantize_learnable_per_channel_affine_out(out::Tensor, self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64, quant_min::Int64, quant_max::Int64, grad_factor::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fake\\_quantize\\_learnable\\_per\\_channel\\_affine\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int64\\_t axis, int64\\_t quant\\_min, int64\\_t quant\\_max, double grad\\_factor)
"""
function _fake_quantize_learnable_per_channel_affine_out(out::Tensor, self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64, quant_min::Int64, quant_max::Int64, grad_factor::Float64)

    __cret = ccall((:atg__fake_quantize_learnable_per_channel_affine_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong, Cdouble),
                 out.pointer, self.pointer, scale.pointer, zero_point.pointer, axis, quant_min, quant_max, grad_factor)
    return tensor_from_ptr(__cret)
end


"""
    _fake_quantize_learnable_per_tensor_affine(self::Tensor, scale::Tensor, zero_point::Tensor, quant_min::Int64, quant_max::Int64, grad_factor::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fake\\_quantize\\_learnable\\_per\\_tensor\\_affine(gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int64\\_t quant\\_min, int64\\_t quant\\_max, double grad\\_factor)
"""
function _fake_quantize_learnable_per_tensor_affine(self::Tensor, scale::Tensor, zero_point::Tensor, quant_min::Int64, quant_max::Int64, grad_factor::Float64)

    __cret = ccall((:atg__fake_quantize_learnable_per_tensor_affine, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cdouble),
                 self.pointer, scale.pointer, zero_point.pointer, quant_min, quant_max, grad_factor)
    return tensor_from_ptr(__cret)
end
# _fake_quantize_learnable_per_tensor_affine_backward ignored



"""
    _fake_quantize_learnable_per_tensor_affine_out(out::Tensor, self::Tensor, scale::Tensor, zero_point::Tensor, quant_min::Int64, quant_max::Int64, grad_factor::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fake\\_quantize\\_learnable\\_per\\_tensor\\_affine\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int64\\_t quant\\_min, int64\\_t quant\\_max, double grad\\_factor)
"""
function _fake_quantize_learnable_per_tensor_affine_out(out::Tensor, self::Tensor, scale::Tensor, zero_point::Tensor, quant_min::Int64, quant_max::Int64, grad_factor::Float64)

    __cret = ccall((:atg__fake_quantize_learnable_per_tensor_affine_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cdouble),
                 out.pointer, self.pointer, scale.pointer, zero_point.pointer, quant_min, quant_max, grad_factor)
    return tensor_from_ptr(__cret)
end
# _fake_quantize_per_tensor_affine_cachemask_tensor_qparams ignored

# _fake_quantize_per_tensor_affine_cachemask_tensor_qparams_out ignored



"""
    _fft_c2c(self::Tensor, dim_data::Array{Int64}, normalization::Int64, forward::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fft\\_c2c(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int64\\_t normalization, int forward)
"""
function _fft_c2c(self::Tensor, dim_data::Array{Int64}, normalization::Int64, forward::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__fft_c2c, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, dim_data, dim_len, normalization, forward)
    return tensor_from_ptr(__cret)
end


"""
    _fft_c2c_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, normalization::Int64, forward::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fft\\_c2c\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int64\\_t normalization, int forward)
"""
function _fft_c2c_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, normalization::Int64, forward::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__fft_c2c_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, normalization, forward)
    return tensor_from_ptr(__cret)
end


"""
    _fft_c2r(self::Tensor, dim_data::Array{Int64}, normalization::Int64, last_dim_size::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fft\\_c2r(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int64\\_t normalization, int64\\_t last\\_dim\\_size)
"""
function _fft_c2r(self::Tensor, dim_data::Array{Int64}, normalization::Int64, last_dim_size::Int64)
    dim_len = length(dim_data)
    __cret = ccall((:atg__fft_c2r, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 self.pointer, dim_data, dim_len, normalization, last_dim_size)
    return tensor_from_ptr(__cret)
end


"""
    _fft_c2r_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, normalization::Int64, last_dim_size::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fft\\_c2r\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int64\\_t normalization, int64\\_t last\\_dim\\_size)
"""
function _fft_c2r_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, normalization::Int64, last_dim_size::Int64)
    dim_len = length(dim_data)
    __cret = ccall((:atg__fft_c2r_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 out.pointer, self.pointer, dim_data, dim_len, normalization, last_dim_size)
    return tensor_from_ptr(__cret)
end


"""
    _fft_r2c(self::Tensor, dim_data::Array{Int64}, normalization::Int64, onesided::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fft\\_r2c(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int64\\_t normalization, int onesided)
"""
function _fft_r2c(self::Tensor, dim_data::Array{Int64}, normalization::Int64, onesided::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__fft_r2c, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, dim_data, dim_len, normalization, onesided)
    return tensor_from_ptr(__cret)
end


"""
    _fft_r2c_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, normalization::Int64, onesided::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fft\\_r2c\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int64\\_t normalization, int onesided)
"""
function _fft_r2c_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, normalization::Int64, onesided::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__fft_r2c_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, normalization, onesided)
    return tensor_from_ptr(__cret)
end


"""
    _fill_mem_eff_dropout_mask!(self::Tensor, dropout_p::Float64, seed::Int64, offset::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fill\\_mem\\_eff\\_dropout\\_mask\\_(gc\\_tensor self, double dropout\\_p, int64\\_t seed, int64\\_t offset)
"""
function _fill_mem_eff_dropout_mask!(self::Tensor, dropout_p::Float64, seed::Int64, offset::Int64)

    __cret = ccall((:atg__fill_mem_eff_dropout_mask_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Clonglong, Clonglong),
                 self.pointer, dropout_p, seed, offset)
    return tensor_from_ptr(__cret)
end
# _flash_attention_backward ignored



"""
    _foobar(self::Tensor, arg1::Int, arg2::Int, arg3::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_foobar(gc\\_tensor self, int arg1, int arg2, int arg3)
"""
function _foobar(self::Tensor, arg1::Int, arg2::Int, arg3::Int)

    __cret = ccall((:atg__foobar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, arg1, arg2, arg3)
    return tensor_from_ptr(__cret)
end


"""
    _foobar_out(out::Tensor, self::Tensor, arg1::Int, arg2::Int, arg3::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_foobar\\_out(gc\\_tensor out, gc\\_tensor self, int arg1, int arg2, int arg3)
"""
function _foobar_out(out::Tensor, self::Tensor, arg1::Int, arg2::Int, arg3::Int)

    __cret = ccall((:atg__foobar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, arg1, arg2, arg3)
    return tensor_from_ptr(__cret)
end
# _functional_assert_async ignored



"""
    _functional_sym_constrain_range(size::TorchNumber, min_v::Int64, min_null::Int, max_v::Int64, max_null::Int, dep_token::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_functional\\_sym\\_constrain\\_range(scalar size, int64\\_t min\\_v, int min\\_null, int64\\_t max\\_v, int max\\_null, gc\\_tensor dep\\_token)
"""
function _functional_sym_constrain_range(size::TorchNumber, min_v::Int64, min_null::Int, max_v::Int64, max_null::Int, dep_token::Tensor)
    size_s_ = Scalar(size)
    __cret = ccall((:atg__functional_sym_constrain_range, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Clonglong, Cint, Ptr{Cvoid}),
                 size_s_.pointer, min_v, min_null, max_v, max_null, dep_token.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _functional_sym_constrain_range_for_size(size::TorchNumber, min_v::Int64, min_null::Int, max_v::Int64, max_null::Int, dep_token::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_functional\\_sym\\_constrain\\_range\\_for\\_size(scalar size, int64\\_t min\\_v, int min\\_null, int64\\_t max\\_v, int max\\_null, gc\\_tensor dep\\_token)
"""
function _functional_sym_constrain_range_for_size(size::TorchNumber, min_v::Int64, min_null::Int, max_v::Int64, max_null::Int, dep_token::Tensor)
    size_s_ = Scalar(size)
    __cret = ccall((:atg__functional_sym_constrain_range_for_size, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Clonglong, Cint, Ptr{Cvoid}),
                 size_s_.pointer, min_v, min_null, max_v, max_null, dep_token.pointer)
    return tensor_from_ptr(__cret)
end
# _fused_adam ignored

# _fused_adam_ ignored

# _fused_adam_tensor_lr_ ignored

# _fused_adam_tensor_lr_out ignored

# _fused_adamw ignored

# _fused_adamw_ ignored

# _fused_adamw_tensor_lr_ ignored

# _fused_adamw_tensor_lr_out ignored

# _fused_dropout ignored

# _fused_dropout_out ignored

# _fused_moving_avg_obs_fq_helper ignored

# _fused_moving_avg_obs_fq_helper_functional ignored

# _fused_moving_avg_obs_fq_helper_out ignored



"""
    _fused_sdp_choice(query::Tensor, key::Tensor, value::Tensor, attn_mask::Tensor, dropout_p::Float64, is_causal::Int, scale_v::Float64, scale_null::Int)

 Wrapper of C++ function int64\\_t atg\\_\\_fused\\_sdp\\_choice(gc\\_tensor query, gc\\_tensor key, gc\\_tensor value, gc\\_tensor attn\\_mask, double dropout\\_p, int is\\_causal, double scale\\_v, int scale\\_null)
"""
function _fused_sdp_choice(query::Tensor, key::Tensor, value::Tensor, attn_mask::Tensor, dropout_p::Float64, is_causal::Int, scale_v::Float64, scale_null::Int)

    __cret = ccall((:atg__fused_sdp_choice, :libtorch_capi),
                 Int, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint),
                 query.pointer, key.pointer, value.pointer, attn_mask.pointer, dropout_p, is_causal, scale_v, scale_null)
    return __cret
end


"""
    _fw_primal(self::Tensor, level::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fw\\_primal(gc\\_tensor self, int64\\_t level)
"""
function _fw_primal(self::Tensor, level::Int64)

    __cret = ccall((:atg__fw_primal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, level)
    return tensor_from_ptr(__cret)
end


"""
    _fw_primal_copy(self::Tensor, level::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fw\\_primal\\_copy(gc\\_tensor self, int64\\_t level)
"""
function _fw_primal_copy(self::Tensor, level::Int64)

    __cret = ccall((:atg__fw_primal_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, level)
    return tensor_from_ptr(__cret)
end


"""
    _fw_primal_copy_out(out::Tensor, self::Tensor, level::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_fw\\_primal\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t level)
"""
function _fw_primal_copy_out(out::Tensor, self::Tensor, level::Int64)

    __cret = ccall((:atg__fw_primal_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, level)
    return tensor_from_ptr(__cret)
end


"""
    _gather_sparse_backward(self::Tensor, dim::Int64, index::Tensor, grad::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_gather\\_sparse\\_backward(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor grad)
"""
function _gather_sparse_backward(self::Tensor, dim::Int64, index::Tensor, grad::Tensor)
    dim = dim - 1
    __cret = ccall((:atg__gather_sparse_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, grad.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _grid_sampler_2d_cpu_fallback(input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_grid\\_sampler\\_2d\\_cpu\\_fallback(gc\\_tensor input, gc\\_tensor grid, int64\\_t interpolation\\_mode, int64\\_t padding\\_mode, int align\\_corners)
"""
function _grid_sampler_2d_cpu_fallback(input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

    __cret = ccall((:atg__grid_sampler_2d_cpu_fallback, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 input.pointer, grid.pointer, interpolation_mode, padding_mode, align_corners)
    return tensor_from_ptr(__cret)
end
# _grid_sampler_2d_cpu_fallback_backward ignored



"""
    _grid_sampler_2d_cpu_fallback_out(out::Tensor, input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_grid\\_sampler\\_2d\\_cpu\\_fallback\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor grid, int64\\_t interpolation\\_mode, int64\\_t padding\\_mode, int align\\_corners)
"""
function _grid_sampler_2d_cpu_fallback_out(out::Tensor, input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

    __cret = ccall((:atg__grid_sampler_2d_cpu_fallback_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 out.pointer, input.pointer, grid.pointer, interpolation_mode, padding_mode, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    _has_compatible_shallow_copy_type(self::Tensor, from::Tensor)

 Wrapper of C++ function int atg\\_\\_has\\_compatible\\_shallow\\_copy\\_type(gc\\_tensor self, gc\\_tensor from)
"""
function _has_compatible_shallow_copy_type(self::Tensor, from::Tensor)

    __cret = ccall((:atg__has_compatible_shallow_copy_type, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, from.pointer)
    return __cret
end


"""
    _has_same_storage_numel(self::Tensor, other::Tensor)

 Wrapper of C++ function int atg\\_\\_has\\_same\\_storage\\_numel(gc\\_tensor self, gc\\_tensor other)
"""
function _has_same_storage_numel(self::Tensor, other::Tensor)

    __cret = ccall((:atg__has_same_storage_numel, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return __cret
end
# _histogramdd_bin_edges ignored

# _histogramdd_bin_edges_out ignored

# _histogramdd_from_bin_cts ignored

# _histogramdd_from_bin_cts_out ignored

# _histogramdd_from_bin_tensors ignored

# _histogramdd_from_bin_tensors_out ignored

# _index_put_impl ignored

# _index_put_impl_ ignored

# _index_put_impl_out ignored



"""
    _indices(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_indices(gc\\_tensor self)
"""
function _indices(self::Tensor)

    __cret = ccall((:atg__indices, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _indices_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_indices\\_copy(gc\\_tensor self)
"""
function _indices_copy(self::Tensor)

    __cret = ccall((:atg__indices_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _indices_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_indices\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _indices_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__indices_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _int_mm(self::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_int\\_mm(gc\\_tensor self, gc\\_tensor mat2)
"""
function _int_mm(self::Tensor, mat2::Tensor)

    __cret = ccall((:atg__int_mm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _int_mm_out(out::Tensor, self::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_int\\_mm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat2)
"""
function _int_mm_out(out::Tensor, self::Tensor, mat2::Tensor)

    __cret = ccall((:atg__int_mm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _is_all_true(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_is\\_all\\_true(gc\\_tensor self)
"""
function _is_all_true(self::Tensor)

    __cret = ccall((:atg__is_all_true, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _is_any_true(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_is\\_any\\_true(gc\\_tensor self)
"""
function _is_any_true(self::Tensor)

    __cret = ccall((:atg__is_any_true, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _is_zerotensor(self::Tensor)

 Wrapper of C++ function int atg\\_\\_is\\_zerotensor(gc\\_tensor self)
"""
function _is_zerotensor(self::Tensor)

    __cret = ccall((:atg__is_zerotensor, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end
# _linalg_check_errors ignored

# _linalg_det ignored

# _linalg_det_result ignored

# _linalg_eigh ignored

# _linalg_eigh_eigenvalues ignored

# _linalg_slogdet ignored

# _linalg_slogdet_sign ignored

# _linalg_solve_ex ignored

# _linalg_solve_ex_result ignored

# _linalg_svd ignored

# _linalg_svd_u ignored



"""
    _log_softmax(self::Tensor, dim::Int64, half_to_float::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_log\\_softmax(gc\\_tensor self, int64\\_t dim, int half\\_to\\_float)
"""
function _log_softmax(self::Tensor, dim::Int64, half_to_float::Int)
    dim = dim - 1
    __cret = ccall((:atg__log_softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, half_to_float)
    return tensor_from_ptr(__cret)
end


"""
    _log_softmax_backward_data(grad_output::Tensor, output::Tensor, dim::Int64, input_dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_log\\_softmax\\_backward\\_data(gc\\_tensor grad\\_output, gc\\_tensor output, int64\\_t dim, int input\\_dtype)
"""
function _log_softmax_backward_data(grad_output::Tensor, output::Tensor, dim::Int64, input_dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg__log_softmax_backward_data, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 grad_output.pointer, output.pointer, dim, input_dtype)
    return tensor_from_ptr(__cret)
end


"""
    _log_softmax_backward_data_out(out::Tensor, grad_output::Tensor, output::Tensor, dim::Int64, input_dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_log\\_softmax\\_backward\\_data\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor output, int64\\_t dim, int input\\_dtype)
"""
function _log_softmax_backward_data_out(out::Tensor, grad_output::Tensor, output::Tensor, dim::Int64, input_dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg__log_softmax_backward_data_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, grad_output.pointer, output.pointer, dim, input_dtype)
    return tensor_from_ptr(__cret)
end


"""
    _log_softmax_out(out::Tensor, self::Tensor, dim::Int64, half_to_float::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_log\\_softmax\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int half\\_to\\_float)
"""
function _log_softmax_out(out::Tensor, self::Tensor, dim::Int64, half_to_float::Int)
    dim = dim - 1
    __cret = ccall((:atg__log_softmax_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, half_to_float)
    return tensor_from_ptr(__cret)
end


"""
    _logcumsumexp(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_logcumsumexp(gc\\_tensor self, int64\\_t dim)
"""
function _logcumsumexp(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg__logcumsumexp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    _logcumsumexp_out(out::Tensor, self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_logcumsumexp\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim)
"""
function _logcumsumexp_out(out::Tensor, self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg__logcumsumexp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, dim)
    return tensor_from_ptr(__cret)
end
# _lstm_mps ignored

# _lstm_mps_out ignored

# _lu_with_info ignored



"""
    _make_dep_token(options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_make\\_dep\\_token(int options\\_kind, int options\\_device)
"""
function _make_dep_token(options_kind::Int, options_device::Int)

    __cret = ccall((:atg__make_dep_token, :libtorch_capi),
                 Ptr{Cvoid}, (Cint, Cint),
                 options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _make_dual(primal::Tensor, tangent::Tensor, level::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_make\\_dual(gc\\_tensor primal, gc\\_tensor tangent, int64\\_t level)
"""
function _make_dual(primal::Tensor, tangent::Tensor, level::Int64)

    __cret = ccall((:atg__make_dual, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 primal.pointer, tangent.pointer, level)
    return tensor_from_ptr(__cret)
end


"""
    _make_dual_copy(primal::Tensor, tangent::Tensor, level::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_make\\_dual\\_copy(gc\\_tensor primal, gc\\_tensor tangent, int64\\_t level)
"""
function _make_dual_copy(primal::Tensor, tangent::Tensor, level::Int64)

    __cret = ccall((:atg__make_dual_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 primal.pointer, tangent.pointer, level)
    return tensor_from_ptr(__cret)
end


"""
    _make_dual_copy_out(out::Tensor, primal::Tensor, tangent::Tensor, level::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_make\\_dual\\_copy\\_out(gc\\_tensor out, gc\\_tensor primal, gc\\_tensor tangent, int64\\_t level)
"""
function _make_dual_copy_out(out::Tensor, primal::Tensor, tangent::Tensor, level::Int64)

    __cret = ccall((:atg__make_dual_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, primal.pointer, tangent.pointer, level)
    return tensor_from_ptr(__cret)
end


"""
    _make_per_channel_quantized_tensor(self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_make\\_per\\_channel\\_quantized\\_tensor(gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int64\\_t axis)
"""
function _make_per_channel_quantized_tensor(self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64)

    __cret = ccall((:atg__make_per_channel_quantized_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, scale.pointer, zero_point.pointer, axis)
    return tensor_from_ptr(__cret)
end


"""
    _make_per_channel_quantized_tensor_out(out::Tensor, self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_make\\_per\\_channel\\_quantized\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int64\\_t axis)
"""
function _make_per_channel_quantized_tensor_out(out::Tensor, self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64)

    __cret = ccall((:atg__make_per_channel_quantized_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, scale.pointer, zero_point.pointer, axis)
    return tensor_from_ptr(__cret)
end


"""
    _make_per_tensor_quantized_tensor(self::Tensor, scale::Float64, zero_point::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_make\\_per\\_tensor\\_quantized\\_tensor(gc\\_tensor self, double scale, int64\\_t zero\\_point)
"""
function _make_per_tensor_quantized_tensor(self::Tensor, scale::Float64, zero_point::Int64)

    __cret = ccall((:atg__make_per_tensor_quantized_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Clonglong),
                 self.pointer, scale, zero_point)
    return tensor_from_ptr(__cret)
end


"""
    _make_per_tensor_quantized_tensor_out(out::Tensor, self::Tensor, scale::Float64, zero_point::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_make\\_per\\_tensor\\_quantized\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, double scale, int64\\_t zero\\_point)
"""
function _make_per_tensor_quantized_tensor_out(out::Tensor, self::Tensor, scale::Float64, zero_point::Int64)

    __cret = ccall((:atg__make_per_tensor_quantized_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Clonglong),
                 out.pointer, self.pointer, scale, zero_point)
    return tensor_from_ptr(__cret)
end


"""
    _masked_scale(self::Tensor, mask::Tensor, scale::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_masked\\_scale(gc\\_tensor self, gc\\_tensor mask, double scale)
"""
function _masked_scale(self::Tensor, mask::Tensor, scale::Float64)

    __cret = ccall((:atg__masked_scale, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 self.pointer, mask.pointer, scale)
    return tensor_from_ptr(__cret)
end


"""
    _masked_scale_out(out::Tensor, self::Tensor, mask::Tensor, scale::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_masked\\_scale\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mask, double scale)
"""
function _masked_scale_out(out::Tensor, self::Tensor, mask::Tensor, scale::Float64)

    __cret = ccall((:atg__masked_scale_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 out.pointer, self.pointer, mask.pointer, scale)
    return tensor_from_ptr(__cret)
end


"""
    _masked_softmax(self::Tensor, mask::Tensor, dim_v::Int64, dim_null::Int, mask_type_v::Int64, mask_type_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_masked\\_softmax(gc\\_tensor self, gc\\_tensor mask, int64\\_t dim\\_v, int dim\\_null, int64\\_t mask\\_type\\_v, int mask\\_type\\_null)
"""
function _masked_softmax(self::Tensor, mask::Tensor, dim_v::Int64, dim_null::Int, mask_type_v::Int64, mask_type_null::Int)

    __cret = ccall((:atg__masked_softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Clonglong, Cint),
                 self.pointer, mask.pointer, dim_v, dim_null, mask_type_v, mask_type_null)
    return tensor_from_ptr(__cret)
end


"""
    _masked_softmax_backward(grad_output::Tensor, output::Tensor, mask::Tensor, dim_v::Int64, dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_masked\\_softmax\\_backward(gc\\_tensor grad\\_output, gc\\_tensor output, gc\\_tensor mask, int64\\_t dim\\_v, int dim\\_null)
"""
function _masked_softmax_backward(grad_output::Tensor, output::Tensor, mask::Tensor, dim_v::Int64, dim_null::Int)

    __cret = ccall((:atg__masked_softmax_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 grad_output.pointer, output.pointer, mask.pointer, dim_v, dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _masked_softmax_backward_out(out::Tensor, grad_output::Tensor, output::Tensor, mask::Tensor, dim_v::Int64, dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_masked\\_softmax\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor output, gc\\_tensor mask, int64\\_t dim\\_v, int dim\\_null)
"""
function _masked_softmax_backward_out(out::Tensor, grad_output::Tensor, output::Tensor, mask::Tensor, dim_v::Int64, dim_null::Int)

    __cret = ccall((:atg__masked_softmax_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, grad_output.pointer, output.pointer, mask.pointer, dim_v, dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _masked_softmax_out(out::Tensor, self::Tensor, mask::Tensor, dim_v::Int64, dim_null::Int, mask_type_v::Int64, mask_type_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_masked\\_softmax\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mask, int64\\_t dim\\_v, int dim\\_null, int64\\_t mask\\_type\\_v, int mask\\_type\\_null)
"""
function _masked_softmax_out(out::Tensor, self::Tensor, mask::Tensor, dim_v::Int64, dim_null::Int, mask_type_v::Int64, mask_type_null::Int)

    __cret = ccall((:atg__masked_softmax_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, mask.pointer, dim_v, dim_null, mask_type_v, mask_type_null)
    return tensor_from_ptr(__cret)
end


"""
    _mkldnn_reshape(self::Tensor, shape_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_mkldnn\\_reshape(gc\\_tensor self, int64\\_t *shape\\_data, int shape\\_len)
"""
function _mkldnn_reshape(self::Tensor, shape_data::Array{Int64})
    shape_len = length(shape_data)
    __cret = ccall((:atg__mkldnn_reshape, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, shape_data, shape_len)
    return tensor_from_ptr(__cret)
end


"""
    _mkldnn_reshape_out(out::Tensor, self::Tensor, shape_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_mkldnn\\_reshape\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *shape\\_data, int shape\\_len)
"""
function _mkldnn_reshape_out(out::Tensor, self::Tensor, shape_data::Array{Int64})
    shape_len = length(shape_data)
    __cret = ccall((:atg__mkldnn_reshape_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, shape_data, shape_len)
    return tensor_from_ptr(__cret)
end


"""
    _mkldnn_transpose(self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_mkldnn\\_transpose(gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function _mkldnn_transpose(self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg__mkldnn_transpose, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    _mkldnn_transpose!(self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_mkldnn\\_transpose\\_(gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function _mkldnn_transpose!(self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg__mkldnn_transpose_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    _mkldnn_transpose_out(out::Tensor, self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_mkldnn\\_transpose\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function _mkldnn_transpose_out(out::Tensor, self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg__mkldnn_transpose_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    _mps_convolution(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_mps\\_convolution(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function _mps_convolution(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg__mps_convolution, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    _mps_convolution_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_mps\\_convolution\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function _mps_convolution_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg__mps_convolution_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    _mps_convolution_transpose(self::Tensor, weight::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_mps\\_convolution\\_transpose(gc\\_tensor self, gc\\_tensor weight, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function _mps_convolution_transpose(self::Tensor, weight::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg__mps_convolution_transpose, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, weight.pointer, padding_data, padding_len, output_padding_data, output_padding_len, stride_data, stride_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    _mps_convolution_transpose_out(out::Tensor, self::Tensor, weight::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_mps\\_convolution\\_transpose\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function _mps_convolution_transpose_out(out::Tensor, self::Tensor, weight::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg__mps_convolution_transpose_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, self.pointer, weight.pointer, padding_data, padding_len, output_padding_data, output_padding_len, stride_data, stride_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end
# _native_batch_norm_legit ignored

# _native_batch_norm_legit_functional ignored

# _native_batch_norm_legit_no_stats ignored

# _native_batch_norm_legit_no_stats_out ignored

# _native_batch_norm_legit_no_training ignored

# _native_batch_norm_legit_no_training_out ignored

# _native_batch_norm_legit_out ignored

# _native_multi_head_attention ignored

# _native_multi_head_attention_out ignored



"""
    _neg_view(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_neg\\_view(gc\\_tensor self)
"""
function _neg_view(self::Tensor)

    __cret = ccall((:atg__neg_view, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _neg_view_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_neg\\_view\\_copy(gc\\_tensor self)
"""
function _neg_view_copy(self::Tensor)

    __cret = ccall((:atg__neg_view_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _neg_view_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_neg\\_view\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _neg_view_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__neg_view_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _nested_from_padded(padded::Tensor, cpu_nested_shape_example::Tensor, fuse_transform_0213::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_from\\_padded(gc\\_tensor padded, gc\\_tensor cpu\\_nested\\_shape\\_example, int fuse\\_transform\\_0213)
"""
function _nested_from_padded(padded::Tensor, cpu_nested_shape_example::Tensor, fuse_transform_0213::Int)

    __cret = ccall((:atg__nested_from_padded, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 padded.pointer, cpu_nested_shape_example.pointer, fuse_transform_0213)
    return tensor_from_ptr(__cret)
end


"""
    _nested_from_padded_and_nested_example(padded::Tensor, nt_example::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_from\\_padded\\_and\\_nested\\_example(gc\\_tensor padded, gc\\_tensor nt\\_example)
"""
function _nested_from_padded_and_nested_example(padded::Tensor, nt_example::Tensor)

    __cret = ccall((:atg__nested_from_padded_and_nested_example, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 padded.pointer, nt_example.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _nested_from_padded_and_nested_example_out(out::Tensor, padded::Tensor, nt_example::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_from\\_padded\\_and\\_nested\\_example\\_out(gc\\_tensor out, gc\\_tensor padded, gc\\_tensor nt\\_example)
"""
function _nested_from_padded_and_nested_example_out(out::Tensor, padded::Tensor, nt_example::Tensor)

    __cret = ccall((:atg__nested_from_padded_and_nested_example_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, padded.pointer, nt_example.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _nested_from_padded_out(out::Tensor, padded::Tensor, cpu_nested_shape_example::Tensor, fuse_transform_0213::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_from\\_padded\\_out(gc\\_tensor out, gc\\_tensor padded, gc\\_tensor cpu\\_nested\\_shape\\_example, int fuse\\_transform\\_0213)
"""
function _nested_from_padded_out(out::Tensor, padded::Tensor, cpu_nested_shape_example::Tensor, fuse_transform_0213::Int)

    __cret = ccall((:atg__nested_from_padded_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, padded.pointer, cpu_nested_shape_example.pointer, fuse_transform_0213)
    return tensor_from_ptr(__cret)
end


"""
    _nested_select_backward(grad_output::Tensor, self::Tensor, dim::Int64, index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_select\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t dim, int64\\_t index)
"""
function _nested_select_backward(grad_output::Tensor, self::Tensor, dim::Int64, index::Int64)
    dim = dim - 1
    __cret = ccall((:atg__nested_select_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 grad_output.pointer, self.pointer, dim, index)
    return tensor_from_ptr(__cret)
end


"""
    _nested_sum_backward(grad::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_sum\\_backward(gc\\_tensor grad, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function _nested_sum_backward(grad::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__nested_sum_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 grad.pointer, self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    _nested_view_from_buffer(self::Tensor, nested_size::Tensor, nested_strides::Tensor, offsets::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_view\\_from\\_buffer(gc\\_tensor self, gc\\_tensor nested\\_size, gc\\_tensor nested\\_strides, gc\\_tensor offsets)
"""
function _nested_view_from_buffer(self::Tensor, nested_size::Tensor, nested_strides::Tensor, offsets::Tensor)

    __cret = ccall((:atg__nested_view_from_buffer, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, nested_size.pointer, nested_strides.pointer, offsets.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _nested_view_from_buffer_copy(self::Tensor, nested_size::Tensor, nested_strides::Tensor, offsets::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_view\\_from\\_buffer\\_copy(gc\\_tensor self, gc\\_tensor nested\\_size, gc\\_tensor nested\\_strides, gc\\_tensor offsets)
"""
function _nested_view_from_buffer_copy(self::Tensor, nested_size::Tensor, nested_strides::Tensor, offsets::Tensor)

    __cret = ccall((:atg__nested_view_from_buffer_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, nested_size.pointer, nested_strides.pointer, offsets.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _nested_view_from_buffer_copy_out(out::Tensor, self::Tensor, nested_size::Tensor, nested_strides::Tensor, offsets::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_nested\\_view\\_from\\_buffer\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor nested\\_size, gc\\_tensor nested\\_strides, gc\\_tensor offsets)
"""
function _nested_view_from_buffer_copy_out(out::Tensor, self::Tensor, nested_size::Tensor, nested_strides::Tensor, offsets::Tensor)

    __cret = ccall((:atg__nested_view_from_buffer_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, nested_size.pointer, nested_strides.pointer, offsets.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _new_zeros_with_same_feature_meta(self::Tensor, other::Tensor, self_num_batch_dims::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_new\\_zeros\\_with\\_same\\_feature\\_meta(gc\\_tensor self, gc\\_tensor other, int64\\_t self\\_num\\_batch\\_dims)
"""
function _new_zeros_with_same_feature_meta(self::Tensor, other::Tensor, self_num_batch_dims::Int64)

    __cret = ccall((:atg__new_zeros_with_same_feature_meta, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, other.pointer, self_num_batch_dims)
    return tensor_from_ptr(__cret)
end


"""
    _new_zeros_with_same_feature_meta_out(out::Tensor, self::Tensor, other::Tensor, self_num_batch_dims::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_new\\_zeros\\_with\\_same\\_feature\\_meta\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other, int64\\_t self\\_num\\_batch\\_dims)
"""
function _new_zeros_with_same_feature_meta_out(out::Tensor, self::Tensor, other::Tensor, self_num_batch_dims::Int64)

    __cret = ccall((:atg__new_zeros_with_same_feature_meta_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, other.pointer, self_num_batch_dims)
    return tensor_from_ptr(__cret)
end


"""
    _nnpack_spatial_convolution(input::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_nnpack\\_spatial\\_convolution(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function _nnpack_spatial_convolution(input::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64})
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg__nnpack_spatial_convolution, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 input.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    _nnpack_spatial_convolution_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_nnpack\\_spatial\\_convolution\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function _nnpack_spatial_convolution_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64})
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg__nnpack_spatial_convolution_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, input.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    _nnz(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_\\_nnz(gc\\_tensor self)
"""
function _nnz(self::Tensor)

    __cret = ccall((:atg__nnz, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end
# _pack_padded_sequence ignored



"""
    _pack_padded_sequence_backward(grad::Tensor, input_size_data::Array{Int64}, batch_sizes::Tensor, batch_first::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_pack\\_padded\\_sequence\\_backward(gc\\_tensor grad, int64\\_t *input\\_size\\_data, int input\\_size\\_len, gc\\_tensor batch\\_sizes, int batch\\_first)
"""
function _pack_padded_sequence_backward(grad::Tensor, input_size_data::Array{Int64}, batch_sizes::Tensor, batch_first::Int)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__pack_padded_sequence_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 grad.pointer, input_size_data, input_size_len, batch_sizes.pointer, batch_first)
    return tensor_from_ptr(__cret)
end
# _pack_padded_sequence_out ignored



"""
    _pad_circular(self::Tensor, pad_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_pad\\_circular(gc\\_tensor self, int64\\_t *pad\\_data, int pad\\_len)
"""
function _pad_circular(self::Tensor, pad_data::Array{Int64})
    pad_len = length(pad_data)
    __cret = ccall((:atg__pad_circular, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, pad_data, pad_len)
    return tensor_from_ptr(__cret)
end


"""
    _pad_enum(self::Tensor, pad_data::Array{Int64}, mode::Int64, value_v::Float64, value_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_pad\\_enum(gc\\_tensor self, int64\\_t *pad\\_data, int pad\\_len, int64\\_t mode, double value\\_v, int value\\_null)
"""
function _pad_enum(self::Tensor, pad_data::Array{Int64}, mode::Int64, value_v::Float64, value_null::Int)
    pad_len = length(pad_data)
    __cret = ccall((:atg__pad_enum, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cdouble, Cint),
                 self.pointer, pad_data, pad_len, mode, value_v, value_null)
    return tensor_from_ptr(__cret)
end
# _pad_packed_sequence ignored



"""
    _pdist_backward(grad::Tensor, self::Tensor, p::Float64, pdist::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_pdist\\_backward(gc\\_tensor grad, gc\\_tensor self, double p, gc\\_tensor pdist)
"""
function _pdist_backward(grad::Tensor, self::Tensor, p::Float64, pdist::Tensor)

    __cret = ccall((:atg__pdist_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Ptr{Cvoid}),
                 grad.pointer, self.pointer, p, pdist.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _pdist_backward_out(out::Tensor, grad::Tensor, self::Tensor, p::Float64, pdist::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_pdist\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad, gc\\_tensor self, double p, gc\\_tensor pdist)
"""
function _pdist_backward_out(out::Tensor, grad::Tensor, self::Tensor, p::Float64, pdist::Tensor)

    __cret = ccall((:atg__pdist_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Ptr{Cvoid}),
                 out.pointer, grad.pointer, self.pointer, p, pdist.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _pin_memory(self::Tensor, device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_pin\\_memory(gc\\_tensor self, int device)
"""
function _pin_memory(self::Tensor, device::Int)

    __cret = ccall((:atg__pin_memory, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, device)
    return tensor_from_ptr(__cret)
end


"""
    _pin_memory_out(out::Tensor, self::Tensor, device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_pin\\_memory\\_out(gc\\_tensor out, gc\\_tensor self, int device)
"""
function _pin_memory_out(out::Tensor, self::Tensor, device::Int)

    __cret = ccall((:atg__pin_memory_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, device)
    return tensor_from_ptr(__cret)
end


"""
    _prelu_kernel(self::Tensor, weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_prelu\\_kernel(gc\\_tensor self, gc\\_tensor weight)
"""
function _prelu_kernel(self::Tensor, weight::Tensor)

    __cret = ccall((:atg__prelu_kernel, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, weight.pointer)
    return tensor_from_ptr(__cret)
end
# _prelu_kernel_backward ignored



"""
    _propagate_xla_data(input::Tensor, output::Tensor)

 Wrapper of C++ function void atg\\_\\_propagate\\_xla\\_data(gc\\_tensor input, gc\\_tensor output)
"""
function _propagate_xla_data(input::Tensor, output::Tensor)

    __cret = ccall((:atg__propagate_xla_data, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, output.pointer)
    return __cret
end


"""
    _remove_batch_dim(self::Tensor, level::Int64, batch_size::Int64, out_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_remove\\_batch\\_dim(gc\\_tensor self, int64\\_t level, int64\\_t batch\\_size, int64\\_t out\\_dim)
"""
function _remove_batch_dim(self::Tensor, level::Int64, batch_size::Int64, out_dim::Int64)

    __cret = ccall((:atg__remove_batch_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, level, batch_size, out_dim)
    return tensor_from_ptr(__cret)
end


"""
    _reshape_alias(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_reshape\\_alias(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function _reshape_alias(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg__reshape_alias, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    _reshape_alias_copy(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_reshape\\_alias\\_copy(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function _reshape_alias_copy(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg__reshape_alias_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    _reshape_alias_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_reshape\\_alias\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function _reshape_alias_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg__reshape_alias_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    _reshape_copy(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_reshape\\_copy(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function _reshape_copy(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__reshape_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    _reshape_from_tensor(self::Tensor, shape::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_reshape\\_from\\_tensor(gc\\_tensor self, gc\\_tensor shape)
"""
function _reshape_from_tensor(self::Tensor, shape::Tensor)

    __cret = ccall((:atg__reshape_from_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, shape.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _resize_output(self::Tensor, size_data::Array{Int64}, device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_resize\\_output(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int device)
"""
function _resize_output(self::Tensor, size_data::Array{Int64}, device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__resize_output, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, size_data, size_len, device)
    return tensor_from_ptr(__cret)
end


"""
    _resize_output!(self::Tensor, size_data::Array{Int64}, device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_resize\\_output\\_(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int device)
"""
function _resize_output!(self::Tensor, size_data::Array{Int64}, device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__resize_output_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, size_data, size_len, device)
    return tensor_from_ptr(__cret)
end


"""
    _resize_output_out(out::Tensor, self::Tensor, size_data::Array{Int64}, device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_resize\\_output\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int device)
"""
function _resize_output_out(out::Tensor, self::Tensor, size_data::Array{Int64}, device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__resize_output_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, size_data, size_len, device)
    return tensor_from_ptr(__cret)
end
# _rowwise_prune ignored



"""
    _sample_dirichlet(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sample\\_dirichlet(gc\\_tensor self)
"""
function _sample_dirichlet(self::Tensor)

    __cret = ccall((:atg__sample_dirichlet, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sample_dirichlet_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sample\\_dirichlet\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _sample_dirichlet_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__sample_dirichlet_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _saturate_weight_to_fp16(weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_saturate\\_weight\\_to\\_fp16(gc\\_tensor weight)
"""
function _saturate_weight_to_fp16(weight::Tensor)

    __cret = ccall((:atg__saturate_weight_to_fp16, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 weight.pointer)
    return tensor_from_ptr(__cret)
end
# _scaled_dot_product_attention_math ignored

# _scaled_dot_product_efficient_attention ignored

# _scaled_dot_product_flash_attention_backward ignored

# _scaled_mm ignored

# _scaled_mm_out ignored

# _scatter_reduce ignored

# _scatter_reduce_ ignored

# _scatter_reduce_two_out ignored

# _segment_reduce_backward ignored

# _segment_reduce_backward_out ignored



"""
    _shape_as_tensor(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_shape\\_as\\_tensor(gc\\_tensor self)
"""
function _shape_as_tensor(self::Tensor)

    __cret = ccall((:atg__shape_as_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# _slow_conv2d_backward ignored

# _sobol_engine_draw ignored



"""
    _sobol_engine_ff!(self::Tensor, n::Int64, sobolstate::Tensor, dimension::Int64, num_generated::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sobol\\_engine\\_ff\\_(gc\\_tensor self, int64\\_t n, gc\\_tensor sobolstate, int64\\_t dimension, int64\\_t num\\_generated)
"""
function _sobol_engine_ff!(self::Tensor, n::Int64, sobolstate::Tensor, dimension::Int64, num_generated::Int64)

    __cret = ccall((:atg__sobol_engine_ff_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, n, sobolstate.pointer, dimension, num_generated)
    return tensor_from_ptr(__cret)
end


"""
    _sobol_engine_initialize_state!(self::Tensor, dimension::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sobol\\_engine\\_initialize\\_state\\_(gc\\_tensor self, int64\\_t dimension)
"""
function _sobol_engine_initialize_state!(self::Tensor, dimension::Int64)

    __cret = ccall((:atg__sobol_engine_initialize_state_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dimension)
    return tensor_from_ptr(__cret)
end


"""
    _sobol_engine_scramble!(self::Tensor, ltm::Tensor, dimension::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sobol\\_engine\\_scramble\\_(gc\\_tensor self, gc\\_tensor ltm, int64\\_t dimension)
"""
function _sobol_engine_scramble!(self::Tensor, ltm::Tensor, dimension::Int64)

    __cret = ccall((:atg__sobol_engine_scramble_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, ltm.pointer, dimension)
    return tensor_from_ptr(__cret)
end


"""
    _softmax(self::Tensor, dim::Int64, half_to_float::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_softmax(gc\\_tensor self, int64\\_t dim, int half\\_to\\_float)
"""
function _softmax(self::Tensor, dim::Int64, half_to_float::Int)
    dim = dim - 1
    __cret = ccall((:atg__softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, half_to_float)
    return tensor_from_ptr(__cret)
end


"""
    _softmax_backward_data(grad_output::Tensor, output::Tensor, dim::Int64, input_dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_softmax\\_backward\\_data(gc\\_tensor grad\\_output, gc\\_tensor output, int64\\_t dim, int input\\_dtype)
"""
function _softmax_backward_data(grad_output::Tensor, output::Tensor, dim::Int64, input_dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg__softmax_backward_data, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 grad_output.pointer, output.pointer, dim, input_dtype)
    return tensor_from_ptr(__cret)
end


"""
    _softmax_backward_data_out(grad_input::Tensor, grad_output::Tensor, output::Tensor, dim::Int64, input_dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_softmax\\_backward\\_data\\_out(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor output, int64\\_t dim, int input\\_dtype)
"""
function _softmax_backward_data_out(grad_input::Tensor, grad_output::Tensor, output::Tensor, dim::Int64, input_dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg__softmax_backward_data_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 grad_input.pointer, grad_output.pointer, output.pointer, dim, input_dtype)
    return tensor_from_ptr(__cret)
end


"""
    _softmax_out(out::Tensor, self::Tensor, dim::Int64, half_to_float::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_softmax\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int half\\_to\\_float)
"""
function _softmax_out(out::Tensor, self::Tensor, dim::Int64, half_to_float::Int)
    dim = dim - 1
    __cret = ccall((:atg__softmax_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, half_to_float)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_addmm(self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_addmm(gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function _sparse_addmm(self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg__sparse_addmm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_addmm_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_addmm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function _sparse_addmm_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg__sparse_addmm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_broadcast_to(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_broadcast\\_to(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function _sparse_broadcast_to(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_broadcast_to, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_broadcast_to_copy(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_broadcast\\_to\\_copy(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function _sparse_broadcast_to_copy(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_broadcast_to_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_broadcast_to_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_broadcast\\_to\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function _sparse_broadcast_to_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_broadcast_to_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_bsc_tensor_unsafe(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_bsc\\_tensor\\_unsafe(gc\\_tensor ccol\\_indices, gc\\_tensor row\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function _sparse_bsc_tensor_unsafe(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_bsc_tensor_unsafe, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 ccol_indices.pointer, row_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_bsr_tensor_unsafe(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_bsr\\_tensor\\_unsafe(gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function _sparse_bsr_tensor_unsafe(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_bsr_tensor_unsafe, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 crow_indices.pointer, col_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_compressed_tensor_unsafe(compressed_indices::Tensor, plain_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_compressed\\_tensor\\_unsafe(gc\\_tensor compressed\\_indices, gc\\_tensor plain\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function _sparse_compressed_tensor_unsafe(compressed_indices::Tensor, plain_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_compressed_tensor_unsafe, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 compressed_indices.pointer, plain_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_coo_tensor_unsafe(indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int, is_coalesced::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_coo\\_tensor\\_unsafe(gc\\_tensor indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device, int is\\_coalesced)
"""
function _sparse_coo_tensor_unsafe(indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int, is_coalesced::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_coo_tensor_unsafe, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint, Cint),
                 indices.pointer, values.pointer, size_data, size_len, options_kind, options_device, is_coalesced)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_coo_tensor_with_dims(sparse_dim::Int64, dense_dim::Int64, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_coo\\_tensor\\_with\\_dims(int64\\_t sparse\\_dim, int64\\_t dense\\_dim, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function _sparse_coo_tensor_with_dims(sparse_dim::Int64, dense_dim::Int64, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_coo_tensor_with_dims, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Clonglong, Ptr{Cvoid}, Cint, Cint, Cint),
                 sparse_dim, dense_dim, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_coo_tensor_with_dims_and_tensors(sparse_dim::Int64, dense_dim::Int64, size_data::Array{Int64}, indices::Tensor, values::Tensor, options_kind::Int, options_device::Int, is_coalesced::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_coo\\_tensor\\_with\\_dims\\_and\\_tensors(int64\\_t sparse\\_dim, int64\\_t dense\\_dim, int64\\_t *size\\_data, int size\\_len, gc\\_tensor indices, gc\\_tensor values, int options\\_kind, int options\\_device, int is\\_coalesced)
"""
function _sparse_coo_tensor_with_dims_and_tensors(sparse_dim::Int64, dense_dim::Int64, size_data::Array{Int64}, indices::Tensor, values::Tensor, options_kind::Int, options_device::Int, is_coalesced::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_coo_tensor_with_dims_and_tensors, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Clonglong, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 sparse_dim, dense_dim, size_data, size_len, indices.pointer, values.pointer, options_kind, options_device, is_coalesced)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_coo_tensor_with_dims_and_tensors_out(out::Tensor, sparse_dim::Int64, dense_dim::Int64, size_data::Array{Int64}, indices::Tensor, values::Tensor, is_coalesced::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_coo\\_tensor\\_with\\_dims\\_and\\_tensors\\_out(gc\\_tensor out, int64\\_t sparse\\_dim, int64\\_t dense\\_dim, int64\\_t *size\\_data, int size\\_len, gc\\_tensor indices, gc\\_tensor values, int is\\_coalesced)
"""
function _sparse_coo_tensor_with_dims_and_tensors_out(out::Tensor, sparse_dim::Int64, dense_dim::Int64, size_data::Array{Int64}, indices::Tensor, values::Tensor, is_coalesced::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_coo_tensor_with_dims_and_tensors_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, sparse_dim, dense_dim, size_data, size_len, indices.pointer, values.pointer, is_coalesced)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_coo_tensor_with_dims_out(out::Tensor, sparse_dim::Int64, dense_dim::Int64, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_coo\\_tensor\\_with\\_dims\\_out(gc\\_tensor out, int64\\_t sparse\\_dim, int64\\_t dense\\_dim, int64\\_t *size\\_data, int size\\_len)
"""
function _sparse_coo_tensor_with_dims_out(out::Tensor, sparse_dim::Int64, dense_dim::Int64, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_coo_tensor_with_dims_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Cint),
                 out.pointer, sparse_dim, dense_dim, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_csc_tensor_unsafe(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_csc\\_tensor\\_unsafe(gc\\_tensor ccol\\_indices, gc\\_tensor row\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function _sparse_csc_tensor_unsafe(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_csc_tensor_unsafe, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 ccol_indices.pointer, row_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_csr_prod(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_csr\\_prod(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function _sparse_csr_prod(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_csr_prod, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_csr_prod_dim_dtype_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_csr\\_prod\\_dim\\_dtype\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function _sparse_csr_prod_dim_dtype_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_csr_prod_dim_dtype_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_csr_sum(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_csr\\_sum(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function _sparse_csr_sum(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_csr_sum, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_csr_sum_dim_dtype_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_csr\\_sum\\_dim\\_dtype\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function _sparse_csr_sum_dim_dtype_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_csr_sum_dim_dtype_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_csr_tensor_unsafe(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_csr\\_tensor\\_unsafe(gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function _sparse_csr_tensor_unsafe(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg__sparse_csr_tensor_unsafe, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 crow_indices.pointer, col_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_log_softmax(self::Tensor, dim::Int64, half_to_float::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_log\\_softmax(gc\\_tensor self, int64\\_t dim, int half\\_to\\_float)
"""
function _sparse_log_softmax(self::Tensor, dim::Int64, half_to_float::Int)
    dim = dim - 1
    __cret = ccall((:atg__sparse_log_softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, half_to_float)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_log_softmax_backward_data(grad_output::Tensor, output::Tensor, dim::Int64, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_log\\_softmax\\_backward\\_data(gc\\_tensor grad\\_output, gc\\_tensor output, int64\\_t dim, gc\\_tensor self)
"""
function _sparse_log_softmax_backward_data(grad_output::Tensor, output::Tensor, dim::Int64, self::Tensor)
    dim = dim - 1
    __cret = ccall((:atg__sparse_log_softmax_backward_data, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 grad_output.pointer, output.pointer, dim, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_log_softmax_backward_data_out(out::Tensor, grad_output::Tensor, output::Tensor, dim::Int64, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_log\\_softmax\\_backward\\_data\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor output, int64\\_t dim, gc\\_tensor self)
"""
function _sparse_log_softmax_backward_data_out(out::Tensor, grad_output::Tensor, output::Tensor, dim::Int64, self::Tensor)
    dim = dim - 1
    __cret = ccall((:atg__sparse_log_softmax_backward_data_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 out.pointer, grad_output.pointer, output.pointer, dim, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_log_softmax_int(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_log\\_softmax\\_int(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function _sparse_log_softmax_int(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg__sparse_log_softmax_int, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_log_softmax_out(out::Tensor, self::Tensor, dim::Int64, half_to_float::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_log\\_softmax\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int half\\_to\\_float)
"""
function _sparse_log_softmax_out(out::Tensor, self::Tensor, dim::Int64, half_to_float::Int)
    dim = dim - 1
    __cret = ccall((:atg__sparse_log_softmax_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, half_to_float)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_mask_projection(self::Tensor, mask::Tensor, accumulate_matches::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_mask\\_projection(gc\\_tensor self, gc\\_tensor mask, int accumulate\\_matches)
"""
function _sparse_mask_projection(self::Tensor, mask::Tensor, accumulate_matches::Int)

    __cret = ccall((:atg__sparse_mask_projection, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, mask.pointer, accumulate_matches)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_mask_projection_out(out::Tensor, self::Tensor, mask::Tensor, accumulate_matches::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_mask\\_projection\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mask, int accumulate\\_matches)
"""
function _sparse_mask_projection_out(out::Tensor, self::Tensor, mask::Tensor, accumulate_matches::Int)

    __cret = ccall((:atg__sparse_mask_projection_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, mask.pointer, accumulate_matches)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_mm(sparse::Tensor, dense::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_mm(gc\\_tensor sparse, gc\\_tensor dense)
"""
function _sparse_mm(sparse::Tensor, dense::Tensor)

    __cret = ccall((:atg__sparse_mm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 sparse.pointer, dense.pointer)
    return tensor_from_ptr(__cret)
end
# _sparse_mm_reduce ignored

# _sparse_mm_reduce_impl ignored

# _sparse_semi_structured_linear ignored



"""
    _sparse_softmax(self::Tensor, dim::Int64, half_to_float::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_softmax(gc\\_tensor self, int64\\_t dim, int half\\_to\\_float)
"""
function _sparse_softmax(self::Tensor, dim::Int64, half_to_float::Int)
    dim = dim - 1
    __cret = ccall((:atg__sparse_softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, half_to_float)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_softmax_backward_data(grad_output::Tensor, output::Tensor, dim::Int64, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_softmax\\_backward\\_data(gc\\_tensor grad\\_output, gc\\_tensor output, int64\\_t dim, gc\\_tensor self)
"""
function _sparse_softmax_backward_data(grad_output::Tensor, output::Tensor, dim::Int64, self::Tensor)
    dim = dim - 1
    __cret = ccall((:atg__sparse_softmax_backward_data, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 grad_output.pointer, output.pointer, dim, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_softmax_backward_data_out(out::Tensor, grad_output::Tensor, output::Tensor, dim::Int64, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_softmax\\_backward\\_data\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor output, int64\\_t dim, gc\\_tensor self)
"""
function _sparse_softmax_backward_data_out(out::Tensor, grad_output::Tensor, output::Tensor, dim::Int64, self::Tensor)
    dim = dim - 1
    __cret = ccall((:atg__sparse_softmax_backward_data_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 out.pointer, grad_output.pointer, output.pointer, dim, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_softmax_int(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_softmax\\_int(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function _sparse_softmax_int(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg__sparse_softmax_int, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_softmax_out(out::Tensor, self::Tensor, dim::Int64, half_to_float::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_softmax\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int half\\_to\\_float)
"""
function _sparse_softmax_out(out::Tensor, self::Tensor, dim::Int64, half_to_float::Int)
    dim = dim - 1
    __cret = ccall((:atg__sparse_softmax_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, half_to_float)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sparse_matmul(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sparse\\_matmul(gc\\_tensor self, gc\\_tensor other)
"""
function _sparse_sparse_matmul(self::Tensor, other::Tensor)

    __cret = ccall((:atg__sparse_sparse_matmul, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sparse_matmul_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sparse\\_matmul\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function _sparse_sparse_matmul_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg__sparse_sparse_matmul_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sum(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sum(gc\\_tensor self)
"""
function _sparse_sum(self::Tensor)

    __cret = ccall((:atg__sparse_sum, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sum_backward(grad::Tensor, self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sum\\_backward(gc\\_tensor grad, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function _sparse_sum_backward(grad::Tensor, self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_sum_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad.pointer, self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sum_backward_out(out::Tensor, grad::Tensor, self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sum\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function _sparse_sum_backward_out(out::Tensor, grad::Tensor, self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_sum_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, grad.pointer, self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sum_dim(self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sum\\_dim(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function _sparse_sum_dim(self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_sum_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sum_dim_dtype(self::Tensor, dim_data::Array{Int64}, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sum\\_dim\\_dtype(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int dtype)
"""
function _sparse_sum_dim_dtype(self::Tensor, dim_data::Array{Int64}, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_sum_dim_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dim_data, dim_len, dtype)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sum_dim_out(out::Tensor, self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sum\\_dim\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function _sparse_sum_dim_out(out::Tensor, self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg__sparse_sum_dim_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    _sparse_sum_dtype(self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_sparse\\_sum\\_dtype(gc\\_tensor self, int dtype)
"""
function _sparse_sum_dtype(self::Tensor, dtype::Int)

    __cret = ccall((:atg__sparse_sum_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    _spdiags(diagonals::Tensor, offsets::Tensor, shape_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_spdiags(gc\\_tensor diagonals, gc\\_tensor offsets, int64\\_t *shape\\_data, int shape\\_len)
"""
function _spdiags(diagonals::Tensor, offsets::Tensor, shape_data::Array{Int64})
    shape_len = length(shape_data)
    __cret = ccall((:atg__spdiags, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 diagonals.pointer, offsets.pointer, shape_data, shape_len)
    return tensor_from_ptr(__cret)
end


"""
    _spdiags_out(out::Tensor, diagonals::Tensor, offsets::Tensor, shape_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_spdiags\\_out(gc\\_tensor out, gc\\_tensor diagonals, gc\\_tensor offsets, int64\\_t *shape\\_data, int shape\\_len)
"""
function _spdiags_out(out::Tensor, diagonals::Tensor, offsets::Tensor, shape_data::Array{Int64})
    shape_len = length(shape_data)
    __cret = ccall((:atg__spdiags_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, diagonals.pointer, offsets.pointer, shape_data, shape_len)
    return tensor_from_ptr(__cret)
end
# _stack ignored

# _stack_out ignored



"""
    _standard_gamma(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_standard\\_gamma(gc\\_tensor self)
"""
function _standard_gamma(self::Tensor)

    __cret = ccall((:atg__standard_gamma, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _standard_gamma_grad(self::Tensor, output::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_standard\\_gamma\\_grad(gc\\_tensor self, gc\\_tensor output)
"""
function _standard_gamma_grad(self::Tensor, output::Tensor)

    __cret = ccall((:atg__standard_gamma_grad, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, output.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _standard_gamma_grad_out(out::Tensor, self::Tensor, output::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_standard\\_gamma\\_grad\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor output)
"""
function _standard_gamma_grad_out(out::Tensor, self::Tensor, output::Tensor)

    __cret = ccall((:atg__standard_gamma_grad_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, output.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _standard_gamma_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_standard\\_gamma\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _standard_gamma_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__standard_gamma_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_ambiguous_defaults(dummy::Tensor, a::Int64, b::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_ambiguous\\_defaults(gc\\_tensor dummy, int64\\_t a, int64\\_t b)
"""
function _test_ambiguous_defaults(dummy::Tensor, a::Int64, b::Int64)

    __cret = ccall((:atg__test_ambiguous_defaults, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 dummy.pointer, a, b)
    return tensor_from_ptr(__cret)
end
# _test_ambiguous_defaults_b ignored



"""
    _test_autograd_multiple_dispatch(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_autograd\\_multiple\\_dispatch(gc\\_tensor self)
"""
function _test_autograd_multiple_dispatch(self::Tensor)

    __cret = ccall((:atg__test_autograd_multiple_dispatch, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_autograd_multiple_dispatch_fullcoverage_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_autograd\\_multiple\\_dispatch\\_fullcoverage\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _test_autograd_multiple_dispatch_fullcoverage_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__test_autograd_multiple_dispatch_fullcoverage_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_autograd_multiple_dispatch_ntonly(self::Tensor, b::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_autograd\\_multiple\\_dispatch\\_ntonly(gc\\_tensor self, int b)
"""
function _test_autograd_multiple_dispatch_ntonly(self::Tensor, b::Int)

    __cret = ccall((:atg__test_autograd_multiple_dispatch_ntonly, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, b)
    return tensor_from_ptr(__cret)
end


"""
    _test_autograd_multiple_dispatch_view(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_autograd\\_multiple\\_dispatch\\_view(gc\\_tensor self)
"""
function _test_autograd_multiple_dispatch_view(self::Tensor)

    __cret = ccall((:atg__test_autograd_multiple_dispatch_view, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_autograd_multiple_dispatch_view_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_autograd\\_multiple\\_dispatch\\_view\\_copy(gc\\_tensor self)
"""
function _test_autograd_multiple_dispatch_view_copy(self::Tensor)

    __cret = ccall((:atg__test_autograd_multiple_dispatch_view_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_autograd_multiple_dispatch_view_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_autograd\\_multiple\\_dispatch\\_view\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _test_autograd_multiple_dispatch_view_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__test_autograd_multiple_dispatch_view_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_check_tensor(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_check\\_tensor(gc\\_tensor self)
"""
function _test_check_tensor(self::Tensor)

    __cret = ccall((:atg__test_check_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_functorch_fallback(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_functorch\\_fallback(gc\\_tensor self, gc\\_tensor other)
"""
function _test_functorch_fallback(self::Tensor, other::Tensor)

    __cret = ccall((:atg__test_functorch_fallback, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_functorch_fallback_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_functorch\\_fallback\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function _test_functorch_fallback_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg__test_functorch_fallback_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_optional_filled_intlist(values::Tensor, addends_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_optional\\_filled\\_intlist(gc\\_tensor values, int64\\_t *addends\\_data, int addends\\_len)
"""
function _test_optional_filled_intlist(values::Tensor, addends_data::Array{Int64})
    addends_len = length(addends_data)
    __cret = ccall((:atg__test_optional_filled_intlist, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 values.pointer, addends_data, addends_len)
    return tensor_from_ptr(__cret)
end


"""
    _test_optional_filled_intlist_out(out::Tensor, values::Tensor, addends_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_optional\\_filled\\_intlist\\_out(gc\\_tensor out, gc\\_tensor values, int64\\_t *addends\\_data, int addends\\_len)
"""
function _test_optional_filled_intlist_out(out::Tensor, values::Tensor, addends_data::Array{Int64})
    addends_len = length(addends_data)
    __cret = ccall((:atg__test_optional_filled_intlist_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, values.pointer, addends_data, addends_len)
    return tensor_from_ptr(__cret)
end
# _test_optional_floatlist ignored

# _test_optional_floatlist_out ignored



"""
    _test_optional_intlist(values::Tensor, addends_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_optional\\_intlist(gc\\_tensor values, int64\\_t *addends\\_data, int addends\\_len)
"""
function _test_optional_intlist(values::Tensor, addends_data::Array{Int64})
    addends_len = length(addends_data)
    __cret = ccall((:atg__test_optional_intlist, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 values.pointer, addends_data, addends_len)
    return tensor_from_ptr(__cret)
end


"""
    _test_optional_intlist_out(out::Tensor, values::Tensor, addends_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_optional\\_intlist\\_out(gc\\_tensor out, gc\\_tensor values, int64\\_t *addends\\_data, int addends\\_len)
"""
function _test_optional_intlist_out(out::Tensor, values::Tensor, addends_data::Array{Int64})
    addends_len = length(addends_data)
    __cret = ccall((:atg__test_optional_intlist_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, values.pointer, addends_data, addends_len)
    return tensor_from_ptr(__cret)
end


"""
    _test_serialization_subcmul(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_serialization\\_subcmul(gc\\_tensor self, gc\\_tensor other)
"""
function _test_serialization_subcmul(self::Tensor, other::Tensor)

    __cret = ccall((:atg__test_serialization_subcmul, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
# _test_string_default ignored



"""
    _test_warn_in_autograd(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_warn\\_in\\_autograd(gc\\_tensor self)
"""
function _test_warn_in_autograd(self::Tensor)

    __cret = ccall((:atg__test_warn_in_autograd, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _test_warn_in_autograd_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_test\\_warn\\_in\\_autograd\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _test_warn_in_autograd_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__test_warn_in_autograd_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# _thnn_differentiable_gru_cell_backward ignored

# _thnn_differentiable_lstm_cell_backward ignored

# _thnn_fused_gru_cell ignored

# _thnn_fused_gru_cell_backward ignored

# _thnn_fused_gru_cell_backward_out ignored

# _thnn_fused_gru_cell_out ignored

# _thnn_fused_lstm_cell ignored

# _thnn_fused_lstm_cell_backward ignored

# _thnn_fused_lstm_cell_backward_impl ignored

# _thnn_fused_lstm_cell_backward_impl_out ignored

# _thnn_fused_lstm_cell_out ignored



"""
    _to_copy(self::Tensor, options_kind::Int, options_device::Int, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_copy(gc\\_tensor self, int options\\_kind, int options\\_device, int non\\_blocking)
"""
function _to_copy(self::Tensor, options_kind::Int, options_device::Int, non_blocking::Int)

    __cret = ccall((:atg__to_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, options_kind, options_device, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    _to_copy_out(out::Tensor, self::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int non\\_blocking)
"""
function _to_copy_out(out::Tensor, self::Tensor, non_blocking::Int)

    __cret = ccall((:atg__to_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end
# _to_cpu ignored



"""
    _to_dense(self::Tensor, dtype::Int, masked_grad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_dense(gc\\_tensor self, int dtype, int masked\\_grad)
"""
function _to_dense(self::Tensor, dtype::Int, masked_grad::Int)

    __cret = ccall((:atg__to_dense, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dtype, masked_grad)
    return tensor_from_ptr(__cret)
end


"""
    _to_dense_out(out::Tensor, self::Tensor, dtype::Int, masked_grad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_dense\\_out(gc\\_tensor out, gc\\_tensor self, int dtype, int masked\\_grad)
"""
function _to_dense_out(out::Tensor, self::Tensor, dtype::Int, masked_grad::Int)

    __cret = ccall((:atg__to_dense_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, dtype, masked_grad)
    return tensor_from_ptr(__cret)
end


"""
    _to_sparse_bsc(self::Tensor, blocksize_data::Array{Int64}, dense_dim_v::Int64, dense_dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_sparse\\_bsc(gc\\_tensor self, int64\\_t *blocksize\\_data, int blocksize\\_len, int64\\_t dense\\_dim\\_v, int dense\\_dim\\_null)
"""
function _to_sparse_bsc(self::Tensor, blocksize_data::Array{Int64}, dense_dim_v::Int64, dense_dim_null::Int)
    blocksize_len = length(blocksize_data)
    __cret = ccall((:atg__to_sparse_bsc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, blocksize_data, blocksize_len, dense_dim_v, dense_dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _to_sparse_bsc_out(out::Tensor, self::Tensor, blocksize_data::Array{Int64}, dense_dim_v::Int64, dense_dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_sparse\\_bsc\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *blocksize\\_data, int blocksize\\_len, int64\\_t dense\\_dim\\_v, int dense\\_dim\\_null)
"""
function _to_sparse_bsc_out(out::Tensor, self::Tensor, blocksize_data::Array{Int64}, dense_dim_v::Int64, dense_dim_null::Int)
    blocksize_len = length(blocksize_data)
    __cret = ccall((:atg__to_sparse_bsc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, blocksize_data, blocksize_len, dense_dim_v, dense_dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _to_sparse_bsr(self::Tensor, blocksize_data::Array{Int64}, dense_dim_v::Int64, dense_dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_sparse\\_bsr(gc\\_tensor self, int64\\_t *blocksize\\_data, int blocksize\\_len, int64\\_t dense\\_dim\\_v, int dense\\_dim\\_null)
"""
function _to_sparse_bsr(self::Tensor, blocksize_data::Array{Int64}, dense_dim_v::Int64, dense_dim_null::Int)
    blocksize_len = length(blocksize_data)
    __cret = ccall((:atg__to_sparse_bsr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, blocksize_data, blocksize_len, dense_dim_v, dense_dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _to_sparse_bsr_out(out::Tensor, self::Tensor, blocksize_data::Array{Int64}, dense_dim_v::Int64, dense_dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_sparse\\_bsr\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *blocksize\\_data, int blocksize\\_len, int64\\_t dense\\_dim\\_v, int dense\\_dim\\_null)
"""
function _to_sparse_bsr_out(out::Tensor, self::Tensor, blocksize_data::Array{Int64}, dense_dim_v::Int64, dense_dim_null::Int)
    blocksize_len = length(blocksize_data)
    __cret = ccall((:atg__to_sparse_bsr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, blocksize_data, blocksize_len, dense_dim_v, dense_dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _to_sparse_csc(self::Tensor, dense_dim_v::Int64, dense_dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_sparse\\_csc(gc\\_tensor self, int64\\_t dense\\_dim\\_v, int dense\\_dim\\_null)
"""
function _to_sparse_csc(self::Tensor, dense_dim_v::Int64, dense_dim_null::Int)

    __cret = ccall((:atg__to_sparse_csc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dense_dim_v, dense_dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _to_sparse_csc_out(out::Tensor, self::Tensor, dense_dim_v::Int64, dense_dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_sparse\\_csc\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dense\\_dim\\_v, int dense\\_dim\\_null)
"""
function _to_sparse_csc_out(out::Tensor, self::Tensor, dense_dim_v::Int64, dense_dim_null::Int)

    __cret = ccall((:atg__to_sparse_csc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dense_dim_v, dense_dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _to_sparse_csr(self::Tensor, dense_dim_v::Int64, dense_dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_sparse\\_csr(gc\\_tensor self, int64\\_t dense\\_dim\\_v, int dense\\_dim\\_null)
"""
function _to_sparse_csr(self::Tensor, dense_dim_v::Int64, dense_dim_null::Int)

    __cret = ccall((:atg__to_sparse_csr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dense_dim_v, dense_dim_null)
    return tensor_from_ptr(__cret)
end


"""
    _to_sparse_csr_out(out::Tensor, self::Tensor, dense_dim_v::Int64, dense_dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_to\\_sparse\\_csr\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dense\\_dim\\_v, int dense\\_dim\\_null)
"""
function _to_sparse_csr_out(out::Tensor, self::Tensor, dense_dim_v::Int64, dense_dim_null::Int)

    __cret = ccall((:atg__to_sparse_csr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dense_dim_v, dense_dim_null)
    return tensor_from_ptr(__cret)
end
# _to_sparse_semi_structured ignored

# _transform_bias_rescale_qkv ignored

# _transform_bias_rescale_qkv_out ignored



"""
    _transformer_encoder_layer_fwd(src::Tensor, embed_dim::Int64, num_heads::Int64, qkv_weight::Tensor, qkv_bias::Tensor, proj_weight::Tensor, proj_bias::Tensor, use_gelu::Int, norm_first::Int, eps::Float64, norm_weight_1::Tensor, norm_bias_1::Tensor, norm_weight_2::Tensor, norm_bias_2::Tensor, ffn_weight_1::Tensor, ffn_bias_1::Tensor, ffn_weight_2::Tensor, ffn_bias_2::Tensor, mask::Tensor, mask_type_v::Int64, mask_type_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_transformer\\_encoder\\_layer\\_fwd(gc\\_tensor src, int64\\_t embed\\_dim, int64\\_t num\\_heads, gc\\_tensor qkv\\_weight, gc\\_tensor qkv\\_bias, gc\\_tensor proj\\_weight, gc\\_tensor proj\\_bias, int use\\_gelu, int norm\\_first, double eps, gc\\_tensor norm\\_weight\\_1, gc\\_tensor norm\\_bias\\_1, gc\\_tensor norm\\_weight\\_2, gc\\_tensor norm\\_bias\\_2, gc\\_tensor ffn\\_weight\\_1, gc\\_tensor ffn\\_bias\\_1, gc\\_tensor ffn\\_weight\\_2, gc\\_tensor ffn\\_bias\\_2, gc\\_tensor mask, int64\\_t mask\\_type\\_v, int mask\\_type\\_null)
"""
function _transformer_encoder_layer_fwd(src::Tensor, embed_dim::Int64, num_heads::Int64, qkv_weight::Tensor, qkv_bias::Tensor, proj_weight::Tensor, proj_bias::Tensor, use_gelu::Int, norm_first::Int, eps::Float64, norm_weight_1::Tensor, norm_bias_1::Tensor, norm_weight_2::Tensor, norm_bias_2::Tensor, ffn_weight_1::Tensor, ffn_bias_1::Tensor, ffn_weight_2::Tensor, ffn_bias_2::Tensor, mask::Tensor, mask_type_v::Int64, mask_type_null::Int)

    __cret = ccall((:atg__transformer_encoder_layer_fwd, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 src.pointer, embed_dim, num_heads, qkv_weight.pointer, qkv_bias.pointer, proj_weight.pointer, proj_bias.pointer, use_gelu, norm_first, eps, norm_weight_1.pointer, norm_bias_1.pointer, norm_weight_2.pointer, norm_bias_2.pointer, ffn_weight_1.pointer, ffn_bias_1.pointer, ffn_weight_2.pointer, ffn_bias_2.pointer, mask.pointer, mask_type_v, mask_type_null)
    return tensor_from_ptr(__cret)
end


"""
    _transformer_encoder_layer_fwd_out(out::Tensor, src::Tensor, embed_dim::Int64, num_heads::Int64, qkv_weight::Tensor, qkv_bias::Tensor, proj_weight::Tensor, proj_bias::Tensor, use_gelu::Int, norm_first::Int, eps::Float64, norm_weight_1::Tensor, norm_bias_1::Tensor, norm_weight_2::Tensor, norm_bias_2::Tensor, ffn_weight_1::Tensor, ffn_bias_1::Tensor, ffn_weight_2::Tensor, ffn_bias_2::Tensor, mask::Tensor, mask_type_v::Int64, mask_type_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_transformer\\_encoder\\_layer\\_fwd\\_out(gc\\_tensor out, gc\\_tensor src, int64\\_t embed\\_dim, int64\\_t num\\_heads, gc\\_tensor qkv\\_weight, gc\\_tensor qkv\\_bias, gc\\_tensor proj\\_weight, gc\\_tensor proj\\_bias, int use\\_gelu, int norm\\_first, double eps, gc\\_tensor norm\\_weight\\_1, gc\\_tensor norm\\_bias\\_1, gc\\_tensor norm\\_weight\\_2, gc\\_tensor norm\\_bias\\_2, gc\\_tensor ffn\\_weight\\_1, gc\\_tensor ffn\\_bias\\_1, gc\\_tensor ffn\\_weight\\_2, gc\\_tensor ffn\\_bias\\_2, gc\\_tensor mask, int64\\_t mask\\_type\\_v, int mask\\_type\\_null)
"""
function _transformer_encoder_layer_fwd_out(out::Tensor, src::Tensor, embed_dim::Int64, num_heads::Int64, qkv_weight::Tensor, qkv_bias::Tensor, proj_weight::Tensor, proj_bias::Tensor, use_gelu::Int, norm_first::Int, eps::Float64, norm_weight_1::Tensor, norm_bias_1::Tensor, norm_weight_2::Tensor, norm_bias_2::Tensor, ffn_weight_1::Tensor, ffn_bias_1::Tensor, ffn_weight_2::Tensor, ffn_bias_2::Tensor, mask::Tensor, mask_type_v::Int64, mask_type_null::Int)

    __cret = ccall((:atg__transformer_encoder_layer_fwd_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, src.pointer, embed_dim, num_heads, qkv_weight.pointer, qkv_bias.pointer, proj_weight.pointer, proj_bias.pointer, use_gelu, norm_first, eps, norm_weight_1.pointer, norm_bias_1.pointer, norm_weight_2.pointer, norm_bias_2.pointer, ffn_weight_1.pointer, ffn_bias_1.pointer, ffn_weight_2.pointer, ffn_bias_2.pointer, mask.pointer, mask_type_v, mask_type_null)
    return tensor_from_ptr(__cret)
end


"""
    _trilinear(i1::Tensor, i2::Tensor, i3::Tensor, expand1_data::Array{Int64}, expand2_data::Array{Int64}, expand3_data::Array{Int64}, sumdim_data::Array{Int64}, unroll_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_trilinear(gc\\_tensor i1, gc\\_tensor i2, gc\\_tensor i3, int64\\_t *expand1\\_data, int expand1\\_len, int64\\_t *expand2\\_data, int expand2\\_len, int64\\_t *expand3\\_data, int expand3\\_len, int64\\_t *sumdim\\_data, int sumdim\\_len, int64\\_t unroll\\_dim)
"""
function _trilinear(i1::Tensor, i2::Tensor, i3::Tensor, expand1_data::Array{Int64}, expand2_data::Array{Int64}, expand3_data::Array{Int64}, sumdim_data::Array{Int64}, unroll_dim::Int64)
    expand1_len = length(expand1_data)
    expand2_len = length(expand2_data)
    expand3_len = length(expand3_data)
    sumdim_len = length(sumdim_data)
    __cret = ccall((:atg__trilinear, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 i1.pointer, i2.pointer, i3.pointer, expand1_data, expand1_len, expand2_data, expand2_len, expand3_data, expand3_len, sumdim_data, sumdim_len, unroll_dim)
    return tensor_from_ptr(__cret)
end


"""
    _trilinear_out(out::Tensor, i1::Tensor, i2::Tensor, i3::Tensor, expand1_data::Array{Int64}, expand2_data::Array{Int64}, expand3_data::Array{Int64}, sumdim_data::Array{Int64}, unroll_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_trilinear\\_out(gc\\_tensor out, gc\\_tensor i1, gc\\_tensor i2, gc\\_tensor i3, int64\\_t *expand1\\_data, int expand1\\_len, int64\\_t *expand2\\_data, int expand2\\_len, int64\\_t *expand3\\_data, int expand3\\_len, int64\\_t *sumdim\\_data, int sumdim\\_len, int64\\_t unroll\\_dim)
"""
function _trilinear_out(out::Tensor, i1::Tensor, i2::Tensor, i3::Tensor, expand1_data::Array{Int64}, expand2_data::Array{Int64}, expand3_data::Array{Int64}, sumdim_data::Array{Int64}, unroll_dim::Int64)
    expand1_len = length(expand1_data)
    expand2_len = length(expand2_data)
    expand3_len = length(expand3_data)
    sumdim_len = length(sumdim_data)
    __cret = ccall((:atg__trilinear_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, i1.pointer, i2.pointer, i3.pointer, expand1_data, expand1_len, expand2_data, expand2_len, expand3_data, expand3_len, sumdim_data, sumdim_len, unroll_dim)
    return tensor_from_ptr(__cret)
end


"""
    _triton_multi_head_attention(query::Tensor, key::Tensor, value::Tensor, embed_dim::Int64, num_head::Int64, qkv_weight::Tensor, qkv_bias::Tensor, proj_weight::Tensor, proj_bias::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_triton\\_multi\\_head\\_attention(gc\\_tensor query, gc\\_tensor key, gc\\_tensor value, int64\\_t embed\\_dim, int64\\_t num\\_head, gc\\_tensor qkv\\_weight, gc\\_tensor qkv\\_bias, gc\\_tensor proj\\_weight, gc\\_tensor proj\\_bias, gc\\_tensor mask)
"""
function _triton_multi_head_attention(query::Tensor, key::Tensor, value::Tensor, embed_dim::Int64, num_head::Int64, qkv_weight::Tensor, qkv_bias::Tensor, proj_weight::Tensor, proj_bias::Tensor, mask::Tensor)

    __cret = ccall((:atg__triton_multi_head_attention, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 query.pointer, key.pointer, value.pointer, embed_dim, num_head, qkv_weight.pointer, qkv_bias.pointer, proj_weight.pointer, proj_bias.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _triton_multi_head_attention_out(out::Tensor, query::Tensor, key::Tensor, value::Tensor, embed_dim::Int64, num_head::Int64, qkv_weight::Tensor, qkv_bias::Tensor, proj_weight::Tensor, proj_bias::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_triton\\_multi\\_head\\_attention\\_out(gc\\_tensor out, gc\\_tensor query, gc\\_tensor key, gc\\_tensor value, int64\\_t embed\\_dim, int64\\_t num\\_head, gc\\_tensor qkv\\_weight, gc\\_tensor qkv\\_bias, gc\\_tensor proj\\_weight, gc\\_tensor proj\\_bias, gc\\_tensor mask)
"""
function _triton_multi_head_attention_out(out::Tensor, query::Tensor, key::Tensor, value::Tensor, embed_dim::Int64, num_head::Int64, qkv_weight::Tensor, qkv_bias::Tensor, proj_weight::Tensor, proj_bias::Tensor, mask::Tensor)

    __cret = ccall((:atg__triton_multi_head_attention_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, query.pointer, key.pointer, value.pointer, embed_dim, num_head, qkv_weight.pointer, qkv_bias.pointer, proj_weight.pointer, proj_bias.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _triton_scaled_dot_attention(q::Tensor, k::Tensor, v::Tensor, dropout_p::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_triton\\_scaled\\_dot\\_attention(gc\\_tensor q, gc\\_tensor k, gc\\_tensor v, double dropout\\_p)
"""
function _triton_scaled_dot_attention(q::Tensor, k::Tensor, v::Tensor, dropout_p::Float64)

    __cret = ccall((:atg__triton_scaled_dot_attention, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 q.pointer, k.pointer, v.pointer, dropout_p)
    return tensor_from_ptr(__cret)
end


"""
    _triton_scaled_dot_attention_out(out::Tensor, q::Tensor, k::Tensor, v::Tensor, dropout_p::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_triton\\_scaled\\_dot\\_attention\\_out(gc\\_tensor out, gc\\_tensor q, gc\\_tensor k, gc\\_tensor v, double dropout\\_p)
"""
function _triton_scaled_dot_attention_out(out::Tensor, q::Tensor, k::Tensor, v::Tensor, dropout_p::Float64)

    __cret = ccall((:atg__triton_scaled_dot_attention_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 out.pointer, q.pointer, k.pointer, v.pointer, dropout_p)
    return tensor_from_ptr(__cret)
end
# _unique ignored

# _unique2 ignored

# _unique2_out ignored

# _unique_out ignored

# _unpack_dual ignored

# _unsafe_index ignored

# _unsafe_index_put ignored



"""
    _unsafe_view(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_unsafe\\_view(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function _unsafe_view(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__unsafe_view, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    _unsafe_view_out(out::Tensor, self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_\\_unsafe\\_view\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function _unsafe_view_out(out::Tensor, self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__unsafe_view_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_bicubic2d_aa(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_bicubic2d\\_aa(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_bicubic2d_aa(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_bicubic2d_aa, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_bicubic2d_aa_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_bicubic2d\\_aa\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_bicubic2d_aa_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_bicubic2d_aa_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_bicubic2d_aa_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_bicubic2d\\_aa\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_bicubic2d_aa_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_bicubic2d_aa_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_bicubic2d_aa_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_bicubic2d\\_aa\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_bicubic2d_aa_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_bicubic2d_aa_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# _upsample_bicubic2d_aa_vec ignored



"""
    _upsample_bilinear2d_aa(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_bilinear2d\\_aa(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_bilinear2d_aa(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_bilinear2d_aa, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_bilinear2d_aa_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_bilinear2d\\_aa\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_bilinear2d_aa_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_bilinear2d_aa_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_bilinear2d_aa_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_bilinear2d\\_aa\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_bilinear2d_aa_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_bilinear2d_aa_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_bilinear2d_aa_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_bilinear2d\\_aa\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_bilinear2d_aa_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_bilinear2d_aa_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# _upsample_bilinear2d_aa_vec ignored



"""
    _upsample_nearest_exact1d(self::Tensor, output_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact1d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_v, int scales\\_null)
"""
function _upsample_nearest_exact1d(self::Tensor, output_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_nearest_exact1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact1d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact1d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_v, int scales\\_null)
"""
function _upsample_nearest_exact1d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_nearest_exact1d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact1d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_v, int scales\\_null)
"""
function _upsample_nearest_exact1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_nearest_exact1d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact1d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact1d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_v, int scales\\_null)
"""
function _upsample_nearest_exact1d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_nearest_exact1d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end
# _upsample_nearest_exact1d_vec ignored



"""
    _upsample_nearest_exact2d(self::Tensor, output_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact2d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_nearest_exact2d(self::Tensor, output_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_nearest_exact2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact2d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact2d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_nearest_exact2d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_nearest_exact2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_nearest_exact2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_nearest_exact2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_nearest_exact2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_nearest_exact2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# _upsample_nearest_exact2d_vec ignored



"""
    _upsample_nearest_exact3d(self::Tensor, output_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact3d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_nearest_exact3d(self::Tensor, output_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_nearest_exact3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact3d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact3d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_nearest_exact3d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_nearest_exact3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact3d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_nearest_exact3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg__upsample_nearest_exact3d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    _upsample_nearest_exact3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_\\_upsample\\_nearest\\_exact3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function _upsample_nearest_exact3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg__upsample_nearest_exact3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# _upsample_nearest_exact3d_vec ignored



"""
    _use_cudnn_ctc_loss(log_probs::Tensor, targets::Tensor, input_lengths_data::Array{Int64}, target_lengths_data::Array{Int64}, blank::Int64)

 Wrapper of C++ function int atg\\_\\_use\\_cudnn\\_ctc\\_loss(gc\\_tensor log\\_probs, gc\\_tensor targets, int64\\_t *input\\_lengths\\_data, int input\\_lengths\\_len, int64\\_t *target\\_lengths\\_data, int target\\_lengths\\_len, int64\\_t blank)
"""
function _use_cudnn_ctc_loss(log_probs::Tensor, targets::Tensor, input_lengths_data::Array{Int64}, target_lengths_data::Array{Int64}, blank::Int64)
    input_lengths_len = length(input_lengths_data)
    target_lengths_len = length(target_lengths_data)
    __cret = ccall((:atg__use_cudnn_ctc_loss, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 log_probs.pointer, targets.pointer, input_lengths_data, input_lengths_len, target_lengths_data, target_lengths_len, blank)
    return __cret
end


"""
    _use_cudnn_ctc_loss_tensor(log_probs::Tensor, targets::Tensor, input_lengths::Tensor, target_lengths::Tensor, blank::Int64)

 Wrapper of C++ function int atg\\_\\_use\\_cudnn\\_ctc\\_loss\\_tensor(gc\\_tensor log\\_probs, gc\\_tensor targets, gc\\_tensor input\\_lengths, gc\\_tensor target\\_lengths, int64\\_t blank)
"""
function _use_cudnn_ctc_loss_tensor(log_probs::Tensor, targets::Tensor, input_lengths::Tensor, target_lengths::Tensor, blank::Int64)

    __cret = ccall((:atg__use_cudnn_ctc_loss_tensor, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 log_probs.pointer, targets.pointer, input_lengths.pointer, target_lengths.pointer, blank)
    return __cret
end


"""
    _validate_compressed_sparse_indices(is_crow::Int, compressed_idx::Tensor, plain_idx::Tensor, cdim::Int64, dim::Int64, nnz::Int64)

 Wrapper of C++ function void atg\\_\\_validate\\_compressed\\_sparse\\_indices(int is\\_crow, gc\\_tensor compressed\\_idx, gc\\_tensor plain\\_idx, int64\\_t cdim, int64\\_t dim, int64\\_t nnz)
"""
function _validate_compressed_sparse_indices(is_crow::Int, compressed_idx::Tensor, plain_idx::Tensor, cdim::Int64, dim::Int64, nnz::Int64)
    dim = dim - 1
    __cret = ccall((:atg__validate_compressed_sparse_indices, :libtorch_capi),
                 Cvoid, (Cint, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 is_crow, compressed_idx.pointer, plain_idx.pointer, cdim, dim, nnz)
    return __cret
end


"""
    _validate_sparse_bsc_tensor_args(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64})

 Wrapper of C++ function void atg\\_\\_validate\\_sparse\\_bsc\\_tensor\\_args(gc\\_tensor ccol\\_indices, gc\\_tensor row\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len)
"""
function _validate_sparse_bsc_tensor_args(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__validate_sparse_bsc_tensor_args, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 ccol_indices.pointer, row_indices.pointer, values.pointer, size_data, size_len)
    return __cret
end


"""
    _validate_sparse_bsr_tensor_args(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64})

 Wrapper of C++ function void atg\\_\\_validate\\_sparse\\_bsr\\_tensor\\_args(gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len)
"""
function _validate_sparse_bsr_tensor_args(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__validate_sparse_bsr_tensor_args, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 crow_indices.pointer, col_indices.pointer, values.pointer, size_data, size_len)
    return __cret
end


"""
    _validate_sparse_csc_tensor_args(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64})

 Wrapper of C++ function void atg\\_\\_validate\\_sparse\\_csc\\_tensor\\_args(gc\\_tensor ccol\\_indices, gc\\_tensor row\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len)
"""
function _validate_sparse_csc_tensor_args(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg__validate_sparse_csc_tensor_args, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 ccol_indices.pointer, row_indices.pointer, values.pointer, size_data, size_len)
    return __cret
end


"""
    _values(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_values(gc\\_tensor self)
"""
function _values(self::Tensor)

    __cret = ccall((:atg__values, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _values_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_values\\_copy(gc\\_tensor self)
"""
function _values_copy(self::Tensor)

    __cret = ccall((:atg__values_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _values_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_\\_values\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function _values_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg__values_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    _version(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_\\_version(gc\\_tensor self)
"""
function _version(self::Tensor)

    __cret = ccall((:atg__version, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    _weight_norm(v::Tensor, g::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_\\_weight\\_norm(gc\\_tensor v, gc\\_tensor g, int64\\_t dim)
"""
function _weight_norm(v::Tensor, g::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg__weight_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 v.pointer, g.pointer, dim)
    return tensor_from_ptr(__cret)
end
# _weight_norm_differentiable_backward ignored

# _weight_norm_interface ignored

# _weight_norm_interface_backward ignored

# _weight_norm_interface_backward_out ignored

# _weight_norm_interface_out ignored

import Base.abs


"""
    abs(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_abs(gc\\_tensor self)
"""
function abs(self::Tensor)

    __cret = ccall((:atg_abs, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    abs!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_abs\\_(gc\\_tensor self)
"""
function abs!(self::Tensor)

    __cret = ccall((:atg_abs_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    abs_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_abs\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function abs_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_abs_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    absolute(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_absolute(gc\\_tensor self)
"""
function absolute(self::Tensor)

    __cret = ccall((:atg_absolute, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    absolute!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_absolute\\_(gc\\_tensor self)
"""
function absolute!(self::Tensor)

    __cret = ccall((:atg_absolute_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    absolute_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_absolute\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function absolute_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_absolute_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.acos


"""
    acos(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_acos(gc\\_tensor self)
"""
function acos(self::Tensor)

    __cret = ccall((:atg_acos, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    acos!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_acos\\_(gc\\_tensor self)
"""
function acos!(self::Tensor)

    __cret = ccall((:atg_acos_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    acos_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_acos\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function acos_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_acos_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.acosh


"""
    acosh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_acosh(gc\\_tensor self)
"""
function acosh(self::Tensor)

    __cret = ccall((:atg_acosh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    acosh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_acosh\\_(gc\\_tensor self)
"""
function acosh!(self::Tensor)

    __cret = ccall((:atg_acosh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    acosh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_acosh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function acosh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_acosh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    adaptive_avg_pool1d(self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_avg\\_pool1d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function adaptive_avg_pool1d(self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_adaptive_avg_pool1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    adaptive_avg_pool2d(self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_avg\\_pool2d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function adaptive_avg_pool2d(self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_adaptive_avg_pool2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    adaptive_avg_pool2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_avg\\_pool2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function adaptive_avg_pool2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_adaptive_avg_pool2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    adaptive_avg_pool3d(self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_avg\\_pool3d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function adaptive_avg_pool3d(self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_adaptive_avg_pool3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    adaptive_avg_pool3d_backward(grad_input::Tensor, grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_avg\\_pool3d\\_backward(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function adaptive_avg_pool3d_backward(grad_input::Tensor, grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_adaptive_avg_pool3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    adaptive_avg_pool3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_avg\\_pool3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function adaptive_avg_pool3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_adaptive_avg_pool3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end
# adaptive_max_pool1d ignored

# adaptive_max_pool2d ignored



"""
    adaptive_max_pool2d_backward(grad_output::Tensor, self::Tensor, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_max\\_pool2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor indices)
"""
function adaptive_max_pool2d_backward(grad_output::Tensor, self::Tensor, indices::Tensor)

    __cret = ccall((:atg_adaptive_max_pool2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, indices.pointer)
    return tensor_from_ptr(__cret)
end


"""
    adaptive_max_pool2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_max\\_pool2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor indices)
"""
function adaptive_max_pool2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, indices::Tensor)

    __cret = ccall((:atg_adaptive_max_pool2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, indices.pointer)
    return tensor_from_ptr(__cret)
end
# adaptive_max_pool2d_out ignored

# adaptive_max_pool3d ignored



"""
    adaptive_max_pool3d_backward(grad_output::Tensor, self::Tensor, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_max\\_pool3d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor indices)
"""
function adaptive_max_pool3d_backward(grad_output::Tensor, self::Tensor, indices::Tensor)

    __cret = ccall((:atg_adaptive_max_pool3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, indices.pointer)
    return tensor_from_ptr(__cret)
end


"""
    adaptive_max_pool3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_adaptive\\_max\\_pool3d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor indices)
"""
function adaptive_max_pool3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, indices::Tensor)

    __cret = ccall((:atg_adaptive_max_pool3d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, indices.pointer)
    return tensor_from_ptr(__cret)
end
# adaptive_max_pool3d_out ignored



"""
    add(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_add(gc\\_tensor self, gc\\_tensor other)
"""
function add(self::Tensor, other::Tensor)

    __cret = ccall((:atg_add, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    add!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_add\\_(gc\\_tensor self, gc\\_tensor other)
"""
function add!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_add_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    add_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_add\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function add_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_add_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    add_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_add\\_scalar(gc\\_tensor self, scalar other)
"""
function add_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_add_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    add_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_add\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function add_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_add_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    add_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_add\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function add_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_add_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addbmm(self::Tensor, batch1::Tensor, batch2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addbmm(gc\\_tensor self, gc\\_tensor batch1, gc\\_tensor batch2)
"""
function addbmm(self::Tensor, batch1::Tensor, batch2::Tensor)

    __cret = ccall((:atg_addbmm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, batch1.pointer, batch2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addbmm!(self::Tensor, batch1::Tensor, batch2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addbmm\\_(gc\\_tensor self, gc\\_tensor batch1, gc\\_tensor batch2)
"""
function addbmm!(self::Tensor, batch1::Tensor, batch2::Tensor)

    __cret = ccall((:atg_addbmm_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, batch1.pointer, batch2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addbmm_out(out::Tensor, self::Tensor, batch1::Tensor, batch2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addbmm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor batch1, gc\\_tensor batch2)
"""
function addbmm_out(out::Tensor, self::Tensor, batch1::Tensor, batch2::Tensor)

    __cret = ccall((:atg_addbmm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, batch1.pointer, batch2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addcdiv(self::Tensor, tensor1::Tensor, tensor2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addcdiv(gc\\_tensor self, gc\\_tensor tensor1, gc\\_tensor tensor2)
"""
function addcdiv(self::Tensor, tensor1::Tensor, tensor2::Tensor)

    __cret = ccall((:atg_addcdiv, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, tensor1.pointer, tensor2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addcdiv!(self::Tensor, tensor1::Tensor, tensor2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addcdiv\\_(gc\\_tensor self, gc\\_tensor tensor1, gc\\_tensor tensor2)
"""
function addcdiv!(self::Tensor, tensor1::Tensor, tensor2::Tensor)

    __cret = ccall((:atg_addcdiv_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, tensor1.pointer, tensor2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addcdiv_out(out::Tensor, self::Tensor, tensor1::Tensor, tensor2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addcdiv\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor tensor1, gc\\_tensor tensor2)
"""
function addcdiv_out(out::Tensor, self::Tensor, tensor1::Tensor, tensor2::Tensor)

    __cret = ccall((:atg_addcdiv_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, tensor1.pointer, tensor2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addcmul(self::Tensor, tensor1::Tensor, tensor2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addcmul(gc\\_tensor self, gc\\_tensor tensor1, gc\\_tensor tensor2)
"""
function addcmul(self::Tensor, tensor1::Tensor, tensor2::Tensor)

    __cret = ccall((:atg_addcmul, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, tensor1.pointer, tensor2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addcmul!(self::Tensor, tensor1::Tensor, tensor2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addcmul\\_(gc\\_tensor self, gc\\_tensor tensor1, gc\\_tensor tensor2)
"""
function addcmul!(self::Tensor, tensor1::Tensor, tensor2::Tensor)

    __cret = ccall((:atg_addcmul_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, tensor1.pointer, tensor2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addcmul_out(out::Tensor, self::Tensor, tensor1::Tensor, tensor2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addcmul\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor tensor1, gc\\_tensor tensor2)
"""
function addcmul_out(out::Tensor, self::Tensor, tensor1::Tensor, tensor2::Tensor)

    __cret = ccall((:atg_addcmul_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, tensor1.pointer, tensor2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addmm(self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addmm(gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function addmm(self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_addmm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addmm!(self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addmm\\_(gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function addmm!(self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_addmm_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addmm_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addmm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function addmm_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_addmm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addmv(self::Tensor, mat::Tensor, vec::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addmv(gc\\_tensor self, gc\\_tensor mat, gc\\_tensor vec)
"""
function addmv(self::Tensor, mat::Tensor, vec::Tensor)

    __cret = ccall((:atg_addmv, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat.pointer, vec.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addmv!(self::Tensor, mat::Tensor, vec::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addmv\\_(gc\\_tensor self, gc\\_tensor mat, gc\\_tensor vec)
"""
function addmv!(self::Tensor, mat::Tensor, vec::Tensor)

    __cret = ccall((:atg_addmv_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat.pointer, vec.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addmv_out(out::Tensor, self::Tensor, mat::Tensor, vec::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addmv\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat, gc\\_tensor vec)
"""
function addmv_out(out::Tensor, self::Tensor, mat::Tensor, vec::Tensor)

    __cret = ccall((:atg_addmv_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mat.pointer, vec.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addr(self::Tensor, vec1::Tensor, vec2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addr(gc\\_tensor self, gc\\_tensor vec1, gc\\_tensor vec2)
"""
function addr(self::Tensor, vec1::Tensor, vec2::Tensor)

    __cret = ccall((:atg_addr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, vec1.pointer, vec2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addr!(self::Tensor, vec1::Tensor, vec2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addr\\_(gc\\_tensor self, gc\\_tensor vec1, gc\\_tensor vec2)
"""
function addr!(self::Tensor, vec1::Tensor, vec2::Tensor)

    __cret = ccall((:atg_addr_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, vec1.pointer, vec2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    addr_out(out::Tensor, self::Tensor, vec1::Tensor, vec2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_addr\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor vec1, gc\\_tensor vec2)
"""
function addr_out(out::Tensor, self::Tensor, vec1::Tensor, vec2::Tensor)

    __cret = ccall((:atg_addr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, vec1.pointer, vec2.pointer)
    return tensor_from_ptr(__cret)
end
import Base.adjoint


"""
    adjoint(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_adjoint(gc\\_tensor self)
"""
function adjoint(self::Tensor)

    __cret = ccall((:atg_adjoint, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    affine_grid_generator(theta::Tensor, size_data::Array{Int64}, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_affine\\_grid\\_generator(gc\\_tensor theta, int64\\_t *size\\_data, int size\\_len, int align\\_corners)
"""
function affine_grid_generator(theta::Tensor, size_data::Array{Int64}, align_corners::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_affine_grid_generator, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 theta.pointer, size_data, size_len, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    affine_grid_generator_backward(grad::Tensor, size_data::Array{Int64}, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_affine\\_grid\\_generator\\_backward(gc\\_tensor grad, int64\\_t *size\\_data, int size\\_len, int align\\_corners)
"""
function affine_grid_generator_backward(grad::Tensor, size_data::Array{Int64}, align_corners::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_affine_grid_generator_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 grad.pointer, size_data, size_len, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    affine_grid_generator_out(out::Tensor, theta::Tensor, size_data::Array{Int64}, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_affine\\_grid\\_generator\\_out(gc\\_tensor out, gc\\_tensor theta, int64\\_t *size\\_data, int size\\_len, int align\\_corners)
"""
function affine_grid_generator_out(out::Tensor, theta::Tensor, size_data::Array{Int64}, align_corners::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_affine_grid_generator_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, theta.pointer, size_data, size_len, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    alias(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_alias(gc\\_tensor self)
"""
function alias(self::Tensor)

    __cret = ccall((:atg_alias, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    alias_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_alias\\_copy(gc\\_tensor self)
"""
function alias_copy(self::Tensor)

    __cret = ccall((:atg_alias_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    alias_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_alias\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function alias_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_alias_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    align_as(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_align\\_as(gc\\_tensor self, gc\\_tensor other)
"""
function align_as(self::Tensor, other::Tensor)

    __cret = ccall((:atg_align_as, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
# align_tensors ignored

import Base.all


"""
    all(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_all(gc\\_tensor self)
"""
function all(self::Tensor)

    __cret = ccall((:atg_all, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    all_all_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_all\\_all\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function all_all_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_all_all_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    all_dim(self::Tensor, dim::Int64, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_all\\_dim(gc\\_tensor self, int64\\_t dim, int keepdim)
"""
function all_dim(self::Tensor, dim::Int64, keepdim::Int)
    dim = dim - 1
    __cret = ccall((:atg_all_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    all_out(out::Tensor, self::Tensor, dim::Int64, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_all\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int keepdim)
"""
function all_out(out::Tensor, self::Tensor, dim::Int64, keepdim::Int)
    dim = dim - 1
    __cret = ccall((:atg_all_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    allclose(self::Tensor, other::Tensor, rtol::Float64, atol::Float64, equal_nan::Int)

 Wrapper of C++ function int atg\\_allclose(gc\\_tensor self, gc\\_tensor other, double rtol, double atol, int equal\\_nan)
"""
function allclose(self::Tensor, other::Tensor, rtol::Float64, atol::Float64, equal_nan::Int)

    __cret = ccall((:atg_allclose, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble, Cint),
                 self.pointer, other.pointer, rtol, atol, equal_nan)
    return __cret
end


"""
    alpha_dropout(input::Tensor, p::Float64, train::Int)

 Wrapper of C++ function raw\\_tensor atg\\_alpha\\_dropout(gc\\_tensor input, double p, int train)
"""
function alpha_dropout(input::Tensor, p::Float64, train::Int)

    __cret = ccall((:atg_alpha_dropout, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 input.pointer, p, train)
    return tensor_from_ptr(__cret)
end


"""
    alpha_dropout!(self::Tensor, p::Float64, train::Int)

 Wrapper of C++ function raw\\_tensor atg\\_alpha\\_dropout\\_(gc\\_tensor self, double p, int train)
"""
function alpha_dropout!(self::Tensor, p::Float64, train::Int)

    __cret = ccall((:atg_alpha_dropout_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, p, train)
    return tensor_from_ptr(__cret)
end


"""
    amax(self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_amax(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function amax(self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_amax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    amax_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_amax\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function amax_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_amax_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    amin(self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_amin(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function amin(self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_amin, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    amin_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_amin\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function amin_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_amin_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end
# aminmax ignored

# aminmax_out ignored

import Base.angle


"""
    angle(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_angle(gc\\_tensor self)
"""
function angle(self::Tensor)

    __cret = ccall((:atg_angle, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    angle_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_angle\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function angle_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_angle_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.any


"""
    any(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_any(gc\\_tensor self)
"""
function any(self::Tensor)

    __cret = ccall((:atg_any, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    any_all_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_any\\_all\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function any_all_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_any_all_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    any_dim(self::Tensor, dim::Int64, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_any\\_dim(gc\\_tensor self, int64\\_t dim, int keepdim)
"""
function any_dim(self::Tensor, dim::Int64, keepdim::Int)
    dim = dim - 1
    __cret = ccall((:atg_any_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    any_out(out::Tensor, self::Tensor, dim::Int64, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_any\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int keepdim)
"""
function any_out(out::Tensor, self::Tensor, dim::Int64, keepdim::Int)
    dim = dim - 1
    __cret = ccall((:atg_any_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    arange(end_::TorchNumber, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_arange(scalar end, int options\\_kind, int options\\_device)
"""
function arange(end_::TorchNumber, options_kind::Int, options_device::Int)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_arange, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint),
                 end__s_.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    arange_start(start::TorchNumber, end_::TorchNumber, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_arange\\_start(scalar start, scalar end, int options\\_kind, int options\\_device)
"""
function arange_start(start::TorchNumber, end_::TorchNumber, options_kind::Int, options_device::Int)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_arange_start, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 start_s_.pointer, end__s_.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    arange_start_step(start::TorchNumber, end_::TorchNumber, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_arange\\_start\\_step(scalar start, scalar end, int options\\_kind, int options\\_device)
"""
function arange_start_step(start::TorchNumber, end_::TorchNumber, options_kind::Int, options_device::Int)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_arange_start_step, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 start_s_.pointer, end__s_.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    arccos(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arccos(gc\\_tensor self)
"""
function arccos(self::Tensor)

    __cret = ccall((:atg_arccos, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arccos!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arccos\\_(gc\\_tensor self)
"""
function arccos!(self::Tensor)

    __cret = ccall((:atg_arccos_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arccos_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arccos\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function arccos_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_arccos_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arccosh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arccosh(gc\\_tensor self)
"""
function arccosh(self::Tensor)

    __cret = ccall((:atg_arccosh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arccosh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arccosh\\_(gc\\_tensor self)
"""
function arccosh!(self::Tensor)

    __cret = ccall((:atg_arccosh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arccosh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arccosh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function arccosh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_arccosh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arcsin(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arcsin(gc\\_tensor self)
"""
function arcsin(self::Tensor)

    __cret = ccall((:atg_arcsin, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arcsin!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arcsin\\_(gc\\_tensor self)
"""
function arcsin!(self::Tensor)

    __cret = ccall((:atg_arcsin_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arcsin_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arcsin\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function arcsin_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_arcsin_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arcsinh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arcsinh(gc\\_tensor self)
"""
function arcsinh(self::Tensor)

    __cret = ccall((:atg_arcsinh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arcsinh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arcsinh\\_(gc\\_tensor self)
"""
function arcsinh!(self::Tensor)

    __cret = ccall((:atg_arcsinh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arcsinh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arcsinh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function arcsinh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_arcsinh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctan(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctan(gc\\_tensor self)
"""
function arctan(self::Tensor)

    __cret = ccall((:atg_arctan, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctan2(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctan2(gc\\_tensor self, gc\\_tensor other)
"""
function arctan2(self::Tensor, other::Tensor)

    __cret = ccall((:atg_arctan2, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctan2!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctan2\\_(gc\\_tensor self, gc\\_tensor other)
"""
function arctan2!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_arctan2_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctan2_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctan2\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function arctan2_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_arctan2_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctan!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctan\\_(gc\\_tensor self)
"""
function arctan!(self::Tensor)

    __cret = ccall((:atg_arctan_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctan_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctan\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function arctan_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_arctan_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctanh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctanh(gc\\_tensor self)
"""
function arctanh(self::Tensor)

    __cret = ccall((:atg_arctanh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctanh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctanh\\_(gc\\_tensor self)
"""
function arctanh!(self::Tensor)

    __cret = ccall((:atg_arctanh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    arctanh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_arctanh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function arctanh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_arctanh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.argmax


"""
    argmax(self::Tensor, dim_v::Int64, dim_null::Int, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_argmax(gc\\_tensor self, int64\\_t dim\\_v, int dim\\_null, int keepdim)
"""
function argmax(self::Tensor, dim_v::Int64, dim_null::Int, keepdim::Int)

    __cret = ccall((:atg_argmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Cint),
                 self.pointer, dim_v, dim_null, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    argmax_out(out::Tensor, self::Tensor, dim_v::Int64, dim_null::Int, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_argmax\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim\\_v, int dim\\_null, int keepdim)
"""
function argmax_out(out::Tensor, self::Tensor, dim_v::Int64, dim_null::Int, keepdim::Int)

    __cret = ccall((:atg_argmax_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Cint),
                 out.pointer, self.pointer, dim_v, dim_null, keepdim)
    return tensor_from_ptr(__cret)
end
import Base.argmin


"""
    argmin(self::Tensor, dim_v::Int64, dim_null::Int, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_argmin(gc\\_tensor self, int64\\_t dim\\_v, int dim\\_null, int keepdim)
"""
function argmin(self::Tensor, dim_v::Int64, dim_null::Int, keepdim::Int)

    __cret = ccall((:atg_argmin, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Cint),
                 self.pointer, dim_v, dim_null, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    argmin_out(out::Tensor, self::Tensor, dim_v::Int64, dim_null::Int, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_argmin\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim\\_v, int dim\\_null, int keepdim)
"""
function argmin_out(out::Tensor, self::Tensor, dim_v::Int64, dim_null::Int, keepdim::Int)

    __cret = ccall((:atg_argmin_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Cint),
                 out.pointer, self.pointer, dim_v, dim_null, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    argsort(self::Tensor, dim::Int64, descending::Int)

 Wrapper of C++ function raw\\_tensor atg\\_argsort(gc\\_tensor self, int64\\_t dim, int descending)
"""
function argsort(self::Tensor, dim::Int64, descending::Int)
    dim = dim - 1
    __cret = ccall((:atg_argsort, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, descending)
    return tensor_from_ptr(__cret)
end


"""
    argsort_stable(self::Tensor, stable::Int, dim::Int64, descending::Int)

 Wrapper of C++ function raw\\_tensor atg\\_argsort\\_stable(gc\\_tensor self, int stable, int64\\_t dim, int descending)
"""
function argsort_stable(self::Tensor, stable::Int, dim::Int64, descending::Int)
    dim = dim - 1
    __cret = ccall((:atg_argsort_stable, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, stable, dim, descending)
    return tensor_from_ptr(__cret)
end


"""
    argsort_stable_out(out::Tensor, self::Tensor, stable::Int, dim::Int64, descending::Int)

 Wrapper of C++ function raw\\_tensor atg\\_argsort\\_stable\\_out(gc\\_tensor out, gc\\_tensor self, int stable, int64\\_t dim, int descending)
"""
function argsort_stable_out(out::Tensor, self::Tensor, stable::Int, dim::Int64, descending::Int)
    dim = dim - 1
    __cret = ccall((:atg_argsort_stable_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, stable, dim, descending)
    return tensor_from_ptr(__cret)
end


"""
    argwhere(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_argwhere(gc\\_tensor self)
"""
function argwhere(self::Tensor)

    __cret = ccall((:atg_argwhere, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    as_strided(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_as\\_strided(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t storage\\_offset\\_v, int storage\\_offset\\_null)
"""
function as_strided(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_as_strided, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, size_data, size_len, stride_data, stride_len, storage_offset_v, storage_offset_null)
    return tensor_from_ptr(__cret)
end


"""
    as_strided!(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_as\\_strided\\_(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t storage\\_offset\\_v, int storage\\_offset\\_null)
"""
function as_strided!(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_as_strided_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, size_data, size_len, stride_data, stride_len, storage_offset_v, storage_offset_null)
    return tensor_from_ptr(__cret)
end


"""
    as_strided_copy(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_as\\_strided\\_copy(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t storage\\_offset\\_v, int storage\\_offset\\_null)
"""
function as_strided_copy(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_as_strided_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, size_data, size_len, stride_data, stride_len, storage_offset_v, storage_offset_null)
    return tensor_from_ptr(__cret)
end


"""
    as_strided_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_as\\_strided\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t storage\\_offset\\_v, int storage\\_offset\\_null)
"""
function as_strided_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_as_strided_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, size_data, size_len, stride_data, stride_len, storage_offset_v, storage_offset_null)
    return tensor_from_ptr(__cret)
end


"""
    as_strided_scatter(self::Tensor, src::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_as\\_strided\\_scatter(gc\\_tensor self, gc\\_tensor src, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t storage\\_offset\\_v, int storage\\_offset\\_null)
"""
function as_strided_scatter(self::Tensor, src::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_as_strided_scatter, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 self.pointer, src.pointer, size_data, size_len, stride_data, stride_len, storage_offset_v, storage_offset_null)
    return tensor_from_ptr(__cret)
end


"""
    as_strided_scatter_out(out::Tensor, self::Tensor, src::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_as\\_strided\\_scatter\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor src, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t storage\\_offset\\_v, int storage\\_offset\\_null)
"""
function as_strided_scatter_out(out::Tensor, self::Tensor, src::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, storage_offset_v::Int64, storage_offset_null::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_as_strided_scatter_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, src.pointer, size_data, size_len, stride_data, stride_len, storage_offset_v, storage_offset_null)
    return tensor_from_ptr(__cret)
end
import Base.asin


"""
    asin(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_asin(gc\\_tensor self)
"""
function asin(self::Tensor)

    __cret = ccall((:atg_asin, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    asin!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_asin\\_(gc\\_tensor self)
"""
function asin!(self::Tensor)

    __cret = ccall((:atg_asin_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    asin_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_asin\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function asin_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_asin_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.asinh


"""
    asinh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_asinh(gc\\_tensor self)
"""
function asinh(self::Tensor)

    __cret = ccall((:atg_asinh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    asinh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_asinh\\_(gc\\_tensor self)
"""
function asinh!(self::Tensor)

    __cret = ccall((:atg_asinh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    asinh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_asinh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function asinh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_asinh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.atan


"""
    atan(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atan(gc\\_tensor self)
"""
function atan(self::Tensor)

    __cret = ccall((:atg_atan, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    atan2(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atan2(gc\\_tensor self, gc\\_tensor other)
"""
function atan2(self::Tensor, other::Tensor)

    __cret = ccall((:atg_atan2, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    atan2!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atan2\\_(gc\\_tensor self, gc\\_tensor other)
"""
function atan2!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_atan2_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    atan2_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atan2\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function atan2_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_atan2_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    atan!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atan\\_(gc\\_tensor self)
"""
function atan!(self::Tensor)

    __cret = ccall((:atg_atan_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    atan_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atan\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function atan_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_atan_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.atanh


"""
    atanh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atanh(gc\\_tensor self)
"""
function atanh(self::Tensor)

    __cret = ccall((:atg_atanh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    atanh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atanh\\_(gc\\_tensor self)
"""
function atanh!(self::Tensor)

    __cret = ccall((:atg_atanh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    atanh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atanh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function atanh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_atanh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    atleast_1d(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atleast\\_1d(gc\\_tensor self)
"""
function atleast_1d(self::Tensor)

    __cret = ccall((:atg_atleast_1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# atleast_1d_sequence ignored



"""
    atleast_2d(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atleast\\_2d(gc\\_tensor self)
"""
function atleast_2d(self::Tensor)

    __cret = ccall((:atg_atleast_2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# atleast_2d_sequence ignored



"""
    atleast_3d(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_atleast\\_3d(gc\\_tensor self)
"""
function atleast_3d(self::Tensor)

    __cret = ccall((:atg_atleast_3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# atleast_3d_sequence ignored



"""
    avg_pool1d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool1d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad)
"""
function avg_pool1d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad)
    return tensor_from_ptr(__cret)
end


"""
    avg_pool2d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool2d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad, int64\\_t divisor\\_override\\_v, int divisor\\_override\\_null)
"""
function avg_pool2d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad, divisor_override_v, divisor_override_null)
    return tensor_from_ptr(__cret)
end


"""
    avg_pool2d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad, int64\\_t divisor\\_override\\_v, int divisor\\_override\\_null)
"""
function avg_pool2d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint),
                 grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad, divisor_override_v, divisor_override_null)
    return tensor_from_ptr(__cret)
end


"""
    avg_pool2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad, int64\\_t divisor\\_override\\_v, int divisor\\_override\\_null)
"""
function avg_pool2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad, divisor_override_v, divisor_override_null)
    return tensor_from_ptr(__cret)
end


"""
    avg_pool2d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad, int64\\_t divisor\\_override\\_v, int divisor\\_override\\_null)
"""
function avg_pool2d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad, divisor_override_v, divisor_override_null)
    return tensor_from_ptr(__cret)
end


"""
    avg_pool3d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool3d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad, int64\\_t divisor\\_override\\_v, int divisor\\_override\\_null)
"""
function avg_pool3d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad, divisor_override_v, divisor_override_null)
    return tensor_from_ptr(__cret)
end


"""
    avg_pool3d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool3d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad, int64\\_t divisor\\_override\\_v, int divisor\\_override\\_null)
"""
function avg_pool3d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint),
                 grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad, divisor_override_v, divisor_override_null)
    return tensor_from_ptr(__cret)
end


"""
    avg_pool3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool3d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad, int64\\_t divisor\\_override\\_v, int divisor\\_override\\_null)
"""
function avg_pool3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool3d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad, divisor_override_v, divisor_override_null)
    return tensor_from_ptr(__cret)
end


"""
    avg_pool3d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_avg\\_pool3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int ceil\\_mode, int count\\_include\\_pad, int64\\_t divisor\\_override\\_v, int divisor\\_override\\_null)
"""
function avg_pool3d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, ceil_mode::Int, count_include_pad::Int, divisor_override_v::Int64, divisor_override_null::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_avg_pool3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint),
                 out.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, ceil_mode, count_include_pad, divisor_override_v, divisor_override_null)
    return tensor_from_ptr(__cret)
end


"""
    baddbmm(self::Tensor, batch1::Tensor, batch2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_baddbmm(gc\\_tensor self, gc\\_tensor batch1, gc\\_tensor batch2)
"""
function baddbmm(self::Tensor, batch1::Tensor, batch2::Tensor)

    __cret = ccall((:atg_baddbmm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, batch1.pointer, batch2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    baddbmm!(self::Tensor, batch1::Tensor, batch2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_baddbmm\\_(gc\\_tensor self, gc\\_tensor batch1, gc\\_tensor batch2)
"""
function baddbmm!(self::Tensor, batch1::Tensor, batch2::Tensor)

    __cret = ccall((:atg_baddbmm_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, batch1.pointer, batch2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    baddbmm_out(out::Tensor, self::Tensor, batch1::Tensor, batch2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_baddbmm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor batch1, gc\\_tensor batch2)
"""
function baddbmm_out(out::Tensor, self::Tensor, batch1::Tensor, batch2::Tensor)

    __cret = ccall((:atg_baddbmm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, batch1.pointer, batch2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bartlett_window(window_length::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_bartlett\\_window(int64\\_t window\\_length, int options\\_kind, int options\\_device)
"""
function bartlett_window(window_length::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_bartlett_window, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint),
                 window_length, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    bartlett_window_out(out::Tensor, window_length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_bartlett\\_window\\_out(gc\\_tensor out, int64\\_t window\\_length)
"""
function bartlett_window_out(out::Tensor, window_length::Int64)

    __cret = ccall((:atg_bartlett_window_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 out.pointer, window_length)
    return tensor_from_ptr(__cret)
end


"""
    bartlett_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_bartlett\\_window\\_periodic(int64\\_t window\\_length, int periodic, int options\\_kind, int options\\_device)
"""
function bartlett_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_bartlett_window_periodic, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint, Cint),
                 window_length, periodic, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    bartlett_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_bartlett\\_window\\_periodic\\_out(gc\\_tensor out, int64\\_t window\\_length, int periodic)
"""
function bartlett_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

    __cret = ccall((:atg_bartlett_window_periodic_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, window_length, periodic)
    return tensor_from_ptr(__cret)
end


"""
    batch_norm(input::Tensor, weight::Tensor, bias::Tensor, running_mean::Tensor, running_var::Tensor, training::Int, momentum::Float64, eps::Float64, cudnn_enabled::Int)

 Wrapper of C++ function raw\\_tensor atg\\_batch\\_norm(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, gc\\_tensor running\\_mean, gc\\_tensor running\\_var, int training, double momentum, double eps, int cudnn\\_enabled)
"""
function batch_norm(input::Tensor, weight::Tensor, bias::Tensor, running_mean::Tensor, running_var::Tensor, training::Int, momentum::Float64, eps::Float64, cudnn_enabled::Int)

    __cret = ccall((:atg_batch_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cdouble, Cint),
                 input.pointer, weight.pointer, bias.pointer, running_mean.pointer, running_var.pointer, training, momentum, eps, cudnn_enabled)
    return tensor_from_ptr(__cret)
end


"""
    batch_norm_backward_elemt(grad_out::Tensor, input::Tensor, mean::Tensor, invstd::Tensor, weight::Tensor, sum_dy::Tensor, sum_dy_xmu::Tensor, count::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_batch\\_norm\\_backward\\_elemt(gc\\_tensor grad\\_out, gc\\_tensor input, gc\\_tensor mean, gc\\_tensor invstd, gc\\_tensor weight, gc\\_tensor sum\\_dy, gc\\_tensor sum\\_dy\\_xmu, gc\\_tensor count)
"""
function batch_norm_backward_elemt(grad_out::Tensor, input::Tensor, mean::Tensor, invstd::Tensor, weight::Tensor, sum_dy::Tensor, sum_dy_xmu::Tensor, count::Tensor)

    __cret = ccall((:atg_batch_norm_backward_elemt, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_out.pointer, input.pointer, mean.pointer, invstd.pointer, weight.pointer, sum_dy.pointer, sum_dy_xmu.pointer, count.pointer)
    return tensor_from_ptr(__cret)
end


"""
    batch_norm_backward_elemt_out(out::Tensor, grad_out::Tensor, input::Tensor, mean::Tensor, invstd::Tensor, weight::Tensor, sum_dy::Tensor, sum_dy_xmu::Tensor, count::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_batch\\_norm\\_backward\\_elemt\\_out(gc\\_tensor out, gc\\_tensor grad\\_out, gc\\_tensor input, gc\\_tensor mean, gc\\_tensor invstd, gc\\_tensor weight, gc\\_tensor sum\\_dy, gc\\_tensor sum\\_dy\\_xmu, gc\\_tensor count)
"""
function batch_norm_backward_elemt_out(out::Tensor, grad_out::Tensor, input::Tensor, mean::Tensor, invstd::Tensor, weight::Tensor, sum_dy::Tensor, sum_dy_xmu::Tensor, count::Tensor)

    __cret = ccall((:atg_batch_norm_backward_elemt_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, grad_out.pointer, input.pointer, mean.pointer, invstd.pointer, weight.pointer, sum_dy.pointer, sum_dy_xmu.pointer, count.pointer)
    return tensor_from_ptr(__cret)
end
# batch_norm_backward_reduce ignored

# batch_norm_backward_reduce_out ignored



"""
    batch_norm_elemt(input::Tensor, weight::Tensor, bias::Tensor, mean::Tensor, invstd::Tensor, eps::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_batch\\_norm\\_elemt(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, gc\\_tensor mean, gc\\_tensor invstd, double eps)
"""
function batch_norm_elemt(input::Tensor, weight::Tensor, bias::Tensor, mean::Tensor, invstd::Tensor, eps::Float64)

    __cret = ccall((:atg_batch_norm_elemt, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 input.pointer, weight.pointer, bias.pointer, mean.pointer, invstd.pointer, eps)
    return tensor_from_ptr(__cret)
end


"""
    batch_norm_elemt_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, mean::Tensor, invstd::Tensor, eps::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_batch\\_norm\\_elemt\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, gc\\_tensor mean, gc\\_tensor invstd, double eps)
"""
function batch_norm_elemt_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, mean::Tensor, invstd::Tensor, eps::Float64)

    __cret = ccall((:atg_batch_norm_elemt_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 out.pointer, input.pointer, weight.pointer, bias.pointer, mean.pointer, invstd.pointer, eps)
    return tensor_from_ptr(__cret)
end
# batch_norm_gather_stats ignored

# batch_norm_gather_stats_out ignored

# batch_norm_gather_stats_with_counts ignored

# batch_norm_gather_stats_with_counts_out ignored

# batch_norm_stats ignored

# batch_norm_stats_out ignored

# batch_norm_update_stats ignored

# batch_norm_update_stats_out ignored



"""
    bernoulli(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bernoulli(gc\\_tensor self)
"""
function bernoulli(self::Tensor)

    __cret = ccall((:atg_bernoulli, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bernoulli!(self::Tensor, p::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bernoulli\\_(gc\\_tensor self, gc\\_tensor p)
"""
function bernoulli!(self::Tensor, p::Tensor)

    __cret = ccall((:atg_bernoulli_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, p.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bernoulli_float!(self::Tensor, p::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_bernoulli\\_float\\_(gc\\_tensor self, double p)
"""
function bernoulli_float!(self::Tensor, p::Float64)

    __cret = ccall((:atg_bernoulli_float_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble),
                 self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    bernoulli_p(self::Tensor, p::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_bernoulli\\_p(gc\\_tensor self, double p)
"""
function bernoulli_p(self::Tensor, p::Float64)

    __cret = ccall((:atg_bernoulli_p, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble),
                 self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    bernoulli_tensor(self::Tensor, p::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bernoulli\\_tensor(gc\\_tensor self, gc\\_tensor p)
"""
function bernoulli_tensor(self::Tensor, p::Tensor)

    __cret = ccall((:atg_bernoulli_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, p.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bilinear(input1::Tensor, input2::Tensor, weight::Tensor, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bilinear(gc\\_tensor input1, gc\\_tensor input2, gc\\_tensor weight, gc\\_tensor bias)
"""
function bilinear(input1::Tensor, input2::Tensor, weight::Tensor, bias::Tensor)

    __cret = ccall((:atg_bilinear, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input1.pointer, input2.pointer, weight.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    binary_cross_entropy(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_binary\\_cross\\_entropy(gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction)
"""
function binary_cross_entropy(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64)

    __cret = ccall((:atg_binary_cross_entropy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, target.pointer, weight.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    binary_cross_entropy_backward(grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_binary\\_cross\\_entropy\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction)
"""
function binary_cross_entropy_backward(grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64)

    __cret = ccall((:atg_binary_cross_entropy_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_output.pointer, self.pointer, target.pointer, weight.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    binary_cross_entropy_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_binary\\_cross\\_entropy\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction)
"""
function binary_cross_entropy_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64)

    __cret = ccall((:atg_binary_cross_entropy_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, weight.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    binary_cross_entropy_out(out::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_binary\\_cross\\_entropy\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction)
"""
function binary_cross_entropy_out(out::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64)

    __cret = ccall((:atg_binary_cross_entropy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, target.pointer, weight.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    binary_cross_entropy_with_logits(self::Tensor, target::Tensor, weight::Tensor, pos_weight::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_binary\\_cross\\_entropy\\_with\\_logits(gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, gc\\_tensor pos\\_weight, int64\\_t reduction)
"""
function binary_cross_entropy_with_logits(self::Tensor, target::Tensor, weight::Tensor, pos_weight::Tensor, reduction::Int64)

    __cret = ccall((:atg_binary_cross_entropy_with_logits, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, target.pointer, weight.pointer, pos_weight.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    binary_cross_entropy_with_logits_out(out::Tensor, self::Tensor, target::Tensor, weight::Tensor, pos_weight::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_binary\\_cross\\_entropy\\_with\\_logits\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, gc\\_tensor pos\\_weight, int64\\_t reduction)
"""
function binary_cross_entropy_with_logits_out(out::Tensor, self::Tensor, target::Tensor, weight::Tensor, pos_weight::Tensor, reduction::Int64)

    __cret = ccall((:atg_binary_cross_entropy_with_logits_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, target.pointer, weight.pointer, pos_weight.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    bincount(self::Tensor, weights::Tensor, minlength::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_bincount(gc\\_tensor self, gc\\_tensor weights, int64\\_t minlength)
"""
function bincount(self::Tensor, weights::Tensor, minlength::Int64)

    __cret = ccall((:atg_bincount, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, weights.pointer, minlength)
    return tensor_from_ptr(__cret)
end


"""
    bincount_out(out::Tensor, self::Tensor, weights::Tensor, minlength::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_bincount\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weights, int64\\_t minlength)
"""
function bincount_out(out::Tensor, self::Tensor, weights::Tensor, minlength::Int64)

    __cret = ccall((:atg_bincount_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, weights.pointer, minlength)
    return tensor_from_ptr(__cret)
end
import Base.binomial


"""
    binomial(count::Tensor, prob::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_binomial(gc\\_tensor count, gc\\_tensor prob)
"""
function binomial(count::Tensor, prob::Tensor)

    __cret = ccall((:atg_binomial, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 count.pointer, prob.pointer)
    return tensor_from_ptr(__cret)
end


"""
    binomial_out(out::Tensor, count::Tensor, prob::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_binomial\\_out(gc\\_tensor out, gc\\_tensor count, gc\\_tensor prob)
"""
function binomial_out(out::Tensor, count::Tensor, prob::Tensor)

    __cret = ccall((:atg_binomial_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, count.pointer, prob.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_and(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_and(gc\\_tensor self, scalar other)
"""
function bitwise_and(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_and, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_and!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_and\\_(gc\\_tensor self, scalar other)
"""
function bitwise_and!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_and_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_and_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_and\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function bitwise_and_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_and_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_and_scalar_tensor(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_and\\_scalar\\_tensor(scalar self, gc\\_tensor other)
"""
function bitwise_and_scalar_tensor(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_and_scalar_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_and_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_and\\_scalar\\_tensor\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function bitwise_and_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_and_scalar_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_and_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_and\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_and_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_and_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_and_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_and\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_and_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_and_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_and_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_and\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_and_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_and_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_left_shift(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_left\\_shift(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_left_shift(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_left_shift, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_left_shift!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_left\\_shift\\_(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_left_shift!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_left_shift_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_left_shift_scalar_tensor(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_left\\_shift\\_scalar\\_tensor(scalar self, gc\\_tensor other)
"""
function bitwise_left_shift_scalar_tensor(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_left_shift_scalar_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_left_shift_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_left\\_shift\\_scalar\\_tensor\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function bitwise_left_shift_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_left_shift_scalar_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_left_shift_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_left\\_shift\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_left_shift_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_left_shift_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_left_shift_tensor_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_left\\_shift\\_tensor\\_scalar(gc\\_tensor self, scalar other)
"""
function bitwise_left_shift_tensor_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_left_shift_tensor_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_left_shift_tensor_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_left\\_shift\\_tensor\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function bitwise_left_shift_tensor_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_left_shift_tensor_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_left_shift_tensor_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_left\\_shift\\_tensor\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function bitwise_left_shift_tensor_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_left_shift_tensor_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_not(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_not(gc\\_tensor self)
"""
function bitwise_not(self::Tensor)

    __cret = ccall((:atg_bitwise_not, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_not!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_not\\_(gc\\_tensor self)
"""
function bitwise_not!(self::Tensor)

    __cret = ccall((:atg_bitwise_not_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_not_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_not\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function bitwise_not_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_bitwise_not_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_or(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_or(gc\\_tensor self, scalar other)
"""
function bitwise_or(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_or, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_or!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_or\\_(gc\\_tensor self, scalar other)
"""
function bitwise_or!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_or_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_or_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_or\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function bitwise_or_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_or_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_or_scalar_tensor(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_or\\_scalar\\_tensor(scalar self, gc\\_tensor other)
"""
function bitwise_or_scalar_tensor(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_or_scalar_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_or_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_or\\_scalar\\_tensor\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function bitwise_or_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_or_scalar_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_or_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_or\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_or_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_or_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_or_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_or\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_or_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_or_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_or_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_or\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_or_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_or_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_right_shift(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_right\\_shift(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_right_shift(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_right_shift, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_right_shift!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_right\\_shift\\_(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_right_shift!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_right_shift_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_right_shift_scalar_tensor(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_right\\_shift\\_scalar\\_tensor(scalar self, gc\\_tensor other)
"""
function bitwise_right_shift_scalar_tensor(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_right_shift_scalar_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_right_shift_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_right\\_shift\\_scalar\\_tensor\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function bitwise_right_shift_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_right_shift_scalar_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_right_shift_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_right\\_shift\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_right_shift_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_right_shift_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_right_shift_tensor_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_right\\_shift\\_tensor\\_scalar(gc\\_tensor self, scalar other)
"""
function bitwise_right_shift_tensor_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_right_shift_tensor_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_right_shift_tensor_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_right\\_shift\\_tensor\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function bitwise_right_shift_tensor_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_right_shift_tensor_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_right_shift_tensor_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_right\\_shift\\_tensor\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function bitwise_right_shift_tensor_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_right_shift_tensor_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_xor(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_xor(gc\\_tensor self, scalar other)
"""
function bitwise_xor(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_xor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_xor!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_xor\\_(gc\\_tensor self, scalar other)
"""
function bitwise_xor!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_xor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_xor_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_xor\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function bitwise_xor_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_bitwise_xor_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_xor_scalar_tensor(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_xor\\_scalar\\_tensor(scalar self, gc\\_tensor other)
"""
function bitwise_xor_scalar_tensor(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_xor_scalar_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_xor_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_xor\\_scalar\\_tensor\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function bitwise_xor_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bitwise_xor_scalar_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_xor_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_xor\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_xor_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_xor_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_xor_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_xor\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_xor_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_xor_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bitwise_xor_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bitwise\\_xor\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function bitwise_xor_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_bitwise_xor_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    blackman_window(window_length::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_blackman\\_window(int64\\_t window\\_length, int options\\_kind, int options\\_device)
"""
function blackman_window(window_length::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_blackman_window, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint),
                 window_length, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    blackman_window_out(out::Tensor, window_length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_blackman\\_window\\_out(gc\\_tensor out, int64\\_t window\\_length)
"""
function blackman_window_out(out::Tensor, window_length::Int64)

    __cret = ccall((:atg_blackman_window_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 out.pointer, window_length)
    return tensor_from_ptr(__cret)
end


"""
    blackman_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_blackman\\_window\\_periodic(int64\\_t window\\_length, int periodic, int options\\_kind, int options\\_device)
"""
function blackman_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_blackman_window_periodic, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint, Cint),
                 window_length, periodic, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    blackman_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_blackman\\_window\\_periodic\\_out(gc\\_tensor out, int64\\_t window\\_length, int periodic)
"""
function blackman_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

    __cret = ccall((:atg_blackman_window_periodic_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, window_length, periodic)
    return tensor_from_ptr(__cret)
end
# block_diag ignored

# block_diag_out ignored



"""
    bmm(self::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bmm(gc\\_tensor self, gc\\_tensor mat2)
"""
function bmm(self::Tensor, mat2::Tensor)

    __cret = ccall((:atg_bmm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    bmm_out(out::Tensor, self::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_bmm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat2)
"""
function bmm_out(out::Tensor, self::Tensor, mat2::Tensor)

    __cret = ccall((:atg_bmm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end
# broadcast_tensors ignored



"""
    broadcast_to(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_broadcast\\_to(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function broadcast_to(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_broadcast_to, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    bucketize(self::Tensor, boundaries::Tensor, out_int32::Int, right::Int)

 Wrapper of C++ function raw\\_tensor atg\\_bucketize(gc\\_tensor self, gc\\_tensor boundaries, int out\\_int32, int right)
"""
function bucketize(self::Tensor, boundaries::Tensor, out_int32::Int, right::Int)

    __cret = ccall((:atg_bucketize, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, boundaries.pointer, out_int32, right)
    return tensor_from_ptr(__cret)
end


"""
    bucketize_scalar(self::TorchNumber, boundaries::Tensor, out_int32::Int, right::Int)

 Wrapper of C++ function raw\\_tensor atg\\_bucketize\\_scalar(scalar self, gc\\_tensor boundaries, int out\\_int32, int right)
"""
function bucketize_scalar(self::TorchNumber, boundaries::Tensor, out_int32::Int, right::Int)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bucketize_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self_s_.pointer, boundaries.pointer, out_int32, right)
    return tensor_from_ptr(__cret)
end


"""
    bucketize_scalar_out(out::Tensor, self::TorchNumber, boundaries::Tensor, out_int32::Int, right::Int)

 Wrapper of C++ function raw\\_tensor atg\\_bucketize\\_scalar\\_out(gc\\_tensor out, scalar self, gc\\_tensor boundaries, int out\\_int32, int right)
"""
function bucketize_scalar_out(out::Tensor, self::TorchNumber, boundaries::Tensor, out_int32::Int, right::Int)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_bucketize_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self_s_.pointer, boundaries.pointer, out_int32, right)
    return tensor_from_ptr(__cret)
end


"""
    bucketize_tensor_out(out::Tensor, self::Tensor, boundaries::Tensor, out_int32::Int, right::Int)

 Wrapper of C++ function raw\\_tensor atg\\_bucketize\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor boundaries, int out\\_int32, int right)
"""
function bucketize_tensor_out(out::Tensor, self::Tensor, boundaries::Tensor, out_int32::Int, right::Int)

    __cret = ccall((:atg_bucketize_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, boundaries.pointer, out_int32, right)
    return tensor_from_ptr(__cret)
end


"""
    can_cast(from::Int, to::Int)

 Wrapper of C++ function int atg\\_can\\_cast(int from, int to)
"""
function can_cast(from::Int, to::Int)

    __cret = ccall((:atg_can_cast, :libtorch_capi),
                 Cvoid, (Cint, Cint),
                 from, to)
    return __cret
end
# cartesian_prod ignored

# cat ignored

# cat_out ignored



"""
    cauchy(self::Tensor, median::Float64, sigma::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_cauchy(gc\\_tensor self, double median, double sigma)
"""
function cauchy(self::Tensor, median::Float64, sigma::Float64)

    __cret = ccall((:atg_cauchy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, median, sigma)
    return tensor_from_ptr(__cret)
end


"""
    cauchy!(self::Tensor, median::Float64, sigma::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_cauchy\\_(gc\\_tensor self, double median, double sigma)
"""
function cauchy!(self::Tensor, median::Float64, sigma::Float64)

    __cret = ccall((:atg_cauchy_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, median, sigma)
    return tensor_from_ptr(__cret)
end


"""
    cauchy_out(out::Tensor, self::Tensor, median::Float64, sigma::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_cauchy\\_out(gc\\_tensor out, gc\\_tensor self, double median, double sigma)
"""
function cauchy_out(out::Tensor, self::Tensor, median::Float64, sigma::Float64)

    __cret = ccall((:atg_cauchy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble),
                 out.pointer, self.pointer, median, sigma)
    return tensor_from_ptr(__cret)
end


"""
    ccol_indices(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ccol\\_indices(gc\\_tensor self)
"""
function ccol_indices(self::Tensor)

    __cret = ccall((:atg_ccol_indices, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ccol_indices_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ccol\\_indices\\_copy(gc\\_tensor self)
"""
function ccol_indices_copy(self::Tensor)

    __cret = ccall((:atg_ccol_indices_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ccol_indices_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ccol\\_indices\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function ccol_indices_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_ccol_indices_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cdist(x1::Tensor, x2::Tensor, p::Float64, compute_mode_v::Int64, compute_mode_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cdist(gc\\_tensor x1, gc\\_tensor x2, double p, int64\\_t compute\\_mode\\_v, int compute\\_mode\\_null)
"""
function cdist(x1::Tensor, x2::Tensor, p::Float64, compute_mode_v::Int64, compute_mode_null::Int)

    __cret = ccall((:atg_cdist, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Clonglong, Cint),
                 x1.pointer, x2.pointer, p, compute_mode_v, compute_mode_null)
    return tensor_from_ptr(__cret)
end
import Base.ceil


"""
    ceil(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ceil(gc\\_tensor self)
"""
function ceil(self::Tensor)

    __cret = ccall((:atg_ceil, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ceil!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ceil\\_(gc\\_tensor self)
"""
function ceil!(self::Tensor)

    __cret = ccall((:atg_ceil_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ceil_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ceil\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function ceil_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_ceil_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    celu(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_celu(gc\\_tensor self)
"""
function celu(self::Tensor)

    __cret = ccall((:atg_celu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    celu!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_celu\\_(gc\\_tensor self)
"""
function celu!(self::Tensor)

    __cret = ccall((:atg_celu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    celu_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_celu\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function celu_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_celu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# chain_matmul ignored

# chain_matmul_out ignored



"""
    chalf(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_chalf(gc\\_tensor self)
"""
function chalf(self::Tensor)

    __cret = ccall((:atg_chalf, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    channel_shuffle(self::Tensor, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_channel\\_shuffle(gc\\_tensor self, int64\\_t groups)
"""
function channel_shuffle(self::Tensor, groups::Int64)

    __cret = ccall((:atg_channel_shuffle, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, groups)
    return tensor_from_ptr(__cret)
end


"""
    channel_shuffle_out(out::Tensor, self::Tensor, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_channel\\_shuffle\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t groups)
"""
function channel_shuffle_out(out::Tensor, self::Tensor, groups::Int64)

    __cret = ccall((:atg_channel_shuffle_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, groups)
    return tensor_from_ptr(__cret)
end


"""
    cholesky(self::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cholesky(gc\\_tensor self, int upper)
"""
function cholesky(self::Tensor, upper::Int)

    __cret = ccall((:atg_cholesky, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, upper)
    return tensor_from_ptr(__cret)
end


"""
    cholesky_inverse(self::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cholesky\\_inverse(gc\\_tensor self, int upper)
"""
function cholesky_inverse(self::Tensor, upper::Int)

    __cret = ccall((:atg_cholesky_inverse, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, upper)
    return tensor_from_ptr(__cret)
end


"""
    cholesky_inverse_out(out::Tensor, self::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cholesky\\_inverse\\_out(gc\\_tensor out, gc\\_tensor self, int upper)
"""
function cholesky_inverse_out(out::Tensor, self::Tensor, upper::Int)

    __cret = ccall((:atg_cholesky_inverse_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, upper)
    return tensor_from_ptr(__cret)
end


"""
    cholesky_out(out::Tensor, self::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cholesky\\_out(gc\\_tensor out, gc\\_tensor self, int upper)
"""
function cholesky_out(out::Tensor, self::Tensor, upper::Int)

    __cret = ccall((:atg_cholesky_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, upper)
    return tensor_from_ptr(__cret)
end


"""
    cholesky_solve(self::Tensor, input2::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cholesky\\_solve(gc\\_tensor self, gc\\_tensor input2, int upper)
"""
function cholesky_solve(self::Tensor, input2::Tensor, upper::Int)

    __cret = ccall((:atg_cholesky_solve, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, input2.pointer, upper)
    return tensor_from_ptr(__cret)
end


"""
    cholesky_solve_out(out::Tensor, self::Tensor, input2::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cholesky\\_solve\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor input2, int upper)
"""
function cholesky_solve_out(out::Tensor, self::Tensor, input2::Tensor, upper::Int)

    __cret = ccall((:atg_cholesky_solve_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, input2.pointer, upper)
    return tensor_from_ptr(__cret)
end
# choose_qparams_optimized ignored



"""
    chunk(self::Tensor, chunks::Int64, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_chunk(gc\\_tensor self, int64\\_t chunks, int64\\_t dim)
"""
function chunk(self::Tensor, chunks::Int64, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_chunk, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, chunks, dim)
    return __cret
end
import Base.clamp


"""
    clamp(self::Tensor, min::TorchNumber, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp(gc\\_tensor self, scalar min, scalar max)
"""
function clamp(self::Tensor, min::TorchNumber, max::TorchNumber)
    min_s_ = Scalar(min)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clamp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min_s_.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end
import Base.clamp!


"""
    clamp!(self::Tensor, min::TorchNumber, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_(gc\\_tensor self, scalar min, scalar max)
"""
function clamp!(self::Tensor, min::TorchNumber, max::TorchNumber)
    min_s_ = Scalar(min)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clamp_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min_s_.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_max(self::Tensor, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_max(gc\\_tensor self, scalar max)
"""
function clamp_max(self::Tensor, max::TorchNumber)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clamp_max, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_max!(self::Tensor, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_max\\_(gc\\_tensor self, scalar max)
"""
function clamp_max!(self::Tensor, max::TorchNumber)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clamp_max_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_max_out(out::Tensor, self::Tensor, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_max\\_out(gc\\_tensor out, gc\\_tensor self, scalar max)
"""
function clamp_max_out(out::Tensor, self::Tensor, max::TorchNumber)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clamp_max_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_max_tensor(self::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_max\\_tensor(gc\\_tensor self, gc\\_tensor max)
"""
function clamp_max_tensor(self::Tensor, max::Tensor)

    __cret = ccall((:atg_clamp_max_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_max_tensor!(self::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_max\\_tensor\\_(gc\\_tensor self, gc\\_tensor max)
"""
function clamp_max_tensor!(self::Tensor, max::Tensor)

    __cret = ccall((:atg_clamp_max_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_max_tensor_out(out::Tensor, self::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_max\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor max)
"""
function clamp_max_tensor_out(out::Tensor, self::Tensor, max::Tensor)

    __cret = ccall((:atg_clamp_max_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_min(self::Tensor, min::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_min(gc\\_tensor self, scalar min)
"""
function clamp_min(self::Tensor, min::TorchNumber)
    min_s_ = Scalar(min)
    __cret = ccall((:atg_clamp_min, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_min!(self::Tensor, min::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_min\\_(gc\\_tensor self, scalar min)
"""
function clamp_min!(self::Tensor, min::TorchNumber)
    min_s_ = Scalar(min)
    __cret = ccall((:atg_clamp_min_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_min_out(out::Tensor, self::Tensor, min::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_min\\_out(gc\\_tensor out, gc\\_tensor self, scalar min)
"""
function clamp_min_out(out::Tensor, self::Tensor, min::TorchNumber)
    min_s_ = Scalar(min)
    __cret = ccall((:atg_clamp_min_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, min_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_min_tensor(self::Tensor, min::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_min\\_tensor(gc\\_tensor self, gc\\_tensor min)
"""
function clamp_min_tensor(self::Tensor, min::Tensor)

    __cret = ccall((:atg_clamp_min_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_min_tensor!(self::Tensor, min::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_min\\_tensor\\_(gc\\_tensor self, gc\\_tensor min)
"""
function clamp_min_tensor!(self::Tensor, min::Tensor)

    __cret = ccall((:atg_clamp_min_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_min_tensor_out(out::Tensor, self::Tensor, min::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_min\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor min)
"""
function clamp_min_tensor_out(out::Tensor, self::Tensor, min::Tensor)

    __cret = ccall((:atg_clamp_min_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, min.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_out(out::Tensor, self::Tensor, min::TorchNumber, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_out(gc\\_tensor out, gc\\_tensor self, scalar min, scalar max)
"""
function clamp_out(out::Tensor, self::Tensor, min::TorchNumber, max::TorchNumber)
    min_s_ = Scalar(min)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clamp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, min_s_.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_tensor(self::Tensor, min::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_tensor(gc\\_tensor self, gc\\_tensor min, gc\\_tensor max)
"""
function clamp_tensor(self::Tensor, min::Tensor, max::Tensor)

    __cret = ccall((:atg_clamp_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_tensor!(self::Tensor, min::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_tensor\\_(gc\\_tensor self, gc\\_tensor min, gc\\_tensor max)
"""
function clamp_tensor!(self::Tensor, min::Tensor, max::Tensor)

    __cret = ccall((:atg_clamp_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clamp_tensor_out(out::Tensor, self::Tensor, min::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clamp\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor min, gc\\_tensor max)
"""
function clamp_tensor_out(out::Tensor, self::Tensor, min::Tensor, max::Tensor)

    __cret = ccall((:atg_clamp_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, min.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clip(self::Tensor, min::TorchNumber, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clip(gc\\_tensor self, scalar min, scalar max)
"""
function clip(self::Tensor, min::TorchNumber, max::TorchNumber)
    min_s_ = Scalar(min)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clip, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min_s_.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clip!(self::Tensor, min::TorchNumber, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clip\\_(gc\\_tensor self, scalar min, scalar max)
"""
function clip!(self::Tensor, min::TorchNumber, max::TorchNumber)
    min_s_ = Scalar(min)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clip_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min_s_.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clip_out(out::Tensor, self::Tensor, min::TorchNumber, max::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_clip\\_out(gc\\_tensor out, gc\\_tensor self, scalar min, scalar max)
"""
function clip_out(out::Tensor, self::Tensor, min::TorchNumber, max::TorchNumber)
    min_s_ = Scalar(min)
    max_s_ = Scalar(max)
    __cret = ccall((:atg_clip_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, min_s_.pointer, max_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clip_tensor(self::Tensor, min::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clip\\_tensor(gc\\_tensor self, gc\\_tensor min, gc\\_tensor max)
"""
function clip_tensor(self::Tensor, min::Tensor, max::Tensor)

    __cret = ccall((:atg_clip_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clip_tensor!(self::Tensor, min::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clip\\_tensor\\_(gc\\_tensor self, gc\\_tensor min, gc\\_tensor max)
"""
function clip_tensor!(self::Tensor, min::Tensor, max::Tensor)

    __cret = ccall((:atg_clip_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, min.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clip_tensor_out(out::Tensor, self::Tensor, min::Tensor, max::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clip\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor min, gc\\_tensor max)
"""
function clip_tensor_out(out::Tensor, self::Tensor, min::Tensor, max::Tensor)

    __cret = ccall((:atg_clip_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, min.pointer, max.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clone(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clone(gc\\_tensor self)
"""
function clone(self::Tensor)

    __cret = ccall((:atg_clone, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    clone_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_clone\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function clone_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_clone_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.coalesce


"""
    coalesce(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_coalesce(gc\\_tensor self)
"""
function coalesce(self::Tensor)

    __cret = ccall((:atg_coalesce, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    col2im(self::Tensor, output_size_data::Array{Int64}, kernel_size_data::Array{Int64}, dilation_data::Array{Int64}, padding_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_col2im(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function col2im(self::Tensor, output_size_data::Array{Int64}, kernel_size_data::Array{Int64}, dilation_data::Array{Int64}, padding_data::Array{Int64}, stride_data::Array{Int64})
    output_size_len = length(output_size_data)
    kernel_size_len = length(kernel_size_data)
    dilation_len = length(dilation_data)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_col2im, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, output_size_data, output_size_len, kernel_size_data, kernel_size_len, dilation_data, dilation_len, padding_data, padding_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    col2im_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, kernel_size_data::Array{Int64}, dilation_data::Array{Int64}, padding_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_col2im\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function col2im_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, kernel_size_data::Array{Int64}, dilation_data::Array{Int64}, padding_data::Array{Int64}, stride_data::Array{Int64})
    output_size_len = length(output_size_data)
    kernel_size_len = length(kernel_size_data)
    dilation_len = length(dilation_data)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_col2im_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, kernel_size_data, kernel_size_len, dilation_data, dilation_len, padding_data, padding_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    col_indices(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_col\\_indices(gc\\_tensor self)
"""
function col_indices(self::Tensor)

    __cret = ccall((:atg_col_indices, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    col_indices_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_col\\_indices\\_copy(gc\\_tensor self)
"""
function col_indices_copy(self::Tensor)

    __cret = ccall((:atg_col_indices_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    col_indices_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_col\\_indices\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function col_indices_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_col_indices_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# column_stack ignored

# column_stack_out ignored



"""
    combinations(self::Tensor, r::Int64, with_replacement::Int)

 Wrapper of C++ function raw\\_tensor atg\\_combinations(gc\\_tensor self, int64\\_t r, int with\\_replacement)
"""
function combinations(self::Tensor, r::Int64, with_replacement::Int)

    __cret = ccall((:atg_combinations, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, r, with_replacement)
    return tensor_from_ptr(__cret)
end
import Base.complex


"""
    complex(real::Tensor, imag::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_complex(gc\\_tensor real, gc\\_tensor imag)
"""
function complex(real::Tensor, imag::Tensor)

    __cret = ccall((:atg_complex, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 real.pointer, imag.pointer)
    return tensor_from_ptr(__cret)
end


"""
    complex_out(out::Tensor, real::Tensor, imag::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_complex\\_out(gc\\_tensor out, gc\\_tensor real, gc\\_tensor imag)
"""
function complex_out(out::Tensor, real::Tensor, imag::Tensor)

    __cret = ccall((:atg_complex_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, real.pointer, imag.pointer)
    return tensor_from_ptr(__cret)
end
# concat ignored

# concat_out ignored

# concatenate ignored

# concatenate_out ignored

import Base.conj


"""
    conj(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_conj(gc\\_tensor self)
"""
function conj(self::Tensor)

    __cret = ccall((:atg_conj, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    conj_physical(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_conj\\_physical(gc\\_tensor self)
"""
function conj_physical(self::Tensor)

    __cret = ccall((:atg_conj_physical, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    conj_physical!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_conj\\_physical\\_(gc\\_tensor self)
"""
function conj_physical!(self::Tensor)

    __cret = ccall((:atg_conj_physical_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    conj_physical_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_conj\\_physical\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function conj_physical_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_conj_physical_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    constant_pad_nd(self::Tensor, pad_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_constant\\_pad\\_nd(gc\\_tensor self, int64\\_t *pad\\_data, int pad\\_len)
"""
function constant_pad_nd(self::Tensor, pad_data::Array{Int64})
    pad_len = length(pad_data)
    __cret = ccall((:atg_constant_pad_nd, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, pad_data, pad_len)
    return tensor_from_ptr(__cret)
end


"""
    constant_pad_nd_out(out::Tensor, self::Tensor, pad_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_constant\\_pad\\_nd\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *pad\\_data, int pad\\_len)
"""
function constant_pad_nd_out(out::Tensor, self::Tensor, pad_data::Array{Int64})
    pad_len = length(pad_data)
    __cret = ccall((:atg_constant_pad_nd_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, pad_data, pad_len)
    return tensor_from_ptr(__cret)
end


"""
    contiguous(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_contiguous(gc\\_tensor self)
"""
function contiguous(self::Tensor)

    __cret = ccall((:atg_contiguous, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    conv1d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_conv1d(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function conv1d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_conv1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end
# conv1d_padding ignored



"""
    conv2d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_conv2d(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function conv2d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_conv2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end
# conv2d_padding ignored



"""
    conv3d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_conv3d(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function conv3d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_conv3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end
# conv3d_padding ignored



"""
    conv_depthwise3d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_conv\\_depthwise3d(gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function conv_depthwise3d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_conv_depthwise3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    conv_depthwise3d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_conv\\_depthwise3d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function conv_depthwise3d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_conv_depthwise3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    conv_tbc(self::Tensor, weight::Tensor, bias::Tensor, pad::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_conv\\_tbc(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t pad)
"""
function conv_tbc(self::Tensor, weight::Tensor, bias::Tensor, pad::Int64)

    __cret = ccall((:atg_conv_tbc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, weight.pointer, bias.pointer, pad)
    return tensor_from_ptr(__cret)
end
# conv_tbc_backward ignored



"""
    conv_tbc_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, pad::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_conv\\_tbc\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t pad)
"""
function conv_tbc_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, pad::Int64)

    __cret = ccall((:atg_conv_tbc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, weight.pointer, bias.pointer, pad)
    return tensor_from_ptr(__cret)
end


"""
    conv_transpose1d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, groups::Int64, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_conv\\_transpose1d(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function conv_transpose1d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, groups::Int64, dilation_data::Array{Int64})
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_conv_transpose1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Ptr{Cvoid}, Cint),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, output_padding_data, output_padding_len, groups, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    conv_transpose2d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, groups::Int64, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_conv\\_transpose2d(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function conv_transpose2d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, groups::Int64, dilation_data::Array{Int64})
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_conv_transpose2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Ptr{Cvoid}, Cint),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, output_padding_data, output_padding_len, groups, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    conv_transpose3d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, groups::Int64, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_conv\\_transpose3d(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function conv_transpose3d(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, groups::Int64, dilation_data::Array{Int64})
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_conv_transpose3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Ptr{Cvoid}, Cint),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, output_padding_data, output_padding_len, groups, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    convolution(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_convolution(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int transposed, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups)
"""
function convolution(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    output_padding_len = length(output_padding_data)
    __cret = ccall((:atg_convolution, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, transposed, output_padding_data, output_padding_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    convolution_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_convolution\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int transposed, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups)
"""
function convolution_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    output_padding_len = length(output_padding_data)
    __cret = ccall((:atg_convolution_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, transposed, output_padding_data, output_padding_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    convolution_overrideable(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_convolution\\_overrideable(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int transposed, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups)
"""
function convolution_overrideable(input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    output_padding_len = length(output_padding_data)
    __cret = ccall((:atg_convolution_overrideable, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, transposed, output_padding_data, output_padding_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    convolution_overrideable_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_convolution\\_overrideable\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int transposed, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t groups)
"""
function convolution_overrideable_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, transposed::Int, output_padding_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    output_padding_len = length(output_padding_data)
    __cret = ccall((:atg_convolution_overrideable_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, input.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, transposed, output_padding_data, output_padding_len, groups)
    return tensor_from_ptr(__cret)
end
import Base.copy


"""
    copy(self::Tensor, src::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_copy(gc\\_tensor self, gc\\_tensor src, int non\\_blocking)
"""
function copy(self::Tensor, src::Tensor, non_blocking::Int)

    __cret = ccall((:atg_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, src.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    copy_out(out::Tensor, self::Tensor, src::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor src, int non\\_blocking)
"""
function copy_out(out::Tensor, self::Tensor, src::Tensor, non_blocking::Int)

    __cret = ccall((:atg_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, src.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    copy_sparse_to_sparse(self::Tensor, src::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_copy\\_sparse\\_to\\_sparse(gc\\_tensor self, gc\\_tensor src, int non\\_blocking)
"""
function copy_sparse_to_sparse(self::Tensor, src::Tensor, non_blocking::Int)

    __cret = ccall((:atg_copy_sparse_to_sparse, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, src.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    copy_sparse_to_sparse!(self::Tensor, src::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_copy\\_sparse\\_to\\_sparse\\_(gc\\_tensor self, gc\\_tensor src, int non\\_blocking)
"""
function copy_sparse_to_sparse!(self::Tensor, src::Tensor, non_blocking::Int)

    __cret = ccall((:atg_copy_sparse_to_sparse_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, src.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end


"""
    copy_sparse_to_sparse_out(out::Tensor, self::Tensor, src::Tensor, non_blocking::Int)

 Wrapper of C++ function raw\\_tensor atg\\_copy\\_sparse\\_to\\_sparse\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor src, int non\\_blocking)
"""
function copy_sparse_to_sparse_out(out::Tensor, self::Tensor, src::Tensor, non_blocking::Int)

    __cret = ccall((:atg_copy_sparse_to_sparse_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, src.pointer, non_blocking)
    return tensor_from_ptr(__cret)
end
import Base.copysign


"""
    copysign(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_copysign(gc\\_tensor self, gc\\_tensor other)
"""
function copysign(self::Tensor, other::Tensor)

    __cret = ccall((:atg_copysign, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    copysign!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_copysign\\_(gc\\_tensor self, gc\\_tensor other)
"""
function copysign!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_copysign_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    copysign_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_copysign\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function copysign_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_copysign_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    copysign_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_copysign\\_scalar(gc\\_tensor self, scalar other)
"""
function copysign_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_copysign_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    copysign_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_copysign\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function copysign_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_copysign_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    copysign_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_copysign\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function copysign_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_copysign_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    corrcoef(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_corrcoef(gc\\_tensor self)
"""
function corrcoef(self::Tensor)

    __cret = ccall((:atg_corrcoef, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.cos


"""
    cos(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cos(gc\\_tensor self)
"""
function cos(self::Tensor)

    __cret = ccall((:atg_cos, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cos!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cos\\_(gc\\_tensor self)
"""
function cos!(self::Tensor)

    __cret = ccall((:atg_cos_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cos_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cos\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function cos_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_cos_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.cosh


"""
    cosh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cosh(gc\\_tensor self)
"""
function cosh(self::Tensor)

    __cret = ccall((:atg_cosh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cosh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cosh\\_(gc\\_tensor self)
"""
function cosh!(self::Tensor)

    __cret = ccall((:atg_cosh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cosh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cosh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function cosh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_cosh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cosine_embedding_loss(input1::Tensor, input2::Tensor, target::Tensor, margin::Float64, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cosine\\_embedding\\_loss(gc\\_tensor input1, gc\\_tensor input2, gc\\_tensor target, double margin, int64\\_t reduction)
"""
function cosine_embedding_loss(input1::Tensor, input2::Tensor, target::Tensor, margin::Float64, reduction::Int64)

    __cret = ccall((:atg_cosine_embedding_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Clonglong),
                 input1.pointer, input2.pointer, target.pointer, margin, reduction)
    return tensor_from_ptr(__cret)
end


"""
    cosine_similarity(x1::Tensor, x2::Tensor, dim::Int64, eps::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_cosine\\_similarity(gc\\_tensor x1, gc\\_tensor x2, int64\\_t dim, double eps)
"""
function cosine_similarity(x1::Tensor, x2::Tensor, dim::Int64, eps::Float64)
    dim = dim - 1
    __cret = ccall((:atg_cosine_similarity, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 x1.pointer, x2.pointer, dim, eps)
    return tensor_from_ptr(__cret)
end


"""
    count_nonzero(out::Tensor, self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_count\\_nonzero(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function count_nonzero(out::Tensor, self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg_count_nonzero, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    count_nonzero_out(out::Tensor, self::Tensor, dim_v::Int64, dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_count\\_nonzero\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim\\_v, int dim\\_null)
"""
function count_nonzero_out(out::Tensor, self::Tensor, dim_v::Int64, dim_null::Int)

    __cret = ccall((:atg_count_nonzero_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim_v, dim_null)
    return tensor_from_ptr(__cret)
end


"""
    cov(self::Tensor, correction::Int64, fweights::Tensor, aweights::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cov(gc\\_tensor self, int64\\_t correction, gc\\_tensor fweights, gc\\_tensor aweights)
"""
function cov(self::Tensor, correction::Int64, fweights::Tensor, aweights::Tensor)

    __cret = ccall((:atg_cov, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, correction, fweights.pointer, aweights.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cross(self::Tensor, other::Tensor, dim_v::Int64, dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cross(gc\\_tensor self, gc\\_tensor other, int64\\_t dim\\_v, int dim\\_null)
"""
function cross(self::Tensor, other::Tensor, dim_v::Int64, dim_null::Int)

    __cret = ccall((:atg_cross, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, other.pointer, dim_v, dim_null)
    return tensor_from_ptr(__cret)
end


"""
    cross_entropy_loss(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, label_smoothing::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_cross\\_entropy\\_loss(gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index, double label\\_smoothing)
"""
function cross_entropy_loss(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, label_smoothing::Float64)

    __cret = ccall((:atg_cross_entropy_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cdouble),
                 self.pointer, target.pointer, weight.pointer, reduction, ignore_index, label_smoothing)
    return tensor_from_ptr(__cret)
end


"""
    cross_out(out::Tensor, self::Tensor, other::Tensor, dim_v::Int64, dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cross\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other, int64\\_t dim\\_v, int dim\\_null)
"""
function cross_out(out::Tensor, self::Tensor, other::Tensor, dim_v::Int64, dim_null::Int)

    __cret = ccall((:atg_cross_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, other.pointer, dim_v, dim_null)
    return tensor_from_ptr(__cret)
end


"""
    crow_indices(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_crow\\_indices(gc\\_tensor self)
"""
function crow_indices(self::Tensor)

    __cret = ccall((:atg_crow_indices, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    crow_indices_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_crow\\_indices\\_copy(gc\\_tensor self)
"""
function crow_indices_copy(self::Tensor)

    __cret = ccall((:atg_crow_indices_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    crow_indices_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_crow\\_indices\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function crow_indices_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_crow_indices_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ctc_loss(log_probs::Tensor, targets::Tensor, input_lengths_data::Array{Int64}, target_lengths_data::Array{Int64}, blank::Int64, reduction::Int64, zero_infinity::Int)

 Wrapper of C++ function raw\\_tensor atg\\_ctc\\_loss(gc\\_tensor log\\_probs, gc\\_tensor targets, int64\\_t *input\\_lengths\\_data, int input\\_lengths\\_len, int64\\_t *target\\_lengths\\_data, int target\\_lengths\\_len, int64\\_t blank, int64\\_t reduction, int zero\\_infinity)
"""
function ctc_loss(log_probs::Tensor, targets::Tensor, input_lengths_data::Array{Int64}, target_lengths_data::Array{Int64}, blank::Int64, reduction::Int64, zero_infinity::Int)
    input_lengths_len = length(input_lengths_data)
    target_lengths_len = length(target_lengths_data)
    __cret = ccall((:atg_ctc_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Clonglong, Cint),
                 log_probs.pointer, targets.pointer, input_lengths_data, input_lengths_len, target_lengths_data, target_lengths_len, blank, reduction, zero_infinity)
    return tensor_from_ptr(__cret)
end


"""
    ctc_loss_tensor(log_probs::Tensor, targets::Tensor, input_lengths::Tensor, target_lengths::Tensor, blank::Int64, reduction::Int64, zero_infinity::Int)

 Wrapper of C++ function raw\\_tensor atg\\_ctc\\_loss\\_tensor(gc\\_tensor log\\_probs, gc\\_tensor targets, gc\\_tensor input\\_lengths, gc\\_tensor target\\_lengths, int64\\_t blank, int64\\_t reduction, int zero\\_infinity)
"""
function ctc_loss_tensor(log_probs::Tensor, targets::Tensor, input_lengths::Tensor, target_lengths::Tensor, blank::Int64, reduction::Int64, zero_infinity::Int)

    __cret = ccall((:atg_ctc_loss_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 log_probs.pointer, targets.pointer, input_lengths.pointer, target_lengths.pointer, blank, reduction, zero_infinity)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_affine_grid_generator(theta::Tensor, n::Int64, C::Int64, H::Int64, W::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_affine\\_grid\\_generator(gc\\_tensor theta, int64\\_t n, int64\\_t C, int64\\_t H, int64\\_t W)
"""
function cudnn_affine_grid_generator(theta::Tensor, n::Int64, C::Int64, H::Int64, W::Int64)

    __cret = ccall((:atg_cudnn_affine_grid_generator, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong, Clonglong),
                 theta.pointer, n, C, H, W)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_affine_grid_generator_backward(grad::Tensor, n::Int64, C::Int64, H::Int64, W::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_affine\\_grid\\_generator\\_backward(gc\\_tensor grad, int64\\_t n, int64\\_t C, int64\\_t H, int64\\_t W)
"""
function cudnn_affine_grid_generator_backward(grad::Tensor, n::Int64, C::Int64, H::Int64, W::Int64)

    __cret = ccall((:atg_cudnn_affine_grid_generator_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong, Clonglong),
                 grad.pointer, n, C, H, W)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_affine_grid_generator_backward_out(out::Tensor, grad::Tensor, n::Int64, C::Int64, H::Int64, W::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_affine\\_grid\\_generator\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad, int64\\_t n, int64\\_t C, int64\\_t H, int64\\_t W)
"""
function cudnn_affine_grid_generator_backward_out(out::Tensor, grad::Tensor, n::Int64, C::Int64, H::Int64, W::Int64)

    __cret = ccall((:atg_cudnn_affine_grid_generator_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong, Clonglong),
                 out.pointer, grad.pointer, n, C, H, W)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_affine_grid_generator_out(out::Tensor, theta::Tensor, n::Int64, C::Int64, H::Int64, W::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_affine\\_grid\\_generator\\_out(gc\\_tensor out, gc\\_tensor theta, int64\\_t n, int64\\_t C, int64\\_t H, int64\\_t W)
"""
function cudnn_affine_grid_generator_out(out::Tensor, theta::Tensor, n::Int64, C::Int64, H::Int64, W::Int64)

    __cret = ccall((:atg_cudnn_affine_grid_generator_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong, Clonglong),
                 out.pointer, theta.pointer, n, C, H, W)
    return tensor_from_ptr(__cret)
end
# cudnn_batch_norm ignored

# cudnn_batch_norm_backward ignored

# cudnn_batch_norm_backward_out ignored

# cudnn_batch_norm_out ignored



"""
    cudnn_convolution(self::Tensor, weight::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, allow_tf32::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_convolution(gc\\_tensor self, gc\\_tensor weight, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic, int allow\\_tf32)
"""
function cudnn_convolution(self::Tensor, weight::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, allow_tf32::Int)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_cudnn_convolution, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint, Cint),
                 self.pointer, weight.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic, allow_tf32)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_convolution_add_relu(self::Tensor, weight::Tensor, z::Tensor, alpha::TorchNumber, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_convolution\\_add\\_relu(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor z, scalar alpha, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function cudnn_convolution_add_relu(self::Tensor, weight::Tensor, z::Tensor, alpha::TorchNumber, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    alpha_s_ = Scalar(alpha)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_cudnn_convolution_add_relu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, weight.pointer, z.pointer, alpha_s_.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_convolution_add_relu_out(out::Tensor, self::Tensor, weight::Tensor, z::Tensor, alpha::TorchNumber, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_convolution\\_add\\_relu\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor z, scalar alpha, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function cudnn_convolution_add_relu_out(out::Tensor, self::Tensor, weight::Tensor, z::Tensor, alpha::TorchNumber, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    alpha_s_ = Scalar(alpha)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_cudnn_convolution_add_relu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, self.pointer, weight.pointer, z.pointer, alpha_s_.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_convolution_out(out::Tensor, self::Tensor, weight::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, allow_tf32::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_convolution\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic, int allow\\_tf32)
"""
function cudnn_convolution_out(out::Tensor, self::Tensor, weight::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, allow_tf32::Int)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_cudnn_convolution_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint, Cint),
                 out.pointer, self.pointer, weight.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic, allow_tf32)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_convolution_relu(self::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_convolution\\_relu(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function cudnn_convolution_relu(self::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_cudnn_convolution_relu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_convolution_relu_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_convolution\\_relu\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function cudnn_convolution_relu_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_cudnn_convolution_relu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, self.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_convolution_transpose(self::Tensor, weight::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, allow_tf32::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_convolution\\_transpose(gc\\_tensor self, gc\\_tensor weight, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic, int allow\\_tf32)
"""
function cudnn_convolution_transpose(self::Tensor, weight::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, allow_tf32::Int)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_cudnn_convolution_transpose, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint, Cint),
                 self.pointer, weight.pointer, padding_data, padding_len, output_padding_data, output_padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic, allow_tf32)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_convolution_transpose_out(out::Tensor, self::Tensor, weight::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, allow_tf32::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_convolution\\_transpose\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic, int allow\\_tf32)
"""
function cudnn_convolution_transpose_out(out::Tensor, self::Tensor, weight::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int, allow_tf32::Int)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_cudnn_convolution_transpose_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint, Cint),
                 out.pointer, self.pointer, weight.pointer, padding_data, padding_len, output_padding_data, output_padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic, allow_tf32)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_grid_sampler(self::Tensor, grid::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_grid\\_sampler(gc\\_tensor self, gc\\_tensor grid)
"""
function cudnn_grid_sampler(self::Tensor, grid::Tensor)

    __cret = ccall((:atg_cudnn_grid_sampler, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, grid.pointer)
    return tensor_from_ptr(__cret)
end
# cudnn_grid_sampler_backward ignored

# cudnn_grid_sampler_backward_out ignored



"""
    cudnn_grid_sampler_out(out::Tensor, self::Tensor, grid::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cudnn\\_grid\\_sampler\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor grid)
"""
function cudnn_grid_sampler_out(out::Tensor, self::Tensor, grid::Tensor)

    __cret = ccall((:atg_cudnn_grid_sampler_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, grid.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cudnn_is_acceptable(self::Tensor)

 Wrapper of C++ function int atg\\_cudnn\\_is\\_acceptable(gc\\_tensor self)
"""
function cudnn_is_acceptable(self::Tensor)

    __cret = ccall((:atg_cudnn_is_acceptable, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end
# cummax ignored

# cummax_out ignored



"""
    cummaxmin_backward(grad::Tensor, input::Tensor, indices::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cummaxmin\\_backward(gc\\_tensor grad, gc\\_tensor input, gc\\_tensor indices, int64\\_t dim)
"""
function cummaxmin_backward(grad::Tensor, input::Tensor, indices::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_cummaxmin_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad.pointer, input.pointer, indices.pointer, dim)
    return tensor_from_ptr(__cret)
end
# cummin ignored

# cummin_out ignored

import Base.cumprod


"""
    cumprod(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cumprod(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function cumprod(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_cumprod, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end
import Base.cumprod!


"""
    cumprod!(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cumprod\\_(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function cumprod!(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_cumprod_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    cumprod_backward(grad::Tensor, input::Tensor, dim::Int64, output::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_cumprod\\_backward(gc\\_tensor grad, gc\\_tensor input, int64\\_t dim, gc\\_tensor output)
"""
function cumprod_backward(grad::Tensor, input::Tensor, dim::Int64, output::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_cumprod_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 grad.pointer, input.pointer, dim, output.pointer)
    return tensor_from_ptr(__cret)
end


"""
    cumprod_out(out::Tensor, self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cumprod\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int dtype)
"""
function cumprod_out(out::Tensor, self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_cumprod_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end
import Base.cumsum


"""
    cumsum(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cumsum(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function cumsum(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_cumsum, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end
import Base.cumsum!


"""
    cumsum!(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cumsum\\_(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function cumsum!(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_cumsum_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    cumsum_out(out::Tensor, self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_cumsum\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int dtype)
"""
function cumsum_out(out::Tensor, self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_cumsum_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    cumulative_trapezoid(y::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cumulative\\_trapezoid(gc\\_tensor y, int64\\_t dim)
"""
function cumulative_trapezoid(y::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_cumulative_trapezoid, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 y.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    cumulative_trapezoid_x(y::Tensor, x::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_cumulative\\_trapezoid\\_x(gc\\_tensor y, gc\\_tensor x, int64\\_t dim)
"""
function cumulative_trapezoid_x(y::Tensor, x::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_cumulative_trapezoid_x, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 y.pointer, x.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    data(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_data(gc\\_tensor self)
"""
function data(self::Tensor)

    __cret = ccall((:atg_data, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.deg2rad


"""
    deg2rad(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_deg2rad(gc\\_tensor self)
"""
function deg2rad(self::Tensor)

    __cret = ccall((:atg_deg2rad, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    deg2rad!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_deg2rad\\_(gc\\_tensor self)
"""
function deg2rad!(self::Tensor)

    __cret = ccall((:atg_deg2rad_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    deg2rad_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_deg2rad\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function deg2rad_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_deg2rad_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    dense_dim(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_dense\\_dim(gc\\_tensor self)
"""
function dense_dim(self::Tensor)

    __cret = ccall((:atg_dense_dim, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    dequantize(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_dequantize(gc\\_tensor self)
"""
function dequantize(self::Tensor)

    __cret = ccall((:atg_dequantize, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    dequantize_self_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_dequantize\\_self\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function dequantize_self_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_dequantize_self_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# dequantize_tensors ignored

# dequantize_tensors_out ignored



"""
    det(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_det(gc\\_tensor self)
"""
function det(self::Tensor)

    __cret = ccall((:atg_det, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.detach


"""
    detach(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_detach(gc\\_tensor self)
"""
function detach(self::Tensor)

    __cret = ccall((:atg_detach, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    detach!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_detach\\_(gc\\_tensor self)
"""
function detach!(self::Tensor)

    __cret = ccall((:atg_detach_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    detach_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_detach\\_copy(gc\\_tensor self)
"""
function detach_copy(self::Tensor)

    __cret = ccall((:atg_detach_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    detach_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_detach\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function detach_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_detach_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    diag(self::Tensor, diagonal::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diag(gc\\_tensor self, int64\\_t diagonal)
"""
function diag(self::Tensor, diagonal::Int64)

    __cret = ccall((:atg_diag, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, diagonal)
    return tensor_from_ptr(__cret)
end


"""
    diag_embed(self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diag\\_embed(gc\\_tensor self, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diag_embed(self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

    __cret = ccall((:atg_diag_embed, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end


"""
    diag_embed_out(out::Tensor, self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diag\\_embed\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diag_embed_out(out::Tensor, self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

    __cret = ccall((:atg_diag_embed_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 out.pointer, self.pointer, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end


"""
    diag_out(out::Tensor, self::Tensor, diagonal::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diag\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t diagonal)
"""
function diag_out(out::Tensor, self::Tensor, diagonal::Int64)

    __cret = ccall((:atg_diag_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, diagonal)
    return tensor_from_ptr(__cret)
end


"""
    diagflat(self::Tensor, offset::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diagflat(gc\\_tensor self, int64\\_t offset)
"""
function diagflat(self::Tensor, offset::Int64)

    __cret = ccall((:atg_diagflat, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, offset)
    return tensor_from_ptr(__cret)
end


"""
    diagonal(self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diagonal(gc\\_tensor self, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diagonal(self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

    __cret = ccall((:atg_diagonal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end


"""
    diagonal_backward(grad_output::Tensor, input_sizes_data::Array{Int64}, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diagonal\\_backward(gc\\_tensor grad\\_output, int64\\_t *input\\_sizes\\_data, int input\\_sizes\\_len, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diagonal_backward(grad_output::Tensor, input_sizes_data::Array{Int64}, offset::Int64, dim1::Int64, dim2::Int64)
    input_sizes_len = length(input_sizes_data)
    __cret = ccall((:atg_diagonal_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong, Clonglong),
                 grad_output.pointer, input_sizes_data, input_sizes_len, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end


"""
    diagonal_backward_out(out::Tensor, grad_output::Tensor, input_sizes_data::Array{Int64}, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diagonal\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, int64\\_t *input\\_sizes\\_data, int input\\_sizes\\_len, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diagonal_backward_out(out::Tensor, grad_output::Tensor, input_sizes_data::Array{Int64}, offset::Int64, dim1::Int64, dim2::Int64)
    input_sizes_len = length(input_sizes_data)
    __cret = ccall((:atg_diagonal_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong, Clonglong),
                 out.pointer, grad_output.pointer, input_sizes_data, input_sizes_len, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end


"""
    diagonal_copy(self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diagonal\\_copy(gc\\_tensor self, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diagonal_copy(self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

    __cret = ccall((:atg_diagonal_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end


"""
    diagonal_copy_out(out::Tensor, self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diagonal\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diagonal_copy_out(out::Tensor, self::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

    __cret = ccall((:atg_diagonal_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 out.pointer, self.pointer, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end


"""
    diagonal_scatter(self::Tensor, src::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diagonal\\_scatter(gc\\_tensor self, gc\\_tensor src, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diagonal_scatter(self::Tensor, src::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

    __cret = ccall((:atg_diagonal_scatter, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, src.pointer, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end


"""
    diagonal_scatter_out(out::Tensor, self::Tensor, src::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_diagonal\\_scatter\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor src, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function diagonal_scatter_out(out::Tensor, self::Tensor, src::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

    __cret = ccall((:atg_diagonal_scatter_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 out.pointer, self.pointer, src.pointer, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end
import Base.diff


"""
    diff(self::Tensor, n::Int64, dim::Int64, prepend::Tensor, append::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_diff(gc\\_tensor self, int64\\_t n, int64\\_t dim, gc\\_tensor prepend, gc\\_tensor append)
"""
function diff(self::Tensor, n::Int64, dim::Int64, prepend::Tensor, append::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_diff, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, n, dim, prepend.pointer, append.pointer)
    return tensor_from_ptr(__cret)
end


"""
    diff_out(out::Tensor, self::Tensor, n::Int64, dim::Int64, prepend::Tensor, append::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_diff\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t n, int64\\_t dim, gc\\_tensor prepend, gc\\_tensor append)
"""
function diff_out(out::Tensor, self::Tensor, n::Int64, dim::Int64, prepend::Tensor, append::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_diff_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, n, dim, prepend.pointer, append.pointer)
    return tensor_from_ptr(__cret)
end


"""
    digamma(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_digamma(gc\\_tensor self)
"""
function digamma(self::Tensor)

    __cret = ccall((:atg_digamma, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    digamma!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_digamma\\_(gc\\_tensor self)
"""
function digamma!(self::Tensor)

    __cret = ccall((:atg_digamma_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    digamma_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_digamma\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function digamma_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_digamma_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    dist(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_dist(gc\\_tensor self, gc\\_tensor other)
"""
function dist(self::Tensor, other::Tensor)

    __cret = ccall((:atg_dist, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    dist_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_dist\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function dist_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_dist_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    div(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_div(gc\\_tensor self, gc\\_tensor other)
"""
function div(self::Tensor, other::Tensor)

    __cret = ccall((:atg_div, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    div!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_div\\_(gc\\_tensor self, gc\\_tensor other)
"""
function div!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_div_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    div_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_div\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function div_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_div_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
# div_out_mode ignored



"""
    div_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_div\\_scalar(gc\\_tensor self, scalar other)
"""
function div_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_div_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    div_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_div\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function div_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_div_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end
# div_scalar_mode ignored

# div_scalar_mode_ ignored

# div_scalar_mode_out ignored



"""
    div_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_div\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function div_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_div_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end
# div_tensor_mode ignored

# div_tensor_mode_ ignored



"""
    divide(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_divide(gc\\_tensor self, gc\\_tensor other)
"""
function divide(self::Tensor, other::Tensor)

    __cret = ccall((:atg_divide, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    divide!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_divide\\_(gc\\_tensor self, gc\\_tensor other)
"""
function divide!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_divide_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    divide_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_divide\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function divide_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_divide_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
# divide_out_mode ignored



"""
    divide_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_divide\\_scalar(gc\\_tensor self, scalar other)
"""
function divide_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_divide_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    divide_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_divide\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function divide_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_divide_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end
# divide_scalar_mode ignored

# divide_scalar_mode_ ignored

# divide_tensor_mode ignored

# divide_tensor_mode_ ignored



"""
    dot(self::Tensor, tensor::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_dot(gc\\_tensor self, gc\\_tensor tensor)
"""
function dot(self::Tensor, tensor::Tensor)

    __cret = ccall((:atg_dot, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, tensor.pointer)
    return tensor_from_ptr(__cret)
end


"""
    dot_out(out::Tensor, self::Tensor, tensor::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_dot\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor tensor)
"""
function dot_out(out::Tensor, self::Tensor, tensor::Tensor)

    __cret = ccall((:atg_dot_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, tensor.pointer)
    return tensor_from_ptr(__cret)
end


"""
    dropout(input::Tensor, p::Float64, train::Int)

 Wrapper of C++ function raw\\_tensor atg\\_dropout(gc\\_tensor input, double p, int train)
"""
function dropout(input::Tensor, p::Float64, train::Int)

    __cret = ccall((:atg_dropout, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 input.pointer, p, train)
    return tensor_from_ptr(__cret)
end


"""
    dropout!(self::Tensor, p::Float64, train::Int)

 Wrapper of C++ function raw\\_tensor atg\\_dropout\\_(gc\\_tensor self, double p, int train)
"""
function dropout!(self::Tensor, p::Float64, train::Int)

    __cret = ccall((:atg_dropout_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, p, train)
    return tensor_from_ptr(__cret)
end


"""
    dsplit(self::Tensor, sections::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_dsplit(gc\\_tensor self, int64\\_t sections)
"""
function dsplit(self::Tensor, sections::Int64)

    __cret = ccall((:atg_dsplit, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong),
                 self.pointer, sections)
    return __cret
end


"""
    dsplit_array(self::Tensor, indices_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor *atg\\_dsplit\\_array(gc\\_tensor self, int64\\_t *indices\\_data, int indices\\_len)
"""
function dsplit_array(self::Tensor, indices_data::Array{Int64})
    indices_len = length(indices_data)
    __cret = ccall((:atg_dsplit_array, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, indices_data, indices_len)
    return __cret
end
# dstack ignored

# dstack_out ignored

# einsum ignored



"""
    elu(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_elu(gc\\_tensor self)
"""
function elu(self::Tensor)

    __cret = ccall((:atg_elu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    elu!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_elu\\_(gc\\_tensor self)
"""
function elu!(self::Tensor)

    __cret = ccall((:atg_elu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    elu_backward(grad_output::Tensor, alpha::TorchNumber, scale::TorchNumber, input_scale::TorchNumber, is_result::Int, self_or_result::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_elu\\_backward(gc\\_tensor grad\\_output, scalar alpha, scalar scale, scalar input\\_scale, int is\\_result, gc\\_tensor self\\_or\\_result)
"""
function elu_backward(grad_output::Tensor, alpha::TorchNumber, scale::TorchNumber, input_scale::TorchNumber, is_result::Int, self_or_result::Tensor)
    alpha_s_ = Scalar(alpha)
    scale_s_ = Scalar(scale)
    input_scale_s_ = Scalar(input_scale)
    __cret = ccall((:atg_elu_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 grad_output.pointer, alpha_s_.pointer, scale_s_.pointer, input_scale_s_.pointer, is_result, self_or_result.pointer)
    return tensor_from_ptr(__cret)
end


"""
    elu_backward_grad_input(grad_input::Tensor, grad_output::Tensor, alpha::TorchNumber, scale::TorchNumber, input_scale::TorchNumber, is_result::Int, self_or_result::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_elu\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, scalar alpha, scalar scale, scalar input\\_scale, int is\\_result, gc\\_tensor self\\_or\\_result)
"""
function elu_backward_grad_input(grad_input::Tensor, grad_output::Tensor, alpha::TorchNumber, scale::TorchNumber, input_scale::TorchNumber, is_result::Int, self_or_result::Tensor)
    alpha_s_ = Scalar(alpha)
    scale_s_ = Scalar(scale)
    input_scale_s_ = Scalar(input_scale)
    __cret = ccall((:atg_elu_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, alpha_s_.pointer, scale_s_.pointer, input_scale_s_.pointer, is_result, self_or_result.pointer)
    return tensor_from_ptr(__cret)
end


"""
    elu_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_elu\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function elu_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_elu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    embedding(weight::Tensor, indices::Tensor, padding_idx::Int64, scale_grad_by_freq::Int, sparse::Int)

 Wrapper of C++ function raw\\_tensor atg\\_embedding(gc\\_tensor weight, gc\\_tensor indices, int64\\_t padding\\_idx, int scale\\_grad\\_by\\_freq, int sparse)
"""
function embedding(weight::Tensor, indices::Tensor, padding_idx::Int64, scale_grad_by_freq::Int, sparse::Int)

    __cret = ccall((:atg_embedding, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Cint),
                 weight.pointer, indices.pointer, padding_idx, scale_grad_by_freq, sparse)
    return tensor_from_ptr(__cret)
end


"""
    embedding_backward(grad::Tensor, indices::Tensor, num_weights::Int64, padding_idx::Int64, scale_grad_by_freq::Int, sparse::Int)

 Wrapper of C++ function raw\\_tensor atg\\_embedding\\_backward(gc\\_tensor grad, gc\\_tensor indices, int64\\_t num\\_weights, int64\\_t padding\\_idx, int scale\\_grad\\_by\\_freq, int sparse)
"""
function embedding_backward(grad::Tensor, indices::Tensor, num_weights::Int64, padding_idx::Int64, scale_grad_by_freq::Int, sparse::Int)

    __cret = ccall((:atg_embedding_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint, Cint),
                 grad.pointer, indices.pointer, num_weights, padding_idx, scale_grad_by_freq, sparse)
    return tensor_from_ptr(__cret)
end
# embedding_bag ignored

# embedding_bag_padding_idx ignored



"""
    embedding_dense_backward(grad_output::Tensor, indices::Tensor, num_weights::Int64, padding_idx::Int64, scale_grad_by_freq::Int)

 Wrapper of C++ function raw\\_tensor atg\\_embedding\\_dense\\_backward(gc\\_tensor grad\\_output, gc\\_tensor indices, int64\\_t num\\_weights, int64\\_t padding\\_idx, int scale\\_grad\\_by\\_freq)
"""
function embedding_dense_backward(grad_output::Tensor, indices::Tensor, num_weights::Int64, padding_idx::Int64, scale_grad_by_freq::Int)

    __cret = ccall((:atg_embedding_dense_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 grad_output.pointer, indices.pointer, num_weights, padding_idx, scale_grad_by_freq)
    return tensor_from_ptr(__cret)
end


"""
    embedding_dense_backward_out(out::Tensor, grad_output::Tensor, indices::Tensor, num_weights::Int64, padding_idx::Int64, scale_grad_by_freq::Int)

 Wrapper of C++ function raw\\_tensor atg\\_embedding\\_dense\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor indices, int64\\_t num\\_weights, int64\\_t padding\\_idx, int scale\\_grad\\_by\\_freq)
"""
function embedding_dense_backward_out(out::Tensor, grad_output::Tensor, indices::Tensor, num_weights::Int64, padding_idx::Int64, scale_grad_by_freq::Int)

    __cret = ccall((:atg_embedding_dense_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 out.pointer, grad_output.pointer, indices.pointer, num_weights, padding_idx, scale_grad_by_freq)
    return tensor_from_ptr(__cret)
end


"""
    embedding_out(out::Tensor, weight::Tensor, indices::Tensor, padding_idx::Int64, scale_grad_by_freq::Int, sparse::Int)

 Wrapper of C++ function raw\\_tensor atg\\_embedding\\_out(gc\\_tensor out, gc\\_tensor weight, gc\\_tensor indices, int64\\_t padding\\_idx, int scale\\_grad\\_by\\_freq, int sparse)
"""
function embedding_out(out::Tensor, weight::Tensor, indices::Tensor, padding_idx::Int64, scale_grad_by_freq::Int, sparse::Int)

    __cret = ccall((:atg_embedding_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Cint),
                 out.pointer, weight.pointer, indices.pointer, padding_idx, scale_grad_by_freq, sparse)
    return tensor_from_ptr(__cret)
end


"""
    embedding_renorm(self::Tensor, indices::Tensor, max_norm::Float64, norm_type::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_embedding\\_renorm(gc\\_tensor self, gc\\_tensor indices, double max\\_norm, double norm\\_type)
"""
function embedding_renorm(self::Tensor, indices::Tensor, max_norm::Float64, norm_type::Float64)

    __cret = ccall((:atg_embedding_renorm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, indices.pointer, max_norm, norm_type)
    return tensor_from_ptr(__cret)
end


"""
    embedding_renorm!(self::Tensor, indices::Tensor, max_norm::Float64, norm_type::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_embedding\\_renorm\\_(gc\\_tensor self, gc\\_tensor indices, double max\\_norm, double norm\\_type)
"""
function embedding_renorm!(self::Tensor, indices::Tensor, max_norm::Float64, norm_type::Float64)

    __cret = ccall((:atg_embedding_renorm_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, indices.pointer, max_norm, norm_type)
    return tensor_from_ptr(__cret)
end


"""
    embedding_renorm_out(out::Tensor, self::Tensor, indices::Tensor, max_norm::Float64, norm_type::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_embedding\\_renorm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor indices, double max\\_norm, double norm\\_type)
"""
function embedding_renorm_out(out::Tensor, self::Tensor, indices::Tensor, max_norm::Float64, norm_type::Float64)

    __cret = ccall((:atg_embedding_renorm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble),
                 out.pointer, self.pointer, indices.pointer, max_norm, norm_type)
    return tensor_from_ptr(__cret)
end


"""
    embedding_sparse_backward(grad::Tensor, indices::Tensor, num_weights::Int64, padding_idx::Int64, scale_grad_by_freq::Int)

 Wrapper of C++ function raw\\_tensor atg\\_embedding\\_sparse\\_backward(gc\\_tensor grad, gc\\_tensor indices, int64\\_t num\\_weights, int64\\_t padding\\_idx, int scale\\_grad\\_by\\_freq)
"""
function embedding_sparse_backward(grad::Tensor, indices::Tensor, num_weights::Int64, padding_idx::Int64, scale_grad_by_freq::Int)

    __cret = ccall((:atg_embedding_sparse_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 grad.pointer, indices.pointer, num_weights, padding_idx, scale_grad_by_freq)
    return tensor_from_ptr(__cret)
end
import Base.empty


"""
    empty(size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_empty(int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function empty(size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_empty, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    empty_like(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_like(gc\\_tensor self)
"""
function empty_like(self::Tensor)

    __cret = ccall((:atg_empty_like, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    empty_like_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_like\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function empty_like_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_empty_like_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    empty_out(out::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len)
"""
function empty_out(out::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_empty_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    empty_permuted(size_data::Array{Int64}, physical_layout_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_permuted(int64\\_t *size\\_data, int size\\_len, int64\\_t *physical\\_layout\\_data, int physical\\_layout\\_len, int options\\_kind, int options\\_device)
"""
function empty_permuted(size_data::Array{Int64}, physical_layout_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    physical_layout_len = length(physical_layout_data)
    __cret = ccall((:atg_empty_permuted, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, physical_layout_data, physical_layout_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    empty_permuted_out(out::Tensor, size_data::Array{Int64}, physical_layout_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_permuted\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len, int64\\_t *physical\\_layout\\_data, int physical\\_layout\\_len)
"""
function empty_permuted_out(out::Tensor, size_data::Array{Int64}, physical_layout_data::Array{Int64})
    size_len = length(size_data)
    physical_layout_len = length(physical_layout_data)
    __cret = ccall((:atg_empty_permuted_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len, physical_layout_data, physical_layout_len)
    return tensor_from_ptr(__cret)
end


"""
    empty_quantized(size_data::Array{Int64}, qtensor::Tensor, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_quantized(int64\\_t *size\\_data, int size\\_len, gc\\_tensor qtensor, int options\\_kind, int options\\_device)
"""
function empty_quantized(size_data::Array{Int64}, qtensor::Tensor, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_empty_quantized, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 size_data, size_len, qtensor.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    empty_quantized_out(out::Tensor, size_data::Array{Int64}, qtensor::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_quantized\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len, gc\\_tensor qtensor)
"""
function empty_quantized_out(out::Tensor, size_data::Array{Int64}, qtensor::Tensor)
    size_len = length(size_data)
    __cret = ccall((:atg_empty_quantized_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 out.pointer, size_data, size_len, qtensor.pointer)
    return tensor_from_ptr(__cret)
end


"""
    empty_strided(size_data::Array{Int64}, stride_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_strided(int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int options\\_kind, int options\\_device)
"""
function empty_strided(size_data::Array{Int64}, stride_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_empty_strided, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, stride_data, stride_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    empty_strided_out(out::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_empty\\_strided\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function empty_strided_out(out::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_empty_strided_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    eq(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_eq(gc\\_tensor self, scalar other)
"""
function eq(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_eq, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    eq!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_eq\\_(gc\\_tensor self, scalar other)
"""
function eq!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_eq_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    eq_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_eq\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function eq_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_eq_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    eq_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_eq\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function eq_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_eq_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    eq_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_eq\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function eq_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_eq_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    eq_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_eq\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function eq_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_eq_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    equal(self::Tensor, other::Tensor)

 Wrapper of C++ function int atg\\_equal(gc\\_tensor self, gc\\_tensor other)
"""
function equal(self::Tensor, other::Tensor)

    __cret = ccall((:atg_equal, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return __cret
end


"""
    erf(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erf(gc\\_tensor self)
"""
function erf(self::Tensor)

    __cret = ccall((:atg_erf, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    erf!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erf\\_(gc\\_tensor self)
"""
function erf!(self::Tensor)

    __cret = ccall((:atg_erf_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    erf_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erf\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function erf_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_erf_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    erfc(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erfc(gc\\_tensor self)
"""
function erfc(self::Tensor)

    __cret = ccall((:atg_erfc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    erfc!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erfc\\_(gc\\_tensor self)
"""
function erfc!(self::Tensor)

    __cret = ccall((:atg_erfc_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    erfc_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erfc\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function erfc_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_erfc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    erfinv(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erfinv(gc\\_tensor self)
"""
function erfinv(self::Tensor)

    __cret = ccall((:atg_erfinv, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    erfinv!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erfinv\\_(gc\\_tensor self)
"""
function erfinv!(self::Tensor)

    __cret = ccall((:atg_erfinv_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    erfinv_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_erfinv\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function erfinv_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_erfinv_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.exp


"""
    exp(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_exp(gc\\_tensor self)
"""
function exp(self::Tensor)

    __cret = ccall((:atg_exp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.exp2


"""
    exp2(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_exp2(gc\\_tensor self)
"""
function exp2(self::Tensor)

    __cret = ccall((:atg_exp2, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    exp2!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_exp2\\_(gc\\_tensor self)
"""
function exp2!(self::Tensor)

    __cret = ccall((:atg_exp2_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    exp2_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_exp2\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function exp2_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_exp2_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    exp!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_exp\\_(gc\\_tensor self)
"""
function exp!(self::Tensor)

    __cret = ccall((:atg_exp_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    exp_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_exp\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function exp_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_exp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    expand(self::Tensor, size_data::Array{Int64}, implicit::Int)

 Wrapper of C++ function raw\\_tensor atg\\_expand(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int implicit)
"""
function expand(self::Tensor, size_data::Array{Int64}, implicit::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_expand, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, size_data, size_len, implicit)
    return tensor_from_ptr(__cret)
end


"""
    expand_as(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_expand\\_as(gc\\_tensor self, gc\\_tensor other)
"""
function expand_as(self::Tensor, other::Tensor)

    __cret = ccall((:atg_expand_as, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    expand_copy(self::Tensor, size_data::Array{Int64}, implicit::Int)

 Wrapper of C++ function raw\\_tensor atg\\_expand\\_copy(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int implicit)
"""
function expand_copy(self::Tensor, size_data::Array{Int64}, implicit::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_expand_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, size_data, size_len, implicit)
    return tensor_from_ptr(__cret)
end


"""
    expand_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64}, implicit::Int)

 Wrapper of C++ function raw\\_tensor atg\\_expand\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int implicit)
"""
function expand_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64}, implicit::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_expand_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, size_data, size_len, implicit)
    return tensor_from_ptr(__cret)
end
import Base.expm1


"""
    expm1(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_expm1(gc\\_tensor self)
"""
function expm1(self::Tensor)

    __cret = ccall((:atg_expm1, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    expm1!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_expm1\\_(gc\\_tensor self)
"""
function expm1!(self::Tensor)

    __cret = ccall((:atg_expm1_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    expm1_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_expm1\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function expm1_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_expm1_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    exponential(self::Tensor, lambd::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_exponential(gc\\_tensor self, double lambd)
"""
function exponential(self::Tensor, lambd::Float64)

    __cret = ccall((:atg_exponential, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble),
                 self.pointer, lambd)
    return tensor_from_ptr(__cret)
end


"""
    exponential!(self::Tensor, lambd::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_exponential\\_(gc\\_tensor self, double lambd)
"""
function exponential!(self::Tensor, lambd::Float64)

    __cret = ccall((:atg_exponential_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble),
                 self.pointer, lambd)
    return tensor_from_ptr(__cret)
end


"""
    exponential_out(out::Tensor, self::Tensor, lambd::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_exponential\\_out(gc\\_tensor out, gc\\_tensor self, double lambd)
"""
function exponential_out(out::Tensor, self::Tensor, lambd::Float64)

    __cret = ccall((:atg_exponential_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 out.pointer, self.pointer, lambd)
    return tensor_from_ptr(__cret)
end


"""
    eye(n::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_eye(int64\\_t n, int options\\_kind, int options\\_device)
"""
function eye(n::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_eye, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint),
                 n, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    eye_m(n::Int64, m::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_eye\\_m(int64\\_t n, int64\\_t m, int options\\_kind, int options\\_device)
"""
function eye_m(n::Int64, m::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_eye_m, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Clonglong, Cint, Cint),
                 n, m, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    eye_m_out(out::Tensor, n::Int64, m::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_eye\\_m\\_out(gc\\_tensor out, int64\\_t n, int64\\_t m)
"""
function eye_m_out(out::Tensor, n::Int64, m::Int64)

    __cret = ccall((:atg_eye_m_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, n, m)
    return tensor_from_ptr(__cret)
end


"""
    eye_out(out::Tensor, n::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_eye\\_out(gc\\_tensor out, int64\\_t n)
"""
function eye_out(out::Tensor, n::Int64)

    __cret = ccall((:atg_eye_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 out.pointer, n)
    return tensor_from_ptr(__cret)
end


"""
    fake_quantize_per_channel_affine(self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64, quant_min::Int64, quant_max::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_fake\\_quantize\\_per\\_channel\\_affine(gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int64\\_t axis, int64\\_t quant\\_min, int64\\_t quant\\_max)
"""
function fake_quantize_per_channel_affine(self::Tensor, scale::Tensor, zero_point::Tensor, axis::Int64, quant_min::Int64, quant_max::Int64)

    __cret = ccall((:atg_fake_quantize_per_channel_affine, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, scale.pointer, zero_point.pointer, axis, quant_min, quant_max)
    return tensor_from_ptr(__cret)
end
# fake_quantize_per_channel_affine_cachemask ignored



"""
    fake_quantize_per_channel_affine_cachemask_backward(grad::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fake\\_quantize\\_per\\_channel\\_affine\\_cachemask\\_backward(gc\\_tensor grad, gc\\_tensor mask)
"""
function fake_quantize_per_channel_affine_cachemask_backward(grad::Tensor, mask::Tensor)

    __cret = ccall((:atg_fake_quantize_per_channel_affine_cachemask_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end
# fake_quantize_per_channel_affine_cachemask_out ignored



"""
    fake_quantize_per_tensor_affine(self::Tensor, scale::Float64, zero_point::Int64, quant_min::Int64, quant_max::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_fake\\_quantize\\_per\\_tensor\\_affine(gc\\_tensor self, double scale, int64\\_t zero\\_point, int64\\_t quant\\_min, int64\\_t quant\\_max)
"""
function fake_quantize_per_tensor_affine(self::Tensor, scale::Float64, zero_point::Int64, quant_min::Int64, quant_max::Int64)

    __cret = ccall((:atg_fake_quantize_per_tensor_affine, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Clonglong, Clonglong, Clonglong),
                 self.pointer, scale, zero_point, quant_min, quant_max)
    return tensor_from_ptr(__cret)
end
# fake_quantize_per_tensor_affine_cachemask ignored



"""
    fake_quantize_per_tensor_affine_cachemask_backward(grad::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fake\\_quantize\\_per\\_tensor\\_affine\\_cachemask\\_backward(gc\\_tensor grad, gc\\_tensor mask)
"""
function fake_quantize_per_tensor_affine_cachemask_backward(grad::Tensor, mask::Tensor)

    __cret = ccall((:atg_fake_quantize_per_tensor_affine_cachemask_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end
# fake_quantize_per_tensor_affine_cachemask_out ignored



"""
    fake_quantize_per_tensor_affine_tensor_qparams(self::Tensor, scale::Tensor, zero_point::Tensor, quant_min::Int64, quant_max::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_fake\\_quantize\\_per\\_tensor\\_affine\\_tensor\\_qparams(gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int64\\_t quant\\_min, int64\\_t quant\\_max)
"""
function fake_quantize_per_tensor_affine_tensor_qparams(self::Tensor, scale::Tensor, zero_point::Tensor, quant_min::Int64, quant_max::Int64)

    __cret = ccall((:atg_fake_quantize_per_tensor_affine_tensor_qparams, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, scale.pointer, zero_point.pointer, quant_min, quant_max)
    return tensor_from_ptr(__cret)
end


"""
    fbgemm_linear_fp16_weight(input::Tensor, packed_weight::Tensor, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fbgemm\\_linear\\_fp16\\_weight(gc\\_tensor input, gc\\_tensor packed\\_weight, gc\\_tensor bias)
"""
function fbgemm_linear_fp16_weight(input::Tensor, packed_weight::Tensor, bias::Tensor)

    __cret = ccall((:atg_fbgemm_linear_fp16_weight, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, packed_weight.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fbgemm_linear_fp16_weight_fp32_activation(input::Tensor, packed_weight::Tensor, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fbgemm\\_linear\\_fp16\\_weight\\_fp32\\_activation(gc\\_tensor input, gc\\_tensor packed\\_weight, gc\\_tensor bias)
"""
function fbgemm_linear_fp16_weight_fp32_activation(input::Tensor, packed_weight::Tensor, bias::Tensor)

    __cret = ccall((:atg_fbgemm_linear_fp16_weight_fp32_activation, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, packed_weight.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fbgemm_linear_int8_weight(input::Tensor, weight::Tensor, packed::Tensor, col_offsets::Tensor, weight_scale::TorchNumber, weight_zero_point::TorchNumber, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fbgemm\\_linear\\_int8\\_weight(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor packed, gc\\_tensor col\\_offsets, scalar weight\\_scale, scalar weight\\_zero\\_point, gc\\_tensor bias)
"""
function fbgemm_linear_int8_weight(input::Tensor, weight::Tensor, packed::Tensor, col_offsets::Tensor, weight_scale::TorchNumber, weight_zero_point::TorchNumber, bias::Tensor)
    weight_scale_s_ = Scalar(weight_scale)
    weight_zero_point_s_ = Scalar(weight_zero_point)
    __cret = ccall((:atg_fbgemm_linear_int8_weight, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, weight.pointer, packed.pointer, col_offsets.pointer, weight_scale_s_.pointer, weight_zero_point_s_.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fbgemm_linear_int8_weight_fp32_activation(input::Tensor, weight::Tensor, packed::Tensor, col_offsets::Tensor, weight_scale::TorchNumber, weight_zero_point::TorchNumber, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fbgemm\\_linear\\_int8\\_weight\\_fp32\\_activation(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor packed, gc\\_tensor col\\_offsets, scalar weight\\_scale, scalar weight\\_zero\\_point, gc\\_tensor bias)
"""
function fbgemm_linear_int8_weight_fp32_activation(input::Tensor, weight::Tensor, packed::Tensor, col_offsets::Tensor, weight_scale::TorchNumber, weight_zero_point::TorchNumber, bias::Tensor)
    weight_scale_s_ = Scalar(weight_scale)
    weight_zero_point_s_ = Scalar(weight_zero_point)
    __cret = ccall((:atg_fbgemm_linear_int8_weight_fp32_activation, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, weight.pointer, packed.pointer, col_offsets.pointer, weight_scale_s_.pointer, weight_zero_point_s_.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fbgemm_pack_gemm_matrix_fp16(input::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fbgemm\\_pack\\_gemm\\_matrix\\_fp16(gc\\_tensor input)
"""
function fbgemm_pack_gemm_matrix_fp16(input::Tensor)

    __cret = ccall((:atg_fbgemm_pack_gemm_matrix_fp16, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 input.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fbgemm_pack_quantized_matrix(input::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fbgemm\\_pack\\_quantized\\_matrix(gc\\_tensor input)
"""
function fbgemm_pack_quantized_matrix(input::Tensor)

    __cret = ccall((:atg_fbgemm_pack_quantized_matrix, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 input.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fbgemm_pack_quantized_matrix_kn(input::Tensor, K::Int64, n::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_fbgemm\\_pack\\_quantized\\_matrix\\_kn(gc\\_tensor input, int64\\_t K, int64\\_t n)
"""
function fbgemm_pack_quantized_matrix_kn(input::Tensor, K::Int64, n::Int64)

    __cret = ccall((:atg_fbgemm_pack_quantized_matrix_kn, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 input.pointer, K, n)
    return tensor_from_ptr(__cret)
end


"""
    feature_alpha_dropout(input::Tensor, p::Float64, train::Int)

 Wrapper of C++ function raw\\_tensor atg\\_feature\\_alpha\\_dropout(gc\\_tensor input, double p, int train)
"""
function feature_alpha_dropout(input::Tensor, p::Float64, train::Int)

    __cret = ccall((:atg_feature_alpha_dropout, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 input.pointer, p, train)
    return tensor_from_ptr(__cret)
end


"""
    feature_alpha_dropout!(self::Tensor, p::Float64, train::Int)

 Wrapper of C++ function raw\\_tensor atg\\_feature\\_alpha\\_dropout\\_(gc\\_tensor self, double p, int train)
"""
function feature_alpha_dropout!(self::Tensor, p::Float64, train::Int)

    __cret = ccall((:atg_feature_alpha_dropout_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, p, train)
    return tensor_from_ptr(__cret)
end


"""
    feature_dropout(input::Tensor, p::Float64, train::Int)

 Wrapper of C++ function raw\\_tensor atg\\_feature\\_dropout(gc\\_tensor input, double p, int train)
"""
function feature_dropout(input::Tensor, p::Float64, train::Int)

    __cret = ccall((:atg_feature_dropout, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 input.pointer, p, train)
    return tensor_from_ptr(__cret)
end


"""
    feature_dropout!(self::Tensor, p::Float64, train::Int)

 Wrapper of C++ function raw\\_tensor atg\\_feature\\_dropout\\_(gc\\_tensor self, double p, int train)
"""
function feature_dropout!(self::Tensor, p::Float64, train::Int)

    __cret = ccall((:atg_feature_dropout_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, p, train)
    return tensor_from_ptr(__cret)
end
# fft_fft ignored

# fft_fft2 ignored

# fft_fft2_out ignored

# fft_fft_out ignored



"""
    fft_fftfreq(n::Int64, d::Float64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_fft\\_fftfreq(int64\\_t n, double d, int options\\_kind, int options\\_device)
"""
function fft_fftfreq(n::Int64, d::Float64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_fft_fftfreq, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cdouble, Cint, Cint),
                 n, d, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    fft_fftfreq_out(out::Tensor, n::Int64, d::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_fft\\_fftfreq\\_out(gc\\_tensor out, int64\\_t n, double d)
"""
function fft_fftfreq_out(out::Tensor, n::Int64, d::Float64)

    __cret = ccall((:atg_fft_fftfreq_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cdouble),
                 out.pointer, n, d)
    return tensor_from_ptr(__cret)
end
# fft_fftn ignored

# fft_fftn_out ignored



"""
    fft_fftshift(self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_fft\\_fftshift(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function fft_fftshift(self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg_fft_fftshift, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end
# fft_hfft ignored

# fft_hfft2 ignored

# fft_hfft2_out ignored

# fft_hfft_out ignored

# fft_hfftn ignored

# fft_hfftn_out ignored

# fft_ifft ignored

# fft_ifft2 ignored

# fft_ifft2_out ignored

# fft_ifft_out ignored

# fft_ifftn ignored

# fft_ifftn_out ignored



"""
    fft_ifftshift(self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_fft\\_ifftshift(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function fft_ifftshift(self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg_fft_ifftshift, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end
# fft_ihfft ignored

# fft_ihfft2 ignored

# fft_ihfft2_out ignored

# fft_ihfft_out ignored

# fft_ihfftn ignored

# fft_ihfftn_out ignored

# fft_irfft ignored

# fft_irfft2 ignored

# fft_irfft2_out ignored

# fft_irfft_out ignored

# fft_irfftn ignored

# fft_irfftn_out ignored

# fft_rfft ignored

# fft_rfft2 ignored

# fft_rfft2_out ignored

# fft_rfft_out ignored



"""
    fft_rfftfreq(n::Int64, d::Float64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_fft\\_rfftfreq(int64\\_t n, double d, int options\\_kind, int options\\_device)
"""
function fft_rfftfreq(n::Int64, d::Float64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_fft_rfftfreq, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cdouble, Cint, Cint),
                 n, d, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    fft_rfftfreq_out(out::Tensor, n::Int64, d::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_fft\\_rfftfreq\\_out(gc\\_tensor out, int64\\_t n, double d)
"""
function fft_rfftfreq_out(out::Tensor, n::Int64, d::Float64)

    __cret = ccall((:atg_fft_rfftfreq_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cdouble),
                 out.pointer, n, d)
    return tensor_from_ptr(__cret)
end
# fft_rfftn ignored

# fft_rfftn_out ignored

import Base.fill


"""
    fill(self::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_fill(gc\\_tensor self, scalar value)
"""
function fill(self::Tensor, value::TorchNumber)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_fill, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end
import Base.fill!


"""
    fill!(self::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_fill\\_(gc\\_tensor self, scalar value)
"""
function fill!(self::Tensor, value::TorchNumber)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_fill_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fill_diagonal!(self::Tensor, fill_value::TorchNumber, wrap::Int)

 Wrapper of C++ function raw\\_tensor atg\\_fill\\_diagonal\\_(gc\\_tensor self, scalar fill\\_value, int wrap)
"""
function fill_diagonal!(self::Tensor, fill_value::TorchNumber, wrap::Int)
    fill_value_s_ = Scalar(fill_value)
    __cret = ccall((:atg_fill_diagonal_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, fill_value_s_.pointer, wrap)
    return tensor_from_ptr(__cret)
end


"""
    fill_scalar_out(out::Tensor, self::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_fill\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar value)
"""
function fill_scalar_out(out::Tensor, self::Tensor, value::TorchNumber)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_fill_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fill_tensor(self::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fill\\_tensor(gc\\_tensor self, gc\\_tensor value)
"""
function fill_tensor(self::Tensor, value::Tensor)

    __cret = ccall((:atg_fill_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fill_tensor!(self::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fill\\_tensor\\_(gc\\_tensor self, gc\\_tensor value)
"""
function fill_tensor!(self::Tensor, value::Tensor)

    __cret = ccall((:atg_fill_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fill_tensor_out(out::Tensor, self::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fill\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor value)
"""
function fill_tensor_out(out::Tensor, self::Tensor, value::Tensor)

    __cret = ccall((:atg_fill_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fix(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fix(gc\\_tensor self)
"""
function fix(self::Tensor)

    __cret = ccall((:atg_fix, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fix!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fix\\_(gc\\_tensor self)
"""
function fix!(self::Tensor)

    __cret = ccall((:atg_fix_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fix_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fix\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function fix_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_fix_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    flatten(self::Tensor, start_dim::Int64, end_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_flatten(gc\\_tensor self, int64\\_t start\\_dim, int64\\_t end\\_dim)
"""
function flatten(self::Tensor, start_dim::Int64, end_dim::Int64)

    __cret = ccall((:atg_flatten, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, start_dim, end_dim)
    return tensor_from_ptr(__cret)
end
# flatten_dense_tensors ignored



"""
    flip(self::Tensor, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_flip(gc\\_tensor self, int64\\_t *dims\\_data, int dims\\_len)
"""
function flip(self::Tensor, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_flip, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    flip_out(out::Tensor, self::Tensor, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_flip\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dims\\_data, int dims\\_len)
"""
function flip_out(out::Tensor, self::Tensor, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_flip_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    fliplr(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fliplr(gc\\_tensor self)
"""
function fliplr(self::Tensor)

    __cret = ccall((:atg_fliplr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    flipud(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_flipud(gc\\_tensor self)
"""
function flipud(self::Tensor)

    __cret = ccall((:atg_flipud, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    float_power(self::Tensor, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_float\\_power(gc\\_tensor self, gc\\_tensor exponent)
"""
function float_power(self::Tensor, exponent::Tensor)

    __cret = ccall((:atg_float_power, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    float_power!(self::Tensor, exponent::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_float\\_power\\_(gc\\_tensor self, scalar exponent)
"""
function float_power!(self::Tensor, exponent::TorchNumber)
    exponent_s_ = Scalar(exponent)
    __cret = ccall((:atg_float_power_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, exponent_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    float_power_scalar(self::TorchNumber, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_float\\_power\\_scalar(scalar self, gc\\_tensor exponent)
"""
function float_power_scalar(self::TorchNumber, exponent::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_float_power_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    float_power_scalar_out(out::Tensor, self::TorchNumber, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_float\\_power\\_scalar\\_out(gc\\_tensor out, scalar self, gc\\_tensor exponent)
"""
function float_power_scalar_out(out::Tensor, self::TorchNumber, exponent::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_float_power_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    float_power_tensor!(self::Tensor, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_float\\_power\\_tensor\\_(gc\\_tensor self, gc\\_tensor exponent)
"""
function float_power_tensor!(self::Tensor, exponent::Tensor)

    __cret = ccall((:atg_float_power_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    float_power_tensor_scalar(self::Tensor, exponent::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_float\\_power\\_tensor\\_scalar(gc\\_tensor self, scalar exponent)
"""
function float_power_tensor_scalar(self::Tensor, exponent::TorchNumber)
    exponent_s_ = Scalar(exponent)
    __cret = ccall((:atg_float_power_tensor_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, exponent_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    float_power_tensor_scalar_out(out::Tensor, self::Tensor, exponent::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_float\\_power\\_tensor\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar exponent)
"""
function float_power_tensor_scalar_out(out::Tensor, self::Tensor, exponent::TorchNumber)
    exponent_s_ = Scalar(exponent)
    __cret = ccall((:atg_float_power_tensor_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, exponent_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    float_power_tensor_tensor_out(out::Tensor, self::Tensor, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_float\\_power\\_tensor\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor exponent)
"""
function float_power_tensor_tensor_out(out::Tensor, self::Tensor, exponent::Tensor)

    __cret = ccall((:atg_float_power_tensor_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end
import Base.floor


"""
    floor(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_floor(gc\\_tensor self)
"""
function floor(self::Tensor)

    __cret = ccall((:atg_floor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    floor!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_floor\\_(gc\\_tensor self)
"""
function floor!(self::Tensor)

    __cret = ccall((:atg_floor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    floor_divide(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_floor\\_divide(gc\\_tensor self, gc\\_tensor other)
"""
function floor_divide(self::Tensor, other::Tensor)

    __cret = ccall((:atg_floor_divide, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    floor_divide!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_floor\\_divide\\_(gc\\_tensor self, gc\\_tensor other)
"""
function floor_divide!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_floor_divide_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    floor_divide_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_floor\\_divide\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function floor_divide_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_floor_divide_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    floor_divide_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_floor\\_divide\\_scalar(gc\\_tensor self, scalar other)
"""
function floor_divide_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_floor_divide_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    floor_divide_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_floor\\_divide\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function floor_divide_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_floor_divide_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    floor_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_floor\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function floor_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_floor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmax(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fmax(gc\\_tensor self, gc\\_tensor other)
"""
function fmax(self::Tensor, other::Tensor)

    __cret = ccall((:atg_fmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmax_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fmax\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function fmax_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_fmax_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmin(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fmin(gc\\_tensor self, gc\\_tensor other)
"""
function fmin(self::Tensor, other::Tensor)

    __cret = ccall((:atg_fmin, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmin_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fmin\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function fmin_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_fmin_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmod(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_fmod(gc\\_tensor self, scalar other)
"""
function fmod(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_fmod, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmod!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_fmod\\_(gc\\_tensor self, scalar other)
"""
function fmod!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_fmod_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmod_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_fmod\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function fmod_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_fmod_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmod_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fmod\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function fmod_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_fmod_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmod_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fmod\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function fmod_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_fmod_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fmod_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fmod\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function fmod_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_fmod_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    frac(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_frac(gc\\_tensor self)
"""
function frac(self::Tensor)

    __cret = ccall((:atg_frac, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    frac!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_frac\\_(gc\\_tensor self)
"""
function frac!(self::Tensor)

    __cret = ccall((:atg_frac_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    frac_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_frac\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function frac_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_frac_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# fractional_max_pool2d ignored



"""
    fractional_max_pool2d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, output_size_data::Array{Int64}, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fractional\\_max\\_pool2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *output\\_size\\_data, int output\\_size\\_len, gc\\_tensor indices)
"""
function fractional_max_pool2d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, output_size_data::Array{Int64}, indices::Tensor)
    kernel_size_len = length(kernel_size_data)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_fractional_max_pool2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, output_size_data, output_size_len, indices.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fractional_max_pool2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, output_size_data::Array{Int64}, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fractional\\_max\\_pool2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *output\\_size\\_data, int output\\_size\\_len, gc\\_tensor indices)
"""
function fractional_max_pool2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, output_size_data::Array{Int64}, indices::Tensor)
    kernel_size_len = length(kernel_size_data)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_fractional_max_pool2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, output_size_data, output_size_len, indices.pointer)
    return tensor_from_ptr(__cret)
end
# fractional_max_pool2d_output ignored

# fractional_max_pool3d ignored



"""
    fractional_max_pool3d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, output_size_data::Array{Int64}, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fractional\\_max\\_pool3d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *output\\_size\\_data, int output\\_size\\_len, gc\\_tensor indices)
"""
function fractional_max_pool3d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, output_size_data::Array{Int64}, indices::Tensor)
    kernel_size_len = length(kernel_size_data)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_fractional_max_pool3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, output_size_data, output_size_len, indices.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fractional_max_pool3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, output_size_data::Array{Int64}, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_fractional\\_max\\_pool3d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *output\\_size\\_data, int output\\_size\\_len, gc\\_tensor indices)
"""
function fractional_max_pool3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, output_size_data::Array{Int64}, indices::Tensor)
    kernel_size_len = length(kernel_size_data)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_fractional_max_pool3d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, output_size_data, output_size_len, indices.pointer)
    return tensor_from_ptr(__cret)
end
# fractional_max_pool3d_output ignored

# frexp ignored

# frexp_tensor_out ignored



"""
    frobenius_norm(self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_frobenius\\_norm(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function frobenius_norm(self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_frobenius_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    frobenius_norm_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_frobenius\\_norm\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function frobenius_norm_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_frobenius_norm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end
# from_file ignored

# from_file_out ignored



"""
    full(size_data::Array{Int64}, fill_value::TorchNumber, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_full(int64\\_t *size\\_data, int size\\_len, scalar fill\\_value, int options\\_kind, int options\\_device)
"""
function full(size_data::Array{Int64}, fill_value::TorchNumber, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    fill_value_s_ = Scalar(fill_value)
    __cret = ccall((:atg_full, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 size_data, size_len, fill_value_s_.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    full_like(self::Tensor, fill_value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_full\\_like(gc\\_tensor self, scalar fill\\_value)
"""
function full_like(self::Tensor, fill_value::TorchNumber)
    fill_value_s_ = Scalar(fill_value)
    __cret = ccall((:atg_full_like, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, fill_value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    full_like_out(out::Tensor, self::Tensor, fill_value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_full\\_like\\_out(gc\\_tensor out, gc\\_tensor self, scalar fill\\_value)
"""
function full_like_out(out::Tensor, self::Tensor, fill_value::TorchNumber)
    fill_value_s_ = Scalar(fill_value)
    __cret = ccall((:atg_full_like_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, fill_value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    full_out(out::Tensor, size_data::Array{Int64}, fill_value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_full\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len, scalar fill\\_value)
"""
function full_out(out::Tensor, size_data::Array{Int64}, fill_value::TorchNumber)
    size_len = length(size_data)
    fill_value_s_ = Scalar(fill_value)
    __cret = ccall((:atg_full_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 out.pointer, size_data, size_len, fill_value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    fused_moving_avg_obs_fake_quant(self::Tensor, observer_on::Tensor, fake_quant_on::Tensor, running_min::Tensor, running_max::Tensor, scale::Tensor, zero_point::Tensor, averaging_const::Float64, quant_min::Int64, quant_max::Int64, ch_axis::Int64, per_row_fake_quant::Int, symmetric_quant::Int)

 Wrapper of C++ function raw\\_tensor atg\\_fused\\_moving\\_avg\\_obs\\_fake\\_quant(gc\\_tensor self, gc\\_tensor observer\\_on, gc\\_tensor fake\\_quant\\_on, gc\\_tensor running\\_min, gc\\_tensor running\\_max, gc\\_tensor scale, gc\\_tensor zero\\_point, double averaging\\_const, int64\\_t quant\\_min, int64\\_t quant\\_max, int64\\_t ch\\_axis, int per\\_row\\_fake\\_quant, int symmetric\\_quant)
"""
function fused_moving_avg_obs_fake_quant(self::Tensor, observer_on::Tensor, fake_quant_on::Tensor, running_min::Tensor, running_max::Tensor, scale::Tensor, zero_point::Tensor, averaging_const::Float64, quant_min::Int64, quant_max::Int64, ch_axis::Int64, per_row_fake_quant::Int, symmetric_quant::Int)

    __cret = ccall((:atg_fused_moving_avg_obs_fake_quant, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Clonglong, Clonglong, Clonglong, Cint, Cint),
                 self.pointer, observer_on.pointer, fake_quant_on.pointer, running_min.pointer, running_max.pointer, scale.pointer, zero_point.pointer, averaging_const, quant_min, quant_max, ch_axis, per_row_fake_quant, symmetric_quant)
    return tensor_from_ptr(__cret)
end


"""
    gather(self::Tensor, dim::Int64, index::Tensor, sparse_grad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_gather(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, int sparse\\_grad)
"""
function gather(self::Tensor, dim::Int64, index::Tensor, sparse_grad::Int)
    dim = dim - 1
    __cret = ccall((:atg_gather, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Cint),
                 self.pointer, dim, index.pointer, sparse_grad)
    return tensor_from_ptr(__cret)
end


"""
    gather_backward(grad::Tensor, self::Tensor, dim::Int64, index::Tensor, sparse_grad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_gather\\_backward(gc\\_tensor grad, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, int sparse\\_grad)
"""
function gather_backward(grad::Tensor, self::Tensor, dim::Int64, index::Tensor, sparse_grad::Int)
    dim = dim - 1
    __cret = ccall((:atg_gather_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Cint),
                 grad.pointer, self.pointer, dim, index.pointer, sparse_grad)
    return tensor_from_ptr(__cret)
end


"""
    gather_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, sparse_grad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_gather\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, int sparse\\_grad)
"""
function gather_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, sparse_grad::Int)
    dim = dim - 1
    __cret = ccall((:atg_gather_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dim, index.pointer, sparse_grad)
    return tensor_from_ptr(__cret)
end
import Base.gcd


"""
    gcd(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_gcd(gc\\_tensor self, gc\\_tensor other)
"""
function gcd(self::Tensor, other::Tensor)

    __cret = ccall((:atg_gcd, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    gcd!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_gcd\\_(gc\\_tensor self, gc\\_tensor other)
"""
function gcd!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_gcd_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    gcd_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_gcd\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function gcd_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_gcd_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ge(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_ge(gc\\_tensor self, scalar other)
"""
function ge(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_ge, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ge!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_ge\\_(gc\\_tensor self, scalar other)
"""
function ge!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_ge_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ge_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_ge\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function ge_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_ge_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ge_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ge\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function ge_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_ge_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ge_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ge\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function ge_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_ge_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ge_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ge\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function ge_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_ge_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
# gelu ignored

# gelu_ ignored

# gelu_backward ignored

# gelu_backward_grad_input ignored

# gelu_out ignored



"""
    geometric(self::Tensor, p::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_geometric(gc\\_tensor self, double p)
"""
function geometric(self::Tensor, p::Float64)

    __cret = ccall((:atg_geometric, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble),
                 self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    geometric!(self::Tensor, p::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_geometric\\_(gc\\_tensor self, double p)
"""
function geometric!(self::Tensor, p::Float64)

    __cret = ccall((:atg_geometric_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble),
                 self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    geometric_out(out::Tensor, self::Tensor, p::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_geometric\\_out(gc\\_tensor out, gc\\_tensor self, double p)
"""
function geometric_out(out::Tensor, self::Tensor, p::Float64)

    __cret = ccall((:atg_geometric_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 out.pointer, self.pointer, p)
    return tensor_from_ptr(__cret)
end
# geqrf ignored

# geqrf_a ignored



"""
    ger(self::Tensor, vec2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ger(gc\\_tensor self, gc\\_tensor vec2)
"""
function ger(self::Tensor, vec2::Tensor)

    __cret = ccall((:atg_ger, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, vec2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ger_out(out::Tensor, self::Tensor, vec2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ger\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor vec2)
"""
function ger_out(out::Tensor, self::Tensor, vec2::Tensor)

    __cret = ccall((:atg_ger_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, vec2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    glu(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_glu(gc\\_tensor self, int64\\_t dim)
"""
function glu(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_glu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    glu_backward(grad_output::Tensor, self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_glu\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t dim)
"""
function glu_backward(grad_output::Tensor, self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_glu_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_output.pointer, self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    glu_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_glu\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t dim)
"""
function glu_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_glu_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_input.pointer, grad_output.pointer, self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    glu_backward_jvp(grad_x::Tensor, grad_glu::Tensor, x::Tensor, dgrad_glu::Tensor, dx::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_glu\\_backward\\_jvp(gc\\_tensor grad\\_x, gc\\_tensor grad\\_glu, gc\\_tensor x, gc\\_tensor dgrad\\_glu, gc\\_tensor dx, int64\\_t dim)
"""
function glu_backward_jvp(grad_x::Tensor, grad_glu::Tensor, x::Tensor, dgrad_glu::Tensor, dx::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_glu_backward_jvp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_x.pointer, grad_glu.pointer, x.pointer, dgrad_glu.pointer, dx.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    glu_backward_jvp_out(out::Tensor, grad_x::Tensor, grad_glu::Tensor, x::Tensor, dgrad_glu::Tensor, dx::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_glu\\_backward\\_jvp\\_out(gc\\_tensor out, gc\\_tensor grad\\_x, gc\\_tensor grad\\_glu, gc\\_tensor x, gc\\_tensor dgrad\\_glu, gc\\_tensor dx, int64\\_t dim)
"""
function glu_backward_jvp_out(out::Tensor, grad_x::Tensor, grad_glu::Tensor, x::Tensor, dgrad_glu::Tensor, dx::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_glu_backward_jvp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, grad_x.pointer, grad_glu.pointer, x.pointer, dgrad_glu.pointer, dx.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    glu_jvp(glu::Tensor, x::Tensor, dx::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_glu\\_jvp(gc\\_tensor glu, gc\\_tensor x, gc\\_tensor dx, int64\\_t dim)
"""
function glu_jvp(glu::Tensor, x::Tensor, dx::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_glu_jvp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 glu.pointer, x.pointer, dx.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    glu_jvp_out(out::Tensor, glu::Tensor, x::Tensor, dx::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_glu\\_jvp\\_out(gc\\_tensor out, gc\\_tensor glu, gc\\_tensor x, gc\\_tensor dx, int64\\_t dim)
"""
function glu_jvp_out(out::Tensor, glu::Tensor, x::Tensor, dx::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_glu_jvp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, glu.pointer, x.pointer, dx.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    glu_out(out::Tensor, self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_glu\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim)
"""
function glu_out(out::Tensor, self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_glu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    grad(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_grad(gc\\_tensor self)
"""
function grad(self::Tensor)

    __cret = ccall((:atg_grad, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_greater(gc\\_tensor self, scalar other)
"""
function greater(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_greater, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_(gc\\_tensor self, scalar other)
"""
function greater!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_greater_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_equal(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_equal(gc\\_tensor self, scalar other)
"""
function greater_equal(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_greater_equal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_equal!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_equal\\_(gc\\_tensor self, scalar other)
"""
function greater_equal!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_greater_equal_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_equal_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_equal\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function greater_equal_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_greater_equal_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_equal_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_equal\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function greater_equal_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_greater_equal_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_equal_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_equal\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function greater_equal_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_greater_equal_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_equal_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_equal\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function greater_equal_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_greater_equal_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function greater_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_greater_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function greater_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_greater_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function greater_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_greater_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    greater_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_greater\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function greater_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_greater_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    grid_sampler(input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_grid\\_sampler(gc\\_tensor input, gc\\_tensor grid, int64\\_t interpolation\\_mode, int64\\_t padding\\_mode, int align\\_corners)
"""
function grid_sampler(input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

    __cret = ccall((:atg_grid_sampler, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 input.pointer, grid.pointer, interpolation_mode, padding_mode, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    grid_sampler_2d(input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_grid\\_sampler\\_2d(gc\\_tensor input, gc\\_tensor grid, int64\\_t interpolation\\_mode, int64\\_t padding\\_mode, int align\\_corners)
"""
function grid_sampler_2d(input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

    __cret = ccall((:atg_grid_sampler_2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 input.pointer, grid.pointer, interpolation_mode, padding_mode, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    grid_sampler_2d_out(out::Tensor, input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_grid\\_sampler\\_2d\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor grid, int64\\_t interpolation\\_mode, int64\\_t padding\\_mode, int align\\_corners)
"""
function grid_sampler_2d_out(out::Tensor, input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

    __cret = ccall((:atg_grid_sampler_2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 out.pointer, input.pointer, grid.pointer, interpolation_mode, padding_mode, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    grid_sampler_3d(input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_grid\\_sampler\\_3d(gc\\_tensor input, gc\\_tensor grid, int64\\_t interpolation\\_mode, int64\\_t padding\\_mode, int align\\_corners)
"""
function grid_sampler_3d(input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

    __cret = ccall((:atg_grid_sampler_3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 input.pointer, grid.pointer, interpolation_mode, padding_mode, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    grid_sampler_3d_out(out::Tensor, input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

 Wrapper of C++ function raw\\_tensor atg\\_grid\\_sampler\\_3d\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor grid, int64\\_t interpolation\\_mode, int64\\_t padding\\_mode, int align\\_corners)
"""
function grid_sampler_3d_out(out::Tensor, input::Tensor, grid::Tensor, interpolation_mode::Int64, padding_mode::Int64, align_corners::Int)

    __cret = ccall((:atg_grid_sampler_3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 out.pointer, input.pointer, grid.pointer, interpolation_mode, padding_mode, align_corners)
    return tensor_from_ptr(__cret)
end


"""
    group_norm(input::Tensor, num_groups::Int64, weight::Tensor, bias::Tensor, eps::Float64, cudnn_enabled::Int)

 Wrapper of C++ function raw\\_tensor atg\\_group\\_norm(gc\\_tensor input, int64\\_t num\\_groups, gc\\_tensor weight, gc\\_tensor bias, double eps, int cudnn\\_enabled)
"""
function group_norm(input::Tensor, num_groups::Int64, weight::Tensor, bias::Tensor, eps::Float64, cudnn_enabled::Int)

    __cret = ccall((:atg_group_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint),
                 input.pointer, num_groups, weight.pointer, bias.pointer, eps, cudnn_enabled)
    return tensor_from_ptr(__cret)
end
# gru ignored



"""
    gru_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_gru\\_cell(gc\\_tensor input, gc\\_tensor hx, gc\\_tensor w\\_ih, gc\\_tensor w\\_hh, gc\\_tensor b\\_ih, gc\\_tensor b\\_hh)
"""
function gru_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor)

    __cret = ccall((:atg_gru_cell, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, hx.pointer, w_ih.pointer, w_hh.pointer, b_ih.pointer, b_hh.pointer)
    return tensor_from_ptr(__cret)
end
# gru_data ignored



"""
    gt(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_gt(gc\\_tensor self, scalar other)
"""
function gt(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_gt, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    gt!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_gt\\_(gc\\_tensor self, scalar other)
"""
function gt!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_gt_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    gt_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_gt\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function gt_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_gt_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    gt_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_gt\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function gt_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_gt_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    gt_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_gt\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function gt_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_gt_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    gt_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_gt\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function gt_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_gt_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hamming_window(window_length::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_hamming\\_window(int64\\_t window\\_length, int options\\_kind, int options\\_device)
"""
function hamming_window(window_length::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_hamming_window, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint),
                 window_length, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    hamming_window_out(out::Tensor, window_length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_hamming\\_window\\_out(gc\\_tensor out, int64\\_t window\\_length)
"""
function hamming_window_out(out::Tensor, window_length::Int64)

    __cret = ccall((:atg_hamming_window_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 out.pointer, window_length)
    return tensor_from_ptr(__cret)
end


"""
    hamming_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_hamming\\_window\\_periodic(int64\\_t window\\_length, int periodic, int options\\_kind, int options\\_device)
"""
function hamming_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_hamming_window_periodic, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint, Cint),
                 window_length, periodic, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    hamming_window_periodic_alpha(window_length::Int64, periodic::Int, alpha::Float64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_hamming\\_window\\_periodic\\_alpha(int64\\_t window\\_length, int periodic, double alpha, int options\\_kind, int options\\_device)
"""
function hamming_window_periodic_alpha(window_length::Int64, periodic::Int, alpha::Float64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_hamming_window_periodic_alpha, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cdouble, Cint, Cint),
                 window_length, periodic, alpha, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    hamming_window_periodic_alpha_beta(window_length::Int64, periodic::Int, alpha::Float64, beta::Float64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_hamming\\_window\\_periodic\\_alpha\\_beta(int64\\_t window\\_length, int periodic, double alpha, double beta, int options\\_kind, int options\\_device)
"""
function hamming_window_periodic_alpha_beta(window_length::Int64, periodic::Int, alpha::Float64, beta::Float64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_hamming_window_periodic_alpha_beta, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cdouble, Cdouble, Cint, Cint),
                 window_length, periodic, alpha, beta, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    hamming_window_periodic_alpha_beta_out(out::Tensor, window_length::Int64, periodic::Int, alpha::Float64, beta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_hamming\\_window\\_periodic\\_alpha\\_beta\\_out(gc\\_tensor out, int64\\_t window\\_length, int periodic, double alpha, double beta)
"""
function hamming_window_periodic_alpha_beta_out(out::Tensor, window_length::Int64, periodic::Int, alpha::Float64, beta::Float64)

    __cret = ccall((:atg_hamming_window_periodic_alpha_beta_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Cdouble, Cdouble),
                 out.pointer, window_length, periodic, alpha, beta)
    return tensor_from_ptr(__cret)
end


"""
    hamming_window_periodic_alpha_out(out::Tensor, window_length::Int64, periodic::Int, alpha::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_hamming\\_window\\_periodic\\_alpha\\_out(gc\\_tensor out, int64\\_t window\\_length, int periodic, double alpha)
"""
function hamming_window_periodic_alpha_out(out::Tensor, window_length::Int64, periodic::Int, alpha::Float64)

    __cret = ccall((:atg_hamming_window_periodic_alpha_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Cdouble),
                 out.pointer, window_length, periodic, alpha)
    return tensor_from_ptr(__cret)
end


"""
    hamming_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_hamming\\_window\\_periodic\\_out(gc\\_tensor out, int64\\_t window\\_length, int periodic)
"""
function hamming_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

    __cret = ccall((:atg_hamming_window_periodic_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, window_length, periodic)
    return tensor_from_ptr(__cret)
end


"""
    hann_window(window_length::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_hann\\_window(int64\\_t window\\_length, int options\\_kind, int options\\_device)
"""
function hann_window(window_length::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_hann_window, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint),
                 window_length, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    hann_window_out(out::Tensor, window_length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_hann\\_window\\_out(gc\\_tensor out, int64\\_t window\\_length)
"""
function hann_window_out(out::Tensor, window_length::Int64)

    __cret = ccall((:atg_hann_window_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 out.pointer, window_length)
    return tensor_from_ptr(__cret)
end


"""
    hann_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_hann\\_window\\_periodic(int64\\_t window\\_length, int periodic, int options\\_kind, int options\\_device)
"""
function hann_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_hann_window_periodic, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint, Cint),
                 window_length, periodic, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    hann_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_hann\\_window\\_periodic\\_out(gc\\_tensor out, int64\\_t window\\_length, int periodic)
"""
function hann_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

    __cret = ccall((:atg_hann_window_periodic_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, window_length, periodic)
    return tensor_from_ptr(__cret)
end


"""
    hardshrink(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardshrink(gc\\_tensor self)
"""
function hardshrink(self::Tensor)

    __cret = ccall((:atg_hardshrink, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardshrink_backward(grad_out::Tensor, self::Tensor, lambd::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_hardshrink\\_backward(gc\\_tensor grad\\_out, gc\\_tensor self, scalar lambd)
"""
function hardshrink_backward(grad_out::Tensor, self::Tensor, lambd::TorchNumber)
    lambd_s_ = Scalar(lambd)
    __cret = ccall((:atg_hardshrink_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_out.pointer, self.pointer, lambd_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardshrink_backward_grad_input(grad_input::Tensor, grad_out::Tensor, self::Tensor, lambd::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_hardshrink\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_out, gc\\_tensor self, scalar lambd)
"""
function hardshrink_backward_grad_input(grad_input::Tensor, grad_out::Tensor, self::Tensor, lambd::TorchNumber)
    lambd_s_ = Scalar(lambd)
    __cret = ccall((:atg_hardshrink_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_out.pointer, self.pointer, lambd_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardshrink_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardshrink\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function hardshrink_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_hardshrink_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardsigmoid(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardsigmoid(gc\\_tensor self)
"""
function hardsigmoid(self::Tensor)

    __cret = ccall((:atg_hardsigmoid, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardsigmoid!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardsigmoid\\_(gc\\_tensor self)
"""
function hardsigmoid!(self::Tensor)

    __cret = ccall((:atg_hardsigmoid_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardsigmoid_backward(grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardsigmoid\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function hardsigmoid_backward(grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_hardsigmoid_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardsigmoid_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardsigmoid\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function hardsigmoid_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_hardsigmoid_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardsigmoid_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardsigmoid\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function hardsigmoid_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_hardsigmoid_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardswish(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardswish(gc\\_tensor self)
"""
function hardswish(self::Tensor)

    __cret = ccall((:atg_hardswish, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardswish!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardswish\\_(gc\\_tensor self)
"""
function hardswish!(self::Tensor)

    __cret = ccall((:atg_hardswish_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardswish_backward(grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardswish\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function hardswish_backward(grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_hardswish_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardswish_backward_out(out::Tensor, grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardswish\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function hardswish_backward_out(out::Tensor, grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_hardswish_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardswish_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardswish\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function hardswish_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_hardswish_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardtanh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardtanh(gc\\_tensor self)
"""
function hardtanh(self::Tensor)

    __cret = ccall((:atg_hardtanh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardtanh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardtanh\\_(gc\\_tensor self)
"""
function hardtanh!(self::Tensor)

    __cret = ccall((:atg_hardtanh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardtanh_backward(grad_output::Tensor, self::Tensor, min_val::TorchNumber, max_val::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_hardtanh\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, scalar min\\_val, scalar max\\_val)
"""
function hardtanh_backward(grad_output::Tensor, self::Tensor, min_val::TorchNumber, max_val::TorchNumber)
    min_val_s_ = Scalar(min_val)
    max_val_s_ = Scalar(max_val)
    __cret = ccall((:atg_hardtanh_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, min_val_s_.pointer, max_val_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardtanh_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, min_val::TorchNumber, max_val::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_hardtanh\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, scalar min\\_val, scalar max\\_val)
"""
function hardtanh_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, min_val::TorchNumber, max_val::TorchNumber)
    min_val_s_ = Scalar(min_val)
    max_val_s_ = Scalar(max_val)
    __cret = ccall((:atg_hardtanh_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, min_val_s_.pointer, max_val_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hardtanh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hardtanh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function hardtanh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_hardtanh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    heaviside(self::Tensor, values::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_heaviside(gc\\_tensor self, gc\\_tensor values)
"""
function heaviside(self::Tensor, values::Tensor)

    __cret = ccall((:atg_heaviside, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, values.pointer)
    return tensor_from_ptr(__cret)
end


"""
    heaviside!(self::Tensor, values::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_heaviside\\_(gc\\_tensor self, gc\\_tensor values)
"""
function heaviside!(self::Tensor, values::Tensor)

    __cret = ccall((:atg_heaviside_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, values.pointer)
    return tensor_from_ptr(__cret)
end


"""
    heaviside_out(out::Tensor, self::Tensor, values::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_heaviside\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor values)
"""
function heaviside_out(out::Tensor, self::Tensor, values::Tensor)

    __cret = ccall((:atg_heaviside_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, values.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hinge_embedding_loss(self::Tensor, target::Tensor, margin::Float64, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_hinge\\_embedding\\_loss(gc\\_tensor self, gc\\_tensor target, double margin, int64\\_t reduction)
"""
function hinge_embedding_loss(self::Tensor, target::Tensor, margin::Float64, reduction::Int64)

    __cret = ccall((:atg_hinge_embedding_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Clonglong),
                 self.pointer, target.pointer, margin, reduction)
    return tensor_from_ptr(__cret)
end


"""
    histc(self::Tensor, bins::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_histc(gc\\_tensor self, int64\\_t bins)
"""
function histc(self::Tensor, bins::Int64)

    __cret = ccall((:atg_histc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, bins)
    return tensor_from_ptr(__cret)
end


"""
    histc_out(out::Tensor, self::Tensor, bins::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_histc\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t bins)
"""
function histc_out(out::Tensor, self::Tensor, bins::Int64)

    __cret = ccall((:atg_histc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, bins)
    return tensor_from_ptr(__cret)
end


"""
    hsplit(self::Tensor, sections::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_hsplit(gc\\_tensor self, int64\\_t sections)
"""
function hsplit(self::Tensor, sections::Int64)

    __cret = ccall((:atg_hsplit, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong),
                 self.pointer, sections)
    return __cret
end


"""
    hsplit_array(self::Tensor, indices_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor *atg\\_hsplit\\_array(gc\\_tensor self, int64\\_t *indices\\_data, int indices\\_len)
"""
function hsplit_array(self::Tensor, indices_data::Array{Int64})
    indices_len = length(indices_data)
    __cret = ccall((:atg_hsplit_array, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, indices_data, indices_len)
    return __cret
end


"""
    hspmm(mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hspmm(gc\\_tensor mat1, gc\\_tensor mat2)
"""
function hspmm(mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_hspmm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hspmm_out(out::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hspmm\\_out(gc\\_tensor out, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function hspmm_out(out::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_hspmm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end
# hstack ignored

# hstack_out ignored



"""
    huber_loss(self::Tensor, target::Tensor, reduction::Int64, delta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_huber\\_loss(gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, double delta)
"""
function huber_loss(self::Tensor, target::Tensor, reduction::Int64, delta::Float64)

    __cret = ccall((:atg_huber_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 self.pointer, target.pointer, reduction, delta)
    return tensor_from_ptr(__cret)
end


"""
    huber_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, delta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_huber\\_loss\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, double delta)
"""
function huber_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, delta::Float64)

    __cret = ccall((:atg_huber_loss_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 grad_output.pointer, self.pointer, target.pointer, reduction, delta)
    return tensor_from_ptr(__cret)
end


"""
    huber_loss_backward_out(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, delta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_huber\\_loss\\_backward\\_out(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, double delta)
"""
function huber_loss_backward_out(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, delta::Float64)

    __cret = ccall((:atg_huber_loss_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, reduction, delta)
    return tensor_from_ptr(__cret)
end


"""
    huber_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64, delta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_huber\\_loss\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, double delta)
"""
function huber_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64, delta::Float64)

    __cret = ccall((:atg_huber_loss_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 out.pointer, self.pointer, target.pointer, reduction, delta)
    return tensor_from_ptr(__cret)
end
import Base.hypot


"""
    hypot(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hypot(gc\\_tensor self, gc\\_tensor other)
"""
function hypot(self::Tensor, other::Tensor)

    __cret = ccall((:atg_hypot, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hypot!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hypot\\_(gc\\_tensor self, gc\\_tensor other)
"""
function hypot!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_hypot_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    hypot_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_hypot\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function hypot_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_hypot_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    i0(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_i0(gc\\_tensor self)
"""
function i0(self::Tensor)

    __cret = ccall((:atg_i0, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    i0!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_i0\\_(gc\\_tensor self)
"""
function i0!(self::Tensor)

    __cret = ccall((:atg_i0_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    i0_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_i0\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function i0_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_i0_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    igamma(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_igamma(gc\\_tensor self, gc\\_tensor other)
"""
function igamma(self::Tensor, other::Tensor)

    __cret = ccall((:atg_igamma, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    igamma!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_igamma\\_(gc\\_tensor self, gc\\_tensor other)
"""
function igamma!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_igamma_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    igamma_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_igamma\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function igamma_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_igamma_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    igammac(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_igammac(gc\\_tensor self, gc\\_tensor other)
"""
function igammac(self::Tensor, other::Tensor)

    __cret = ccall((:atg_igammac, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    igammac!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_igammac\\_(gc\\_tensor self, gc\\_tensor other)
"""
function igammac!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_igammac_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    igammac_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_igammac\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function igammac_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_igammac_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    im2col(self::Tensor, kernel_size_data::Array{Int64}, dilation_data::Array{Int64}, padding_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_im2col(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function im2col(self::Tensor, kernel_size_data::Array{Int64}, dilation_data::Array{Int64}, padding_data::Array{Int64}, stride_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    dilation_len = length(dilation_data)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_im2col, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, dilation_data, dilation_len, padding_data, padding_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    im2col_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, dilation_data::Array{Int64}, padding_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_im2col\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function im2col_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, dilation_data::Array{Int64}, padding_data::Array{Int64}, stride_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    dilation_len = length(dilation_data)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_im2col_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, kernel_size_data, kernel_size_len, dilation_data, dilation_len, padding_data, padding_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end
import Base.imag


"""
    imag(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_imag(gc\\_tensor self)
"""
function imag(self::Tensor)

    __cret = ccall((:atg_imag, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# index ignored



"""
    index_add(self::Tensor, dim::Int64, index::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_add(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor source)
"""
function index_add(self::Tensor, dim::Int64, index::Tensor, source::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_add, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_add!(self::Tensor, dim::Int64, index::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_add\\_(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor source)
"""
function index_add!(self::Tensor, dim::Int64, index::Tensor, source::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_add_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_add_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_add\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor source)
"""
function index_add_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, source::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_add_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, dim, index.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_copy(self::Tensor, dim::Int64, index::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_copy(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor source)
"""
function index_copy(self::Tensor, dim::Int64, index::Tensor, source::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_copy!(self::Tensor, dim::Int64, index::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_copy\\_(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor source)
"""
function index_copy!(self::Tensor, dim::Int64, index::Tensor, source::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_copy_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_copy_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor source)
"""
function index_copy_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, source::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, dim, index.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_fill(self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_fill(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, scalar value)
"""
function index_fill(self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)
    dim = dim - 1
    value_s_ = Scalar(value)
    __cret = ccall((:atg_index_fill, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_fill!(self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_fill\\_(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, scalar value)
"""
function index_fill!(self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)
    dim = dim - 1
    value_s_ = Scalar(value)
    __cret = ccall((:atg_index_fill_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_fill_int_scalar_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_fill\\_int\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, scalar value)
"""
function index_fill_int_scalar_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)
    dim = dim - 1
    value_s_ = Scalar(value)
    __cret = ccall((:atg_index_fill_int_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, dim, index.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_fill_int_tensor(self::Tensor, dim::Int64, index::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_fill\\_int\\_tensor(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor value)
"""
function index_fill_int_tensor(self::Tensor, dim::Int64, index::Tensor, value::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_fill_int_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_fill_int_tensor!(self::Tensor, dim::Int64, index::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_fill\\_int\\_tensor\\_(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor value)
"""
function index_fill_int_tensor!(self::Tensor, dim::Int64, index::Tensor, value::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_fill_int_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_fill_int_tensor_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_fill\\_int\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor value)
"""
function index_fill_int_tensor_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, value::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_fill_int_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, dim, index.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end
# index_put ignored

# index_put_ ignored

# index_put_out ignored

# index_reduce ignored

# index_reduce_ ignored

# index_reduce_out ignored



"""
    index_select(self::Tensor, dim::Int64, index::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_select(gc\\_tensor self, int64\\_t dim, gc\\_tensor index)
"""
function index_select(self::Tensor, dim::Int64, index::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_select, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_select_backward(grad::Tensor, self_sizes_data::Array{Int64}, dim::Int64, index::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_select\\_backward(gc\\_tensor grad, int64\\_t *self\\_sizes\\_data, int self\\_sizes\\_len, int64\\_t dim, gc\\_tensor index)
"""
function index_select_backward(grad::Tensor, self_sizes_data::Array{Int64}, dim::Int64, index::Tensor)
    self_sizes_len = length(self_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_index_select_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Ptr{Cvoid}),
                 grad.pointer, self_sizes_data, self_sizes_len, dim, index.pointer)
    return tensor_from_ptr(__cret)
end


"""
    index_select_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_index\\_select\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index)
"""
function index_select_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_index_select_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 out.pointer, self.pointer, dim, index.pointer)
    return tensor_from_ptr(__cret)
end
# index_tensor_out ignored



"""
    indices(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_indices(gc\\_tensor self)
"""
function indices(self::Tensor)

    __cret = ccall((:atg_indices, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    indices_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_indices\\_copy(gc\\_tensor self)
"""
function indices_copy(self::Tensor)

    __cret = ccall((:atg_indices_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    indices_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_indices\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function indices_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_indices_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    infinitely_differentiable_gelu_backward(grad::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_infinitely\\_differentiable\\_gelu\\_backward(gc\\_tensor grad, gc\\_tensor self)
"""
function infinitely_differentiable_gelu_backward(grad::Tensor, self::Tensor)

    __cret = ccall((:atg_infinitely_differentiable_gelu_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    inner(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_inner(gc\\_tensor self, gc\\_tensor other)
"""
function inner(self::Tensor, other::Tensor)

    __cret = ccall((:atg_inner, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    inner_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_inner\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function inner_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_inner_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    instance_norm(input::Tensor, weight::Tensor, bias::Tensor, running_mean::Tensor, running_var::Tensor, use_input_stats::Int, momentum::Float64, eps::Float64, cudnn_enabled::Int)

 Wrapper of C++ function raw\\_tensor atg\\_instance\\_norm(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, gc\\_tensor running\\_mean, gc\\_tensor running\\_var, int use\\_input\\_stats, double momentum, double eps, int cudnn\\_enabled)
"""
function instance_norm(input::Tensor, weight::Tensor, bias::Tensor, running_mean::Tensor, running_var::Tensor, use_input_stats::Int, momentum::Float64, eps::Float64, cudnn_enabled::Int)

    __cret = ccall((:atg_instance_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cdouble, Cint),
                 input.pointer, weight.pointer, bias.pointer, running_mean.pointer, running_var.pointer, use_input_stats, momentum, eps, cudnn_enabled)
    return tensor_from_ptr(__cret)
end


"""
    int_repr(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_int\\_repr(gc\\_tensor self)
"""
function int_repr(self::Tensor)

    __cret = ccall((:atg_int_repr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    int_repr_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_int\\_repr\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function int_repr_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_int_repr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    inverse(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_inverse(gc\\_tensor self)
"""
function inverse(self::Tensor)

    __cret = ccall((:atg_inverse, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    inverse_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_inverse\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function inverse_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_inverse_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    is_coalesced(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_coalesced(gc\\_tensor self)
"""
function is_coalesced(self::Tensor)

    __cret = ccall((:atg_is_coalesced, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_complex(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_complex(gc\\_tensor self)
"""
function is_complex(self::Tensor)

    __cret = ccall((:atg_is_complex, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_conj(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_conj(gc\\_tensor self)
"""
function is_conj(self::Tensor)

    __cret = ccall((:atg_is_conj, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_distributed(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_distributed(gc\\_tensor self)
"""
function is_distributed(self::Tensor)

    __cret = ccall((:atg_is_distributed, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_floating_point(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_floating\\_point(gc\\_tensor self)
"""
function is_floating_point(self::Tensor)

    __cret = ccall((:atg_is_floating_point, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_inference(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_inference(gc\\_tensor self)
"""
function is_inference(self::Tensor)

    __cret = ccall((:atg_is_inference, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_leaf(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_leaf(gc\\_tensor self)
"""
function is_leaf(self::Tensor)

    __cret = ccall((:atg_is_leaf, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_neg(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_neg(gc\\_tensor self)
"""
function is_neg(self::Tensor)

    __cret = ccall((:atg_is_neg, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_nonzero(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_nonzero(gc\\_tensor self)
"""
function is_nonzero(self::Tensor)

    __cret = ccall((:atg_is_nonzero, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    is_pinned(self::Tensor, device::Int)

 Wrapper of C++ function int atg\\_is\\_pinned(gc\\_tensor self, int device)
"""
function is_pinned(self::Tensor, device::Int)

    __cret = ccall((:atg_is_pinned, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Cint),
                 self.pointer, device)
    return __cret
end


"""
    is_same_size(self::Tensor, other::Tensor)

 Wrapper of C++ function int atg\\_is\\_same\\_size(gc\\_tensor self, gc\\_tensor other)
"""
function is_same_size(self::Tensor, other::Tensor)

    __cret = ccall((:atg_is_same_size, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return __cret
end


"""
    is_set_to(self::Tensor, tensor::Tensor)

 Wrapper of C++ function int atg\\_is\\_set\\_to(gc\\_tensor self, gc\\_tensor tensor)
"""
function is_set_to(self::Tensor, tensor::Tensor)

    __cret = ccall((:atg_is_set_to, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, tensor.pointer)
    return __cret
end


"""
    is_signed(self::Tensor)

 Wrapper of C++ function int atg\\_is\\_signed(gc\\_tensor self)
"""
function is_signed(self::Tensor)

    __cret = ccall((:atg_is_signed, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    isclose(self::Tensor, other::Tensor, rtol::Float64, atol::Float64, equal_nan::Int)

 Wrapper of C++ function raw\\_tensor atg\\_isclose(gc\\_tensor self, gc\\_tensor other, double rtol, double atol, int equal\\_nan)
"""
function isclose(self::Tensor, other::Tensor, rtol::Float64, atol::Float64, equal_nan::Int)

    __cret = ccall((:atg_isclose, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble, Cint),
                 self.pointer, other.pointer, rtol, atol, equal_nan)
    return tensor_from_ptr(__cret)
end
import Base.isfinite


"""
    isfinite(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isfinite(gc\\_tensor self)
"""
function isfinite(self::Tensor)

    __cret = ccall((:atg_isfinite, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    isin(elements::Tensor, test_elements::Tensor, assume_unique::Int, invert::Int)

 Wrapper of C++ function raw\\_tensor atg\\_isin(gc\\_tensor elements, gc\\_tensor test\\_elements, int assume\\_unique, int invert)
"""
function isin(elements::Tensor, test_elements::Tensor, assume_unique::Int, invert::Int)

    __cret = ccall((:atg_isin, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 elements.pointer, test_elements.pointer, assume_unique, invert)
    return tensor_from_ptr(__cret)
end


"""
    isin_scalar_tensor(element::TorchNumber, test_elements::Tensor, assume_unique::Int, invert::Int)

 Wrapper of C++ function raw\\_tensor atg\\_isin\\_scalar\\_tensor(scalar element, gc\\_tensor test\\_elements, int assume\\_unique, int invert)
"""
function isin_scalar_tensor(element::TorchNumber, test_elements::Tensor, assume_unique::Int, invert::Int)
    element_s_ = Scalar(element)
    __cret = ccall((:atg_isin_scalar_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 element_s_.pointer, test_elements.pointer, assume_unique, invert)
    return tensor_from_ptr(__cret)
end


"""
    isin_scalar_tensor_out(out::Tensor, element::TorchNumber, test_elements::Tensor, assume_unique::Int, invert::Int)

 Wrapper of C++ function raw\\_tensor atg\\_isin\\_scalar\\_tensor\\_out(gc\\_tensor out, scalar element, gc\\_tensor test\\_elements, int assume\\_unique, int invert)
"""
function isin_scalar_tensor_out(out::Tensor, element::TorchNumber, test_elements::Tensor, assume_unique::Int, invert::Int)
    element_s_ = Scalar(element)
    __cret = ccall((:atg_isin_scalar_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, element_s_.pointer, test_elements.pointer, assume_unique, invert)
    return tensor_from_ptr(__cret)
end


"""
    isin_tensor_scalar(elements::Tensor, test_element::TorchNumber, assume_unique::Int, invert::Int)

 Wrapper of C++ function raw\\_tensor atg\\_isin\\_tensor\\_scalar(gc\\_tensor elements, scalar test\\_element, int assume\\_unique, int invert)
"""
function isin_tensor_scalar(elements::Tensor, test_element::TorchNumber, assume_unique::Int, invert::Int)
    test_element_s_ = Scalar(test_element)
    __cret = ccall((:atg_isin_tensor_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 elements.pointer, test_element_s_.pointer, assume_unique, invert)
    return tensor_from_ptr(__cret)
end


"""
    isin_tensor_scalar_out(out::Tensor, elements::Tensor, test_element::TorchNumber, assume_unique::Int, invert::Int)

 Wrapper of C++ function raw\\_tensor atg\\_isin\\_tensor\\_scalar\\_out(gc\\_tensor out, gc\\_tensor elements, scalar test\\_element, int assume\\_unique, int invert)
"""
function isin_tensor_scalar_out(out::Tensor, elements::Tensor, test_element::TorchNumber, assume_unique::Int, invert::Int)
    test_element_s_ = Scalar(test_element)
    __cret = ccall((:atg_isin_tensor_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, elements.pointer, test_element_s_.pointer, assume_unique, invert)
    return tensor_from_ptr(__cret)
end


"""
    isin_tensor_tensor_out(out::Tensor, elements::Tensor, test_elements::Tensor, assume_unique::Int, invert::Int)

 Wrapper of C++ function raw\\_tensor atg\\_isin\\_tensor\\_tensor\\_out(gc\\_tensor out, gc\\_tensor elements, gc\\_tensor test\\_elements, int assume\\_unique, int invert)
"""
function isin_tensor_tensor_out(out::Tensor, elements::Tensor, test_elements::Tensor, assume_unique::Int, invert::Int)

    __cret = ccall((:atg_isin_tensor_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, elements.pointer, test_elements.pointer, assume_unique, invert)
    return tensor_from_ptr(__cret)
end
import Base.isinf


"""
    isinf(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isinf(gc\\_tensor self)
"""
function isinf(self::Tensor)

    __cret = ccall((:atg_isinf, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    isinf_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isinf\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function isinf_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_isinf_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.isnan


"""
    isnan(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isnan(gc\\_tensor self)
"""
function isnan(self::Tensor)

    __cret = ccall((:atg_isnan, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    isnan_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isnan\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function isnan_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_isnan_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    isneginf(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isneginf(gc\\_tensor self)
"""
function isneginf(self::Tensor)

    __cret = ccall((:atg_isneginf, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    isneginf_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isneginf\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function isneginf_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_isneginf_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    isposinf(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isposinf(gc\\_tensor self)
"""
function isposinf(self::Tensor)

    __cret = ccall((:atg_isposinf, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    isposinf_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isposinf\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function isposinf_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_isposinf_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.isreal


"""
    isreal(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_isreal(gc\\_tensor self)
"""
function isreal(self::Tensor)

    __cret = ccall((:atg_isreal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    istft(self::Tensor, n_fft::Int64, hop_length_v::Int64, hop_length_null::Int, win_length_v::Int64, win_length_null::Int, window::Tensor, center::Int, normalized::Int, onesided::Int, length_v::Int64, length_null::Int, return_complex::Int)

 Wrapper of C++ function raw\\_tensor atg\\_istft(gc\\_tensor self, int64\\_t n\\_fft, int64\\_t hop\\_length\\_v, int hop\\_length\\_null, int64\\_t win\\_length\\_v, int win\\_length\\_null, gc\\_tensor window, int center, int normalized, int onesided, int64\\_t length\\_v, int length\\_null, int return\\_complex)
"""
function istft(self::Tensor, n_fft::Int64, hop_length_v::Int64, hop_length_null::Int, win_length_v::Int64, win_length_null::Int, window::Tensor, center::Int, normalized::Int, onesided::Int, length_v::Int64, length_null::Int, return_complex::Int)

    __cret = ccall((:atg_istft, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Cint, Clonglong, Cint, Ptr{Cvoid}, Cint, Cint, Cint, Clonglong, Cint, Cint),
                 self.pointer, n_fft, hop_length_v, hop_length_null, win_length_v, win_length_null, window.pointer, center, normalized, onesided, length_v, length_null, return_complex)
    return tensor_from_ptr(__cret)
end


"""
    kaiser_window(window_length::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_kaiser\\_window(int64\\_t window\\_length, int options\\_kind, int options\\_device)
"""
function kaiser_window(window_length::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_kaiser_window, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint),
                 window_length, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    kaiser_window_beta(window_length::Int64, periodic::Int, beta::Float64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_kaiser\\_window\\_beta(int64\\_t window\\_length, int periodic, double beta, int options\\_kind, int options\\_device)
"""
function kaiser_window_beta(window_length::Int64, periodic::Int, beta::Float64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_kaiser_window_beta, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cdouble, Cint, Cint),
                 window_length, periodic, beta, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    kaiser_window_beta_out(out::Tensor, window_length::Int64, periodic::Int, beta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_kaiser\\_window\\_beta\\_out(gc\\_tensor out, int64\\_t window\\_length, int periodic, double beta)
"""
function kaiser_window_beta_out(out::Tensor, window_length::Int64, periodic::Int, beta::Float64)

    __cret = ccall((:atg_kaiser_window_beta_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Cdouble),
                 out.pointer, window_length, periodic, beta)
    return tensor_from_ptr(__cret)
end


"""
    kaiser_window_out(out::Tensor, window_length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_kaiser\\_window\\_out(gc\\_tensor out, int64\\_t window\\_length)
"""
function kaiser_window_out(out::Tensor, window_length::Int64)

    __cret = ccall((:atg_kaiser_window_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 out.pointer, window_length)
    return tensor_from_ptr(__cret)
end


"""
    kaiser_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_kaiser\\_window\\_periodic(int64\\_t window\\_length, int periodic, int options\\_kind, int options\\_device)
"""
function kaiser_window_periodic(window_length::Int64, periodic::Int, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_kaiser_window_periodic, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint, Cint),
                 window_length, periodic, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    kaiser_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_kaiser\\_window\\_periodic\\_out(gc\\_tensor out, int64\\_t window\\_length, int periodic)
"""
function kaiser_window_periodic_out(out::Tensor, window_length::Int64, periodic::Int)

    __cret = ccall((:atg_kaiser_window_periodic_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, window_length, periodic)
    return tensor_from_ptr(__cret)
end


"""
    kl_div(self::Tensor, target::Tensor, reduction::Int64, log_target::Int)

 Wrapper of C++ function raw\\_tensor atg\\_kl\\_div(gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, int log\\_target)
"""
function kl_div(self::Tensor, target::Tensor, reduction::Int64, log_target::Int)

    __cret = ccall((:atg_kl_div, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, target.pointer, reduction, log_target)
    return tensor_from_ptr(__cret)
end
import Base.kron


"""
    kron(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_kron(gc\\_tensor self, gc\\_tensor other)
"""
function kron(self::Tensor, other::Tensor)

    __cret = ccall((:atg_kron, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    kron_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_kron\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function kron_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_kron_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
# kthvalue ignored

# kthvalue_values ignored



"""
    l1_loss(self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_l1\\_loss(gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function l1_loss(self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_l1_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    layer_norm(input::Tensor, normalized_shape_data::Array{Int64}, weight::Tensor, bias::Tensor, eps::Float64, cudnn_enable::Int)

 Wrapper of C++ function raw\\_tensor atg\\_layer\\_norm(gc\\_tensor input, int64\\_t *normalized\\_shape\\_data, int normalized\\_shape\\_len, gc\\_tensor weight, gc\\_tensor bias, double eps, int cudnn\\_enable)
"""
function layer_norm(input::Tensor, normalized_shape_data::Array{Int64}, weight::Tensor, bias::Tensor, eps::Float64, cudnn_enable::Int)
    normalized_shape_len = length(normalized_shape_data)
    __cret = ccall((:atg_layer_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint),
                 input.pointer, normalized_shape_data, normalized_shape_len, weight.pointer, bias.pointer, eps, cudnn_enable)
    return tensor_from_ptr(__cret)
end
import Base.lcm


"""
    lcm(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lcm(gc\\_tensor self, gc\\_tensor other)
"""
function lcm(self::Tensor, other::Tensor)

    __cret = ccall((:atg_lcm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lcm!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lcm\\_(gc\\_tensor self, gc\\_tensor other)
"""
function lcm!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_lcm_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lcm_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lcm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function lcm_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_lcm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
import Base.ldexp


"""
    ldexp(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ldexp(gc\\_tensor self, gc\\_tensor other)
"""
function ldexp(self::Tensor, other::Tensor)

    __cret = ccall((:atg_ldexp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ldexp!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ldexp\\_(gc\\_tensor self, gc\\_tensor other)
"""
function ldexp!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_ldexp_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ldexp_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ldexp\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function ldexp_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_ldexp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    le(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_le(gc\\_tensor self, scalar other)
"""
function le(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_le, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    le!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_le\\_(gc\\_tensor self, scalar other)
"""
function le!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_le_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    le_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_le\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function le_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_le_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    le_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_le\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function le_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_le_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    le_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_le\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function le_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_le_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    le_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_le\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function le_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_le_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    leaky_relu(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_leaky\\_relu(gc\\_tensor self)
"""
function leaky_relu(self::Tensor)

    __cret = ccall((:atg_leaky_relu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    leaky_relu!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_leaky\\_relu\\_(gc\\_tensor self)
"""
function leaky_relu!(self::Tensor)

    __cret = ccall((:atg_leaky_relu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    leaky_relu_backward(grad_output::Tensor, self::Tensor, negative_slope::TorchNumber, self_is_result::Int)

 Wrapper of C++ function raw\\_tensor atg\\_leaky\\_relu\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, scalar negative\\_slope, int self\\_is\\_result)
"""
function leaky_relu_backward(grad_output::Tensor, self::Tensor, negative_slope::TorchNumber, self_is_result::Int)
    negative_slope_s_ = Scalar(negative_slope)
    __cret = ccall((:atg_leaky_relu_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_output.pointer, self.pointer, negative_slope_s_.pointer, self_is_result)
    return tensor_from_ptr(__cret)
end


"""
    leaky_relu_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, negative_slope::TorchNumber, self_is_result::Int)

 Wrapper of C++ function raw\\_tensor atg\\_leaky\\_relu\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, scalar negative\\_slope, int self\\_is\\_result)
"""
function leaky_relu_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, negative_slope::TorchNumber, self_is_result::Int)
    negative_slope_s_ = Scalar(negative_slope)
    __cret = ccall((:atg_leaky_relu_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, negative_slope_s_.pointer, self_is_result)
    return tensor_from_ptr(__cret)
end


"""
    leaky_relu_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_leaky\\_relu\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function leaky_relu_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_leaky_relu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lerp(self::Tensor, end_::Tensor, weight::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_lerp(gc\\_tensor self, gc\\_tensor end, scalar weight)
"""
function lerp(self::Tensor, end_::Tensor, weight::TorchNumber)
    weight_s_ = Scalar(weight)
    __cret = ccall((:atg_lerp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, end_.pointer, weight_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lerp!(self::Tensor, end_::Tensor, weight::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_lerp\\_(gc\\_tensor self, gc\\_tensor end, scalar weight)
"""
function lerp!(self::Tensor, end_::Tensor, weight::TorchNumber)
    weight_s_ = Scalar(weight)
    __cret = ccall((:atg_lerp_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, end_.pointer, weight_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lerp_scalar_out(out::Tensor, self::Tensor, end_::Tensor, weight::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_lerp\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor end, scalar weight)
"""
function lerp_scalar_out(out::Tensor, self::Tensor, end_::Tensor, weight::TorchNumber)
    weight_s_ = Scalar(weight)
    __cret = ccall((:atg_lerp_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, end_.pointer, weight_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lerp_tensor(self::Tensor, end_::Tensor, weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lerp\\_tensor(gc\\_tensor self, gc\\_tensor end, gc\\_tensor weight)
"""
function lerp_tensor(self::Tensor, end_::Tensor, weight::Tensor)

    __cret = ccall((:atg_lerp_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, end_.pointer, weight.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lerp_tensor!(self::Tensor, end_::Tensor, weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lerp\\_tensor\\_(gc\\_tensor self, gc\\_tensor end, gc\\_tensor weight)
"""
function lerp_tensor!(self::Tensor, end_::Tensor, weight::Tensor)

    __cret = ccall((:atg_lerp_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, end_.pointer, weight.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lerp_tensor_out(out::Tensor, self::Tensor, end_::Tensor, weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lerp\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor end, gc\\_tensor weight)
"""
function lerp_tensor_out(out::Tensor, self::Tensor, end_::Tensor, weight::Tensor)

    __cret = ccall((:atg_lerp_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, end_.pointer, weight.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_less(gc\\_tensor self, scalar other)
"""
function less(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_less, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_(gc\\_tensor self, scalar other)
"""
function less!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_less_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_equal(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_equal(gc\\_tensor self, scalar other)
"""
function less_equal(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_less_equal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_equal!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_equal\\_(gc\\_tensor self, scalar other)
"""
function less_equal!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_less_equal_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_equal_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_equal\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function less_equal_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_less_equal_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_equal_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_equal\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function less_equal_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_less_equal_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_equal_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_equal\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function less_equal_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_less_equal_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_equal_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_equal\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function less_equal_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_less_equal_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function less_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_less_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function less_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_less_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function less_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_less_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    less_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_less\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function less_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_less_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lgamma(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lgamma(gc\\_tensor self)
"""
function lgamma(self::Tensor)

    __cret = ccall((:atg_lgamma, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lgamma!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lgamma\\_(gc\\_tensor self)
"""
function lgamma!(self::Tensor)

    __cret = ccall((:atg_lgamma_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lgamma_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lgamma\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function lgamma_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_lgamma_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lift(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lift(gc\\_tensor self)
"""
function lift(self::Tensor)

    __cret = ccall((:atg_lift, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lift_fresh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lift\\_fresh(gc\\_tensor self)
"""
function lift_fresh(self::Tensor)

    __cret = ccall((:atg_lift_fresh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lift_fresh_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lift\\_fresh\\_copy(gc\\_tensor self)
"""
function lift_fresh_copy(self::Tensor)

    __cret = ccall((:atg_lift_fresh_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lift_fresh_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lift\\_fresh\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function lift_fresh_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_lift_fresh_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lift_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lift\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function lift_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_lift_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_cholesky(self::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_cholesky(gc\\_tensor self, int upper)
"""
function linalg_cholesky(self::Tensor, upper::Int)

    __cret = ccall((:atg_linalg_cholesky, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, upper)
    return tensor_from_ptr(__cret)
end
# linalg_cholesky_ex ignored

# linalg_cholesky_ex_l ignored



"""
    linalg_cholesky_out(out::Tensor, self::Tensor, upper::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_cholesky\\_out(gc\\_tensor out, gc\\_tensor self, int upper)
"""
function linalg_cholesky_out(out::Tensor, self::Tensor, upper::Int)

    __cret = ccall((:atg_linalg_cholesky_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, upper)
    return tensor_from_ptr(__cret)
end


"""
    linalg_cond(self::Tensor, p::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_cond(gc\\_tensor self, scalar p)
"""
function linalg_cond(self::Tensor, p::TorchNumber)
    p_s_ = Scalar(p)
    __cret = ccall((:atg_linalg_cond, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, p_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_cond_out(out::Tensor, self::Tensor, p::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_cond\\_out(gc\\_tensor out, gc\\_tensor self, scalar p)
"""
function linalg_cond_out(out::Tensor, self::Tensor, p::TorchNumber)
    p_s_ = Scalar(p)
    __cret = ccall((:atg_linalg_cond_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, p_s_.pointer)
    return tensor_from_ptr(__cret)
end
# linalg_cond_p_str ignored

# linalg_cond_p_str_out ignored



"""
    linalg_cross(self::Tensor, other::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_cross(gc\\_tensor self, gc\\_tensor other, int64\\_t dim)
"""
function linalg_cross(self::Tensor, other::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_linalg_cross, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, other.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    linalg_cross_out(out::Tensor, self::Tensor, other::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_cross\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other, int64\\_t dim)
"""
function linalg_cross_out(out::Tensor, self::Tensor, other::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_linalg_cross_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, other.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    linalg_det(A::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_det(gc\\_tensor A)
"""
function linalg_det(A::Tensor)

    __cret = ccall((:atg_linalg_det, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 A.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_det_out(out::Tensor, A::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_det\\_out(gc\\_tensor out, gc\\_tensor A)
"""
function linalg_det_out(out::Tensor, A::Tensor)

    __cret = ccall((:atg_linalg_det_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, A.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_diagonal(A::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_diagonal(gc\\_tensor A, int64\\_t offset, int64\\_t dim1, int64\\_t dim2)
"""
function linalg_diagonal(A::Tensor, offset::Int64, dim1::Int64, dim2::Int64)

    __cret = ccall((:atg_linalg_diagonal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 A.pointer, offset, dim1, dim2)
    return tensor_from_ptr(__cret)
end
# linalg_eig ignored

# linalg_eig_out ignored

# linalg_eigh ignored

# linalg_eigh_eigvals ignored



"""
    linalg_eigvals(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_eigvals(gc\\_tensor self)
"""
function linalg_eigvals(self::Tensor)

    __cret = ccall((:atg_linalg_eigvals, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_eigvals_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_eigvals\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function linalg_eigvals_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_linalg_eigvals_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# linalg_eigvalsh ignored

# linalg_eigvalsh_out ignored



"""
    linalg_householder_product(input::Tensor, tau::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_householder\\_product(gc\\_tensor input, gc\\_tensor tau)
"""
function linalg_householder_product(input::Tensor, tau::Tensor)

    __cret = ccall((:atg_linalg_householder_product, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, tau.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_householder_product_out(out::Tensor, input::Tensor, tau::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_householder\\_product\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor tau)
"""
function linalg_householder_product_out(out::Tensor, input::Tensor, tau::Tensor)

    __cret = ccall((:atg_linalg_householder_product_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, input.pointer, tau.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_inv(A::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_inv(gc\\_tensor A)
"""
function linalg_inv(A::Tensor)

    __cret = ccall((:atg_linalg_inv, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 A.pointer)
    return tensor_from_ptr(__cret)
end
# linalg_inv_ex ignored

# linalg_inv_ex_inverse ignored



"""
    linalg_inv_out(out::Tensor, A::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_inv\\_out(gc\\_tensor out, gc\\_tensor A)
"""
function linalg_inv_out(out::Tensor, A::Tensor)

    __cret = ccall((:atg_linalg_inv_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, A.pointer)
    return tensor_from_ptr(__cret)
end
# linalg_ldl_factor ignored

# linalg_ldl_factor_ex ignored

# linalg_ldl_factor_ex_out ignored

# linalg_ldl_factor_out ignored



"""
    linalg_ldl_solve(LD::Tensor, pivots::Tensor, B::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_ldl\\_solve(gc\\_tensor LD, gc\\_tensor pivots, gc\\_tensor B, int hermitian)
"""
function linalg_ldl_solve(LD::Tensor, pivots::Tensor, B::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_ldl_solve, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 LD.pointer, pivots.pointer, B.pointer, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_ldl_solve_out(out::Tensor, LD::Tensor, pivots::Tensor, B::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_ldl\\_solve\\_out(gc\\_tensor out, gc\\_tensor LD, gc\\_tensor pivots, gc\\_tensor B, int hermitian)
"""
function linalg_ldl_solve_out(out::Tensor, LD::Tensor, pivots::Tensor, B::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_ldl_solve_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, LD.pointer, pivots.pointer, B.pointer, hermitian)
    return tensor_from_ptr(__cret)
end
# linalg_lstsq ignored

# linalg_lstsq_out ignored

# linalg_lu ignored

# linalg_lu_factor ignored

# linalg_lu_factor_ex ignored

# linalg_lu_factor_ex_out ignored

# linalg_lu_factor_out ignored

# linalg_lu_out ignored



"""
    linalg_lu_solve(LU::Tensor, pivots::Tensor, B::Tensor, left::Int, adjoint::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_lu\\_solve(gc\\_tensor LU, gc\\_tensor pivots, gc\\_tensor B, int left, int adjoint)
"""
function linalg_lu_solve(LU::Tensor, pivots::Tensor, B::Tensor, left::Int, adjoint::Int)

    __cret = ccall((:atg_linalg_lu_solve, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 LU.pointer, pivots.pointer, B.pointer, left, adjoint)
    return tensor_from_ptr(__cret)
end


"""
    linalg_lu_solve_out(out::Tensor, LU::Tensor, pivots::Tensor, B::Tensor, left::Int, adjoint::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_lu\\_solve\\_out(gc\\_tensor out, gc\\_tensor LU, gc\\_tensor pivots, gc\\_tensor B, int left, int adjoint)
"""
function linalg_lu_solve_out(out::Tensor, LU::Tensor, pivots::Tensor, B::Tensor, left::Int, adjoint::Int)

    __cret = ccall((:atg_linalg_lu_solve_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, LU.pointer, pivots.pointer, B.pointer, left, adjoint)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matmul(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matmul(gc\\_tensor self, gc\\_tensor other)
"""
function linalg_matmul(self::Tensor, other::Tensor)

    __cret = ccall((:atg_linalg_matmul, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matmul_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matmul\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function linalg_matmul_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_linalg_matmul_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_exp(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_exp(gc\\_tensor self)
"""
function linalg_matrix_exp(self::Tensor)

    __cret = ccall((:atg_linalg_matrix_exp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_exp_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_exp\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function linalg_matrix_exp_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_linalg_matrix_exp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_power(self::Tensor, n::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_power(gc\\_tensor self, int64\\_t n)
"""
function linalg_matrix_power(self::Tensor, n::Int64)

    __cret = ccall((:atg_linalg_matrix_power, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, n)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_power_out(out::Tensor, self::Tensor, n::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_power\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t n)
"""
function linalg_matrix_power_out(out::Tensor, self::Tensor, n::Int64)

    __cret = ccall((:atg_linalg_matrix_power_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, n)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_rank(self::Tensor, tol::Float64, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_rank(gc\\_tensor self, double tol, int hermitian)
"""
function linalg_matrix_rank(self::Tensor, tol::Float64, hermitian::Int)

    __cret = ccall((:atg_linalg_matrix_rank, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, tol, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_rank_atol_rtol_float(self::Tensor, atol_v::Float64, atol_null::Int, rtol_v::Float64, rtol_null::Int, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_rank\\_atol\\_rtol\\_float(gc\\_tensor self, double atol\\_v, int atol\\_null, double rtol\\_v, int rtol\\_null, int hermitian)
"""
function linalg_matrix_rank_atol_rtol_float(self::Tensor, atol_v::Float64, atol_null::Int, rtol_v::Float64, rtol_null::Int, hermitian::Int)

    __cret = ccall((:atg_linalg_matrix_rank_atol_rtol_float, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint, Cint),
                 self.pointer, atol_v, atol_null, rtol_v, rtol_null, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_rank_atol_rtol_float_out(out::Tensor, self::Tensor, atol_v::Float64, atol_null::Int, rtol_v::Float64, rtol_null::Int, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_rank\\_atol\\_rtol\\_float\\_out(gc\\_tensor out, gc\\_tensor self, double atol\\_v, int atol\\_null, double rtol\\_v, int rtol\\_null, int hermitian)
"""
function linalg_matrix_rank_atol_rtol_float_out(out::Tensor, self::Tensor, atol_v::Float64, atol_null::Int, rtol_v::Float64, rtol_null::Int, hermitian::Int)

    __cret = ccall((:atg_linalg_matrix_rank_atol_rtol_float_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint, Cint),
                 out.pointer, self.pointer, atol_v, atol_null, rtol_v, rtol_null, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_rank_atol_rtol_tensor(input::Tensor, atol::Tensor, rtol::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_rank\\_atol\\_rtol\\_tensor(gc\\_tensor input, gc\\_tensor atol, gc\\_tensor rtol, int hermitian)
"""
function linalg_matrix_rank_atol_rtol_tensor(input::Tensor, atol::Tensor, rtol::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_matrix_rank_atol_rtol_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 input.pointer, atol.pointer, rtol.pointer, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_rank_atol_rtol_tensor_out(out::Tensor, input::Tensor, atol::Tensor, rtol::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_rank\\_atol\\_rtol\\_tensor\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor atol, gc\\_tensor rtol, int hermitian)
"""
function linalg_matrix_rank_atol_rtol_tensor_out(out::Tensor, input::Tensor, atol::Tensor, rtol::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_matrix_rank_atol_rtol_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, input.pointer, atol.pointer, rtol.pointer, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_rank_out(out::Tensor, self::Tensor, tol::Float64, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_rank\\_out(gc\\_tensor out, gc\\_tensor self, double tol, int hermitian)
"""
function linalg_matrix_rank_out(out::Tensor, self::Tensor, tol::Float64, hermitian::Int)

    __cret = ccall((:atg_linalg_matrix_rank_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint),
                 out.pointer, self.pointer, tol, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_rank_out_tol_tensor(out::Tensor, input::Tensor, tol::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_rank\\_out\\_tol\\_tensor(gc\\_tensor out, gc\\_tensor input, gc\\_tensor tol, int hermitian)
"""
function linalg_matrix_rank_out_tol_tensor(out::Tensor, input::Tensor, tol::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_matrix_rank_out_tol_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, input.pointer, tol.pointer, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_matrix_rank_tol_tensor(input::Tensor, tol::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_matrix\\_rank\\_tol\\_tensor(gc\\_tensor input, gc\\_tensor tol, int hermitian)
"""
function linalg_matrix_rank_tol_tensor(input::Tensor, tol::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_matrix_rank_tol_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 input.pointer, tol.pointer, hermitian)
    return tensor_from_ptr(__cret)
end
# linalg_multi_dot ignored

# linalg_multi_dot_out ignored



"""
    linalg_pinv(self::Tensor, rcond::Float64, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_pinv(gc\\_tensor self, double rcond, int hermitian)
"""
function linalg_pinv(self::Tensor, rcond::Float64, hermitian::Int)

    __cret = ccall((:atg_linalg_pinv, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, rcond, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_pinv_atol_rtol_float(self::Tensor, atol_v::Float64, atol_null::Int, rtol_v::Float64, rtol_null::Int, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_pinv\\_atol\\_rtol\\_float(gc\\_tensor self, double atol\\_v, int atol\\_null, double rtol\\_v, int rtol\\_null, int hermitian)
"""
function linalg_pinv_atol_rtol_float(self::Tensor, atol_v::Float64, atol_null::Int, rtol_v::Float64, rtol_null::Int, hermitian::Int)

    __cret = ccall((:atg_linalg_pinv_atol_rtol_float, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint, Cint),
                 self.pointer, atol_v, atol_null, rtol_v, rtol_null, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_pinv_atol_rtol_float_out(out::Tensor, self::Tensor, atol_v::Float64, atol_null::Int, rtol_v::Float64, rtol_null::Int, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_pinv\\_atol\\_rtol\\_float\\_out(gc\\_tensor out, gc\\_tensor self, double atol\\_v, int atol\\_null, double rtol\\_v, int rtol\\_null, int hermitian)
"""
function linalg_pinv_atol_rtol_float_out(out::Tensor, self::Tensor, atol_v::Float64, atol_null::Int, rtol_v::Float64, rtol_null::Int, hermitian::Int)

    __cret = ccall((:atg_linalg_pinv_atol_rtol_float_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint, Cint),
                 out.pointer, self.pointer, atol_v, atol_null, rtol_v, rtol_null, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_pinv_atol_rtol_tensor(self::Tensor, atol::Tensor, rtol::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_pinv\\_atol\\_rtol\\_tensor(gc\\_tensor self, gc\\_tensor atol, gc\\_tensor rtol, int hermitian)
"""
function linalg_pinv_atol_rtol_tensor(self::Tensor, atol::Tensor, rtol::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_pinv_atol_rtol_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, atol.pointer, rtol.pointer, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_pinv_atol_rtol_tensor_out(out::Tensor, self::Tensor, atol::Tensor, rtol::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_pinv\\_atol\\_rtol\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor atol, gc\\_tensor rtol, int hermitian)
"""
function linalg_pinv_atol_rtol_tensor_out(out::Tensor, self::Tensor, atol::Tensor, rtol::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_pinv_atol_rtol_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, atol.pointer, rtol.pointer, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_pinv_out(out::Tensor, self::Tensor, rcond::Float64, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_pinv\\_out(gc\\_tensor out, gc\\_tensor self, double rcond, int hermitian)
"""
function linalg_pinv_out(out::Tensor, self::Tensor, rcond::Float64, hermitian::Int)

    __cret = ccall((:atg_linalg_pinv_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint),
                 out.pointer, self.pointer, rcond, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_pinv_out_rcond_tensor(out::Tensor, self::Tensor, rcond::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_pinv\\_out\\_rcond\\_tensor(gc\\_tensor out, gc\\_tensor self, gc\\_tensor rcond, int hermitian)
"""
function linalg_pinv_out_rcond_tensor(out::Tensor, self::Tensor, rcond::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_pinv_out_rcond_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, rcond.pointer, hermitian)
    return tensor_from_ptr(__cret)
end


"""
    linalg_pinv_rcond_tensor(self::Tensor, rcond::Tensor, hermitian::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_pinv\\_rcond\\_tensor(gc\\_tensor self, gc\\_tensor rcond, int hermitian)
"""
function linalg_pinv_rcond_tensor(self::Tensor, rcond::Tensor, hermitian::Int)

    __cret = ccall((:atg_linalg_pinv_rcond_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, rcond.pointer, hermitian)
    return tensor_from_ptr(__cret)
end
# linalg_qr ignored

# linalg_qr_out ignored

# linalg_slogdet ignored

# linalg_slogdet_out ignored



"""
    linalg_solve(A::Tensor, B::Tensor, left::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_solve(gc\\_tensor A, gc\\_tensor B, int left)
"""
function linalg_solve(A::Tensor, B::Tensor, left::Int)

    __cret = ccall((:atg_linalg_solve, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 A.pointer, B.pointer, left)
    return tensor_from_ptr(__cret)
end
# linalg_solve_ex ignored

# linalg_solve_ex_out ignored



"""
    linalg_solve_out(out::Tensor, A::Tensor, B::Tensor, left::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_solve\\_out(gc\\_tensor out, gc\\_tensor A, gc\\_tensor B, int left)
"""
function linalg_solve_out(out::Tensor, A::Tensor, B::Tensor, left::Int)

    __cret = ccall((:atg_linalg_solve_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, A.pointer, B.pointer, left)
    return tensor_from_ptr(__cret)
end


"""
    linalg_solve_triangular(self::Tensor, B::Tensor, upper::Int, left::Int, unitriangular::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_solve\\_triangular(gc\\_tensor self, gc\\_tensor B, int upper, int left, int unitriangular)
"""
function linalg_solve_triangular(self::Tensor, B::Tensor, upper::Int, left::Int, unitriangular::Int)

    __cret = ccall((:atg_linalg_solve_triangular, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, B.pointer, upper, left, unitriangular)
    return tensor_from_ptr(__cret)
end


"""
    linalg_solve_triangular_out(out::Tensor, self::Tensor, B::Tensor, upper::Int, left::Int, unitriangular::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_solve\\_triangular\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor B, int upper, int left, int unitriangular)
"""
function linalg_solve_triangular_out(out::Tensor, self::Tensor, B::Tensor, upper::Int, left::Int, unitriangular::Int)

    __cret = ccall((:atg_linalg_solve_triangular_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, B.pointer, upper, left, unitriangular)
    return tensor_from_ptr(__cret)
end
# linalg_svd ignored

# linalg_svd_u ignored

# linalg_svdvals ignored

# linalg_svdvals_out ignored



"""
    linalg_tensorinv(self::Tensor, ind::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_tensorinv(gc\\_tensor self, int64\\_t ind)
"""
function linalg_tensorinv(self::Tensor, ind::Int64)

    __cret = ccall((:atg_linalg_tensorinv, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, ind)
    return tensor_from_ptr(__cret)
end


"""
    linalg_tensorinv_out(out::Tensor, self::Tensor, ind::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_tensorinv\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t ind)
"""
function linalg_tensorinv_out(out::Tensor, self::Tensor, ind::Int64)

    __cret = ccall((:atg_linalg_tensorinv_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, ind)
    return tensor_from_ptr(__cret)
end


"""
    linalg_tensorsolve(self::Tensor, other::Tensor, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_tensorsolve(gc\\_tensor self, gc\\_tensor other, int64\\_t *dims\\_data, int dims\\_len)
"""
function linalg_tensorsolve(self::Tensor, other::Tensor, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_linalg_tensorsolve, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, other.pointer, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    linalg_tensorsolve_out(out::Tensor, self::Tensor, other::Tensor, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_tensorsolve\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other, int64\\_t *dims\\_data, int dims\\_len)
"""
function linalg_tensorsolve_out(out::Tensor, self::Tensor, other::Tensor, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_linalg_tensorsolve_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, other.pointer, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    linalg_vander(x::Tensor, n_v::Int64, n_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_vander(gc\\_tensor x, int64\\_t n\\_v, int n\\_null)
"""
function linalg_vander(x::Tensor, n_v::Int64, n_null::Int)

    __cret = ccall((:atg_linalg_vander, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 x.pointer, n_v, n_null)
    return tensor_from_ptr(__cret)
end


"""
    linalg_vecdot(x::Tensor, y::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_vecdot(gc\\_tensor x, gc\\_tensor y, int64\\_t dim)
"""
function linalg_vecdot(x::Tensor, y::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_linalg_vecdot, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 x.pointer, y.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    linalg_vecdot_out(out::Tensor, x::Tensor, y::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linalg\\_vecdot\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor y, int64\\_t dim)
"""
function linalg_vecdot_out(out::Tensor, x::Tensor, y::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_linalg_vecdot_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, x.pointer, y.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    linear(input::Tensor, weight::Tensor, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linear(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias)
"""
function linear(input::Tensor, weight::Tensor, bias::Tensor)

    __cret = ccall((:atg_linear, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, weight.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linear_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_linear\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias)
"""
function linear_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor)

    __cret = ccall((:atg_linear_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, input.pointer, weight.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    linspace(start::TorchNumber, end_::TorchNumber, steps::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_linspace(scalar start, scalar end, int64\\_t steps, int options\\_kind, int options\\_device)
"""
function linspace(start::TorchNumber, end_::TorchNumber, steps::Int64, options_kind::Int, options_device::Int)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_linspace, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Cint),
                 start_s_.pointer, end__s_.pointer, steps, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    linspace_out(out::Tensor, start::TorchNumber, end_::TorchNumber, steps::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_linspace\\_out(gc\\_tensor out, scalar start, scalar end, int64\\_t steps)
"""
function linspace_out(out::Tensor, start::TorchNumber, end_::TorchNumber, steps::Int64)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_linspace_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, start_s_.pointer, end__s_.pointer, steps)
    return tensor_from_ptr(__cret)
end
import Base.log


"""
    log(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log(gc\\_tensor self)
"""
function log(self::Tensor)

    __cret = ccall((:atg_log, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.log10


"""
    log10(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log10(gc\\_tensor self)
"""
function log10(self::Tensor)

    __cret = ccall((:atg_log10, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log10!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log10\\_(gc\\_tensor self)
"""
function log10!(self::Tensor)

    __cret = ccall((:atg_log10_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log10_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log10\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function log10_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_log10_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.log1p


"""
    log1p(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log1p(gc\\_tensor self)
"""
function log1p(self::Tensor)

    __cret = ccall((:atg_log1p, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log1p!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log1p\\_(gc\\_tensor self)
"""
function log1p!(self::Tensor)

    __cret = ccall((:atg_log1p_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log1p_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log1p\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function log1p_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_log1p_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.log2


"""
    log2(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log2(gc\\_tensor self)
"""
function log2(self::Tensor)

    __cret = ccall((:atg_log2, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log2!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log2\\_(gc\\_tensor self)
"""
function log2!(self::Tensor)

    __cret = ccall((:atg_log2_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log2_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log2\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function log2_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_log2_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_(gc\\_tensor self)
"""
function log!(self::Tensor)

    __cret = ccall((:atg_log_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log_normal(self::Tensor, mean::Float64, std::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_normal(gc\\_tensor self, double mean, double std)
"""
function log_normal(self::Tensor, mean::Float64, std::Float64)

    __cret = ccall((:atg_log_normal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, mean, std)
    return tensor_from_ptr(__cret)
end


"""
    log_normal!(self::Tensor, mean::Float64, std::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_normal\\_(gc\\_tensor self, double mean, double std)
"""
function log_normal!(self::Tensor, mean::Float64, std::Float64)

    __cret = ccall((:atg_log_normal_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, mean, std)
    return tensor_from_ptr(__cret)
end


"""
    log_normal_out(out::Tensor, self::Tensor, mean::Float64, std::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_normal\\_out(gc\\_tensor out, gc\\_tensor self, double mean, double std)
"""
function log_normal_out(out::Tensor, self::Tensor, mean::Float64, std::Float64)

    __cret = ccall((:atg_log_normal_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble),
                 out.pointer, self.pointer, mean, std)
    return tensor_from_ptr(__cret)
end


"""
    log_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function log_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_log_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log_sigmoid(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_sigmoid(gc\\_tensor self)
"""
function log_sigmoid(self::Tensor)

    __cret = ccall((:atg_log_sigmoid, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log_sigmoid_backward(grad_output::Tensor, self::Tensor, buffer::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_sigmoid\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor buffer)
"""
function log_sigmoid_backward(grad_output::Tensor, self::Tensor, buffer::Tensor)

    __cret = ccall((:atg_log_sigmoid_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, buffer.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log_sigmoid_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, buffer::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_sigmoid\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor buffer)
"""
function log_sigmoid_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, buffer::Tensor)

    __cret = ccall((:atg_log_sigmoid_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, buffer.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log_sigmoid_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_sigmoid\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function log_sigmoid_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_log_sigmoid_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    log_softmax(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_softmax(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function log_softmax(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_log_softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    log_softmax_int_out(out::Tensor, self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_log\\_softmax\\_int\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int dtype)
"""
function log_softmax_int_out(out::Tensor, self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_log_softmax_int_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    logaddexp(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logaddexp(gc\\_tensor self, gc\\_tensor other)
"""
function logaddexp(self::Tensor, other::Tensor)

    __cret = ccall((:atg_logaddexp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logaddexp2(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logaddexp2(gc\\_tensor self, gc\\_tensor other)
"""
function logaddexp2(self::Tensor, other::Tensor)

    __cret = ccall((:atg_logaddexp2, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logaddexp2_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logaddexp2\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function logaddexp2_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_logaddexp2_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logaddexp_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logaddexp\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function logaddexp_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_logaddexp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logcumsumexp(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_logcumsumexp(gc\\_tensor self, int64\\_t dim)
"""
function logcumsumexp(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_logcumsumexp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    logcumsumexp_out(out::Tensor, self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_logcumsumexp\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim)
"""
function logcumsumexp_out(out::Tensor, self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_logcumsumexp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    logdet(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logdet(gc\\_tensor self)
"""
function logdet(self::Tensor)

    __cret = ccall((:atg_logdet, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_and(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_and(gc\\_tensor self, gc\\_tensor other)
"""
function logical_and(self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_and, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_and!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_and\\_(gc\\_tensor self, gc\\_tensor other)
"""
function logical_and!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_and_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_and_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_and\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function logical_and_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_and_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_not(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_not(gc\\_tensor self)
"""
function logical_not(self::Tensor)

    __cret = ccall((:atg_logical_not, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_not!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_not\\_(gc\\_tensor self)
"""
function logical_not!(self::Tensor)

    __cret = ccall((:atg_logical_not_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_not_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_not\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function logical_not_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_logical_not_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_or(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_or(gc\\_tensor self, gc\\_tensor other)
"""
function logical_or(self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_or, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_or!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_or\\_(gc\\_tensor self, gc\\_tensor other)
"""
function logical_or!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_or_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_or_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_or\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function logical_or_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_or_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_xor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_xor(gc\\_tensor self, gc\\_tensor other)
"""
function logical_xor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_xor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_xor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_xor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function logical_xor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_xor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logical_xor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_logical\\_xor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function logical_xor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_logical_xor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    logit(self::Tensor, eps_v::Float64, eps_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_logit(gc\\_tensor self, double eps\\_v, int eps\\_null)
"""
function logit(self::Tensor, eps_v::Float64, eps_null::Int)

    __cret = ccall((:atg_logit, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, eps_v, eps_null)
    return tensor_from_ptr(__cret)
end


"""
    logit!(self::Tensor, eps_v::Float64, eps_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_logit\\_(gc\\_tensor self, double eps\\_v, int eps\\_null)
"""
function logit!(self::Tensor, eps_v::Float64, eps_null::Int)

    __cret = ccall((:atg_logit_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, eps_v, eps_null)
    return tensor_from_ptr(__cret)
end


"""
    logit_backward(grad_output::Tensor, self::Tensor, eps_v::Float64, eps_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_logit\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, double eps\\_v, int eps\\_null)
"""
function logit_backward(grad_output::Tensor, self::Tensor, eps_v::Float64, eps_null::Int)

    __cret = ccall((:atg_logit_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint),
                 grad_output.pointer, self.pointer, eps_v, eps_null)
    return tensor_from_ptr(__cret)
end


"""
    logit_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, eps_v::Float64, eps_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_logit\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, double eps\\_v, int eps\\_null)
"""
function logit_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, eps_v::Float64, eps_null::Int)

    __cret = ccall((:atg_logit_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, eps_v, eps_null)
    return tensor_from_ptr(__cret)
end


"""
    logit_out(out::Tensor, self::Tensor, eps_v::Float64, eps_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_logit\\_out(gc\\_tensor out, gc\\_tensor self, double eps\\_v, int eps\\_null)
"""
function logit_out(out::Tensor, self::Tensor, eps_v::Float64, eps_null::Int)

    __cret = ccall((:atg_logit_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint),
                 out.pointer, self.pointer, eps_v, eps_null)
    return tensor_from_ptr(__cret)
end


"""
    logspace(start::TorchNumber, end_::TorchNumber, steps::Int64, base::Float64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_logspace(scalar start, scalar end, int64\\_t steps, double base, int options\\_kind, int options\\_device)
"""
function logspace(start::TorchNumber, end_::TorchNumber, steps::Int64, base::Float64, options_kind::Int, options_device::Int)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_logspace, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble, Cint, Cint),
                 start_s_.pointer, end__s_.pointer, steps, base, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    logspace_out(out::Tensor, start::TorchNumber, end_::TorchNumber, steps::Int64, base::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_logspace\\_out(gc\\_tensor out, scalar start, scalar end, int64\\_t steps, double base)
"""
function logspace_out(out::Tensor, start::TorchNumber, end_::TorchNumber, steps::Int64, base::Float64)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_logspace_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 out.pointer, start_s_.pointer, end__s_.pointer, steps, base)
    return tensor_from_ptr(__cret)
end


"""
    logsumexp(self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_logsumexp(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function logsumexp(self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_logsumexp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    logsumexp_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_logsumexp\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function logsumexp_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_logsumexp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end
# lstm ignored

# lstm_cell ignored

# lstm_data ignored

# lstm_mps_backward ignored



"""
    lt(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_lt(gc\\_tensor self, scalar other)
"""
function lt(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_lt, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lt!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_lt\\_(gc\\_tensor self, scalar other)
"""
function lt!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_lt_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lt_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_lt\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function lt_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_lt_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lt_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lt\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function lt_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_lt_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lt_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lt\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function lt_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_lt_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lt_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lt\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function lt_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_lt_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lu_solve(self::Tensor, LU_data::Tensor, LU_pivots::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lu\\_solve(gc\\_tensor self, gc\\_tensor LU\\_data, gc\\_tensor LU\\_pivots)
"""
function lu_solve(self::Tensor, LU_data::Tensor, LU_pivots::Tensor)

    __cret = ccall((:atg_lu_solve, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, LU_data.pointer, LU_pivots.pointer)
    return tensor_from_ptr(__cret)
end


"""
    lu_solve_out(out::Tensor, self::Tensor, LU_data::Tensor, LU_pivots::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_lu\\_solve\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor LU\\_data, gc\\_tensor LU\\_pivots)
"""
function lu_solve_out(out::Tensor, self::Tensor, LU_data::Tensor, LU_pivots::Tensor)

    __cret = ccall((:atg_lu_solve_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, LU_data.pointer, LU_pivots.pointer)
    return tensor_from_ptr(__cret)
end
# lu_unpack ignored

# lu_unpack_out ignored



"""
    margin_ranking_loss(input1::Tensor, input2::Tensor, target::Tensor, margin::Float64, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_margin\\_ranking\\_loss(gc\\_tensor input1, gc\\_tensor input2, gc\\_tensor target, double margin, int64\\_t reduction)
"""
function margin_ranking_loss(input1::Tensor, input2::Tensor, target::Tensor, margin::Float64, reduction::Int64)

    __cret = ccall((:atg_margin_ranking_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Clonglong),
                 input1.pointer, input2.pointer, target.pointer, margin, reduction)
    return tensor_from_ptr(__cret)
end


"""
    masked_fill(self::Tensor, mask::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_fill(gc\\_tensor self, gc\\_tensor mask, scalar value)
"""
function masked_fill(self::Tensor, mask::Tensor, value::TorchNumber)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_masked_fill, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mask.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_fill!(self::Tensor, mask::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_fill\\_(gc\\_tensor self, gc\\_tensor mask, scalar value)
"""
function masked_fill!(self::Tensor, mask::Tensor, value::TorchNumber)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_masked_fill_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mask.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_fill_scalar_out(out::Tensor, self::Tensor, mask::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_fill\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mask, scalar value)
"""
function masked_fill_scalar_out(out::Tensor, self::Tensor, mask::Tensor, value::TorchNumber)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_masked_fill_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mask.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_fill_tensor(self::Tensor, mask::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_fill\\_tensor(gc\\_tensor self, gc\\_tensor mask, gc\\_tensor value)
"""
function masked_fill_tensor(self::Tensor, mask::Tensor, value::Tensor)

    __cret = ccall((:atg_masked_fill_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mask.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_fill_tensor!(self::Tensor, mask::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_fill\\_tensor\\_(gc\\_tensor self, gc\\_tensor mask, gc\\_tensor value)
"""
function masked_fill_tensor!(self::Tensor, mask::Tensor, value::Tensor)

    __cret = ccall((:atg_masked_fill_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mask.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_fill_tensor_out(out::Tensor, self::Tensor, mask::Tensor, value::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_fill\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mask, gc\\_tensor value)
"""
function masked_fill_tensor_out(out::Tensor, self::Tensor, mask::Tensor, value::Tensor)

    __cret = ccall((:atg_masked_fill_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mask.pointer, value.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_scatter(self::Tensor, mask::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_scatter(gc\\_tensor self, gc\\_tensor mask, gc\\_tensor source)
"""
function masked_scatter(self::Tensor, mask::Tensor, source::Tensor)

    __cret = ccall((:atg_masked_scatter, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mask.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_scatter!(self::Tensor, mask::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_scatter\\_(gc\\_tensor self, gc\\_tensor mask, gc\\_tensor source)
"""
function masked_scatter!(self::Tensor, mask::Tensor, source::Tensor)

    __cret = ccall((:atg_masked_scatter_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mask.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_scatter_out(out::Tensor, self::Tensor, mask::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_scatter\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mask, gc\\_tensor source)
"""
function masked_scatter_out(out::Tensor, self::Tensor, mask::Tensor, source::Tensor)

    __cret = ccall((:atg_masked_scatter_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mask.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_select(self::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_select(gc\\_tensor self, gc\\_tensor mask)
"""
function masked_select(self::Tensor, mask::Tensor)

    __cret = ccall((:atg_masked_select, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_select_backward(grad::Tensor, input::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_select\\_backward(gc\\_tensor grad, gc\\_tensor input, gc\\_tensor mask)
"""
function masked_select_backward(grad::Tensor, input::Tensor, mask::Tensor)

    __cret = ccall((:atg_masked_select_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad.pointer, input.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end


"""
    masked_select_out(out::Tensor, self::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_masked\\_select\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mask)
"""
function masked_select_out(out::Tensor, self::Tensor, mask::Tensor)

    __cret = ccall((:atg_masked_select_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end


"""
    matmul(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_matmul(gc\\_tensor self, gc\\_tensor other)
"""
function matmul(self::Tensor, other::Tensor)

    __cret = ccall((:atg_matmul, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    matmul_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_matmul\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function matmul_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_matmul_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    matrix_exp(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_matrix\\_exp(gc\\_tensor self)
"""
function matrix_exp(self::Tensor)

    __cret = ccall((:atg_matrix_exp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    matrix_exp_backward(self::Tensor, grad::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_matrix\\_exp\\_backward(gc\\_tensor self, gc\\_tensor grad)
"""
function matrix_exp_backward(self::Tensor, grad::Tensor)

    __cret = ccall((:atg_matrix_exp_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, grad.pointer)
    return tensor_from_ptr(__cret)
end


"""
    matrix_h(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_matrix\\_h(gc\\_tensor self)
"""
function matrix_h(self::Tensor)

    __cret = ccall((:atg_matrix_h, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    matrix_power(self::Tensor, n::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_matrix\\_power(gc\\_tensor self, int64\\_t n)
"""
function matrix_power(self::Tensor, n::Int64)

    __cret = ccall((:atg_matrix_power, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, n)
    return tensor_from_ptr(__cret)
end


"""
    matrix_power_out(out::Tensor, self::Tensor, n::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_matrix\\_power\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t n)
"""
function matrix_power_out(out::Tensor, self::Tensor, n::Int64)

    __cret = ccall((:atg_matrix_power_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, n)
    return tensor_from_ptr(__cret)
end
import Base.max


"""
    max(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_max(gc\\_tensor self)
"""
function max(self::Tensor)

    __cret = ccall((:atg_max, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# max_dim ignored

# max_dim_max ignored



"""
    max_other(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_other(gc\\_tensor self, gc\\_tensor other)
"""
function max_other(self::Tensor, other::Tensor)

    __cret = ccall((:atg_max_other, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    max_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function max_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_max_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    max_pool1d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool1d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function max_pool1d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end
# max_pool1d_with_indices ignored



"""
    max_pool2d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool2d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function max_pool2d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    max_pool2d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function max_pool2d_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    max_pool2d_backward_out(out::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool2d\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function max_pool2d_backward_out(out::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool2d_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end
# max_pool2d_with_indices ignored



"""
    max_pool2d_with_indices_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool2d\\_with\\_indices\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode, gc\\_tensor indices)
"""
function max_pool2d_with_indices_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int, indices::Tensor)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool2d_with_indices_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode, indices.pointer)
    return tensor_from_ptr(__cret)
end


"""
    max_pool2d_with_indices_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool2d\\_with\\_indices\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode, gc\\_tensor indices)
"""
function max_pool2d_with_indices_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int, indices::Tensor)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool2d_with_indices_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode, indices.pointer)
    return tensor_from_ptr(__cret)
end
# max_pool2d_with_indices_out ignored



"""
    max_pool3d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool3d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function max_pool3d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end
# max_pool3d_with_indices ignored



"""
    max_pool3d_with_indices_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool3d\\_with\\_indices\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode, gc\\_tensor indices)
"""
function max_pool3d_with_indices_backward(grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int, indices::Tensor)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool3d_with_indices_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode, indices.pointer)
    return tensor_from_ptr(__cret)
end


"""
    max_pool3d_with_indices_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int, indices::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_pool3d\\_with\\_indices\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode, gc\\_tensor indices)
"""
function max_pool3d_with_indices_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int, indices::Tensor)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_max_pool3d_with_indices_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode, indices.pointer)
    return tensor_from_ptr(__cret)
end
# max_pool3d_with_indices_out ignored



"""
    max_unary_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_max\\_unary\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function max_unary_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_max_unary_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    max_unpool2d(self::Tensor, indices::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_max\\_unpool2d(gc\\_tensor self, gc\\_tensor indices, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function max_unpool2d(self::Tensor, indices::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_max_unpool2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, indices.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    max_unpool2d_out(out::Tensor, self::Tensor, indices::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_max\\_unpool2d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor indices, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function max_unpool2d_out(out::Tensor, self::Tensor, indices::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_max_unpool2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, indices.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    max_unpool3d(self::Tensor, indices::Tensor, output_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_max\\_unpool3d(gc\\_tensor self, gc\\_tensor indices, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len)
"""
function max_unpool3d(self::Tensor, indices::Tensor, output_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64})
    output_size_len = length(output_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_max_unpool3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, indices.pointer, output_size_data, output_size_len, stride_data, stride_len, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    max_unpool3d_out(out::Tensor, self::Tensor, indices::Tensor, output_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_max\\_unpool3d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor indices, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len)
"""
function max_unpool3d_out(out::Tensor, self::Tensor, indices::Tensor, output_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64})
    output_size_len = length(output_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_max_unpool3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, indices.pointer, output_size_data, output_size_len, stride_data, stride_len, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end
import Base.maximum


"""
    maximum(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_maximum(gc\\_tensor self, gc\\_tensor other)
"""
function maximum(self::Tensor, other::Tensor)

    __cret = ccall((:atg_maximum, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    maximum_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_maximum\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function maximum_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_maximum_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mean(self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mean(gc\\_tensor self, int dtype)
"""
function mean(self::Tensor, dtype::Int)

    __cret = ccall((:atg_mean, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    mean_dim(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mean\\_dim(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function mean_dim(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_mean_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    mean_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mean\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function mean_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_mean_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    median(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_median(gc\\_tensor self)
"""
function median(self::Tensor)

    __cret = ccall((:atg_median, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# median_dim ignored

# median_dim_values ignored



"""
    median_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_median\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function median_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_median_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# meshgrid ignored

# meshgrid_indexing ignored



"""
    mh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mh(gc\\_tensor self)
"""
function mh(self::Tensor)

    __cret = ccall((:atg_mh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.min


"""
    min(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_min(gc\\_tensor self)
"""
function min(self::Tensor)

    __cret = ccall((:atg_min, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# min_dim ignored

# min_dim_min ignored



"""
    min_other(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_min\\_other(gc\\_tensor self, gc\\_tensor other)
"""
function min_other(self::Tensor, other::Tensor)

    __cret = ccall((:atg_min_other, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    min_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_min\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function min_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_min_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    min_unary_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_min\\_unary\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function min_unary_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_min_unary_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.minimum


"""
    minimum(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_minimum(gc\\_tensor self, gc\\_tensor other)
"""
function minimum(self::Tensor, other::Tensor)

    __cret = ccall((:atg_minimum, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    minimum_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_minimum\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function minimum_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_minimum_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
# miopen_batch_norm ignored

# miopen_batch_norm_backward ignored

# miopen_batch_norm_backward_out ignored

# miopen_batch_norm_out ignored



"""
    miopen_convolution(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_miopen\\_convolution(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic)
"""
function miopen_convolution(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_miopen_convolution, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint),
                 self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic)
    return tensor_from_ptr(__cret)
end


"""
    miopen_convolution_add_relu(self::Tensor, weight::Tensor, z::Tensor, alpha::TorchNumber, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_miopen\\_convolution\\_add\\_relu(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor z, scalar alpha, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function miopen_convolution_add_relu(self::Tensor, weight::Tensor, z::Tensor, alpha::TorchNumber, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    alpha_s_ = Scalar(alpha)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_miopen_convolution_add_relu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, weight.pointer, z.pointer, alpha_s_.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    miopen_convolution_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_miopen\\_convolution\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic)
"""
function miopen_convolution_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_miopen_convolution_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint),
                 out.pointer, self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic)
    return tensor_from_ptr(__cret)
end


"""
    miopen_convolution_relu(self::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_miopen\\_convolution\\_relu(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function miopen_convolution_relu(self::Tensor, weight::Tensor, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_miopen_convolution_relu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, weight.pointer, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    miopen_convolution_transpose(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_miopen\\_convolution\\_transpose(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic)
"""
function miopen_convolution_transpose(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_miopen_convolution_transpose, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint),
                 self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, output_padding_data, output_padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic)
    return tensor_from_ptr(__cret)
end


"""
    miopen_convolution_transpose_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_miopen\\_convolution\\_transpose\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic)
"""
function miopen_convolution_transpose_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, output_padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_miopen_convolution_transpose_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint),
                 out.pointer, self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, output_padding_data, output_padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic)
    return tensor_from_ptr(__cret)
end


"""
    miopen_depthwise_convolution(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_miopen\\_depthwise\\_convolution(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic)
"""
function miopen_depthwise_convolution(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_miopen_depthwise_convolution, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint),
                 self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic)
    return tensor_from_ptr(__cret)
end


"""
    miopen_depthwise_convolution_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)

 Wrapper of C++ function raw\\_tensor atg\\_miopen\\_depthwise\\_convolution\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int benchmark, int deterministic)
"""
function miopen_depthwise_convolution_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, benchmark::Int, deterministic::Int)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_miopen_depthwise_convolution_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Cint, Cint),
                 out.pointer, self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, benchmark, deterministic)
    return tensor_from_ptr(__cret)
end
# miopen_rnn ignored

# miopen_rnn_out ignored



"""
    mish(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mish(gc\\_tensor self)
"""
function mish(self::Tensor)

    __cret = ccall((:atg_mish, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mish!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mish\\_(gc\\_tensor self)
"""
function mish!(self::Tensor)

    __cret = ccall((:atg_mish_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mish_backward(grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mish\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function mish_backward(grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_mish_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mish_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mish\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function mish_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_mish_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_adaptive_avg_pool2d(self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_adaptive\\_avg\\_pool2d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function mkldnn_adaptive_avg_pool2d(self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_mkldnn_adaptive_avg_pool2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_adaptive_avg_pool2d_backward(grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_adaptive\\_avg\\_pool2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function mkldnn_adaptive_avg_pool2d_backward(grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_mkldnn_adaptive_avg_pool2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_adaptive_avg_pool2d_backward_out(out::Tensor, grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_adaptive\\_avg\\_pool2d\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function mkldnn_adaptive_avg_pool2d_backward_out(out::Tensor, grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_mkldnn_adaptive_avg_pool2d_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_adaptive_avg_pool2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_adaptive\\_avg\\_pool2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function mkldnn_adaptive_avg_pool2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_mkldnn_adaptive_avg_pool2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_convolution(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_convolution(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function mkldnn_convolution(self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_convolution, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_convolution_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_convolution\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function mkldnn_convolution_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_convolution_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, self.pointer, weight.pointer, bias.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_linear(self::Tensor, weight::Tensor, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_linear(gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias)
"""
function mkldnn_linear(self::Tensor, weight::Tensor, bias::Tensor)

    __cret = ccall((:atg_mkldnn_linear, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, weight.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_linear_backward_input(input_size_data::Array{Int64}, grad_output::Tensor, weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_linear\\_backward\\_input(int64\\_t *input\\_size\\_data, int input\\_size\\_len, gc\\_tensor grad\\_output, gc\\_tensor weight)
"""
function mkldnn_linear_backward_input(input_size_data::Array{Int64}, grad_output::Tensor, weight::Tensor)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_mkldnn_linear_backward_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}),
                 input_size_data, input_size_len, grad_output.pointer, weight.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_linear_backward_input_out(out::Tensor, input_size_data::Array{Int64}, grad_output::Tensor, weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_linear\\_backward\\_input\\_out(gc\\_tensor out, int64\\_t *input\\_size\\_data, int input\\_size\\_len, gc\\_tensor grad\\_output, gc\\_tensor weight)
"""
function mkldnn_linear_backward_input_out(out::Tensor, input_size_data::Array{Int64}, grad_output::Tensor, weight::Tensor)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_mkldnn_linear_backward_input_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, input_size_data, input_size_len, grad_output.pointer, weight.pointer)
    return tensor_from_ptr(__cret)
end
# mkldnn_linear_backward_weights ignored

# mkldnn_linear_backward_weights_out ignored



"""
    mkldnn_linear_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_linear\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, gc\\_tensor bias)
"""
function mkldnn_linear_out(out::Tensor, self::Tensor, weight::Tensor, bias::Tensor)

    __cret = ccall((:atg_mkldnn_linear_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, weight.pointer, bias.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_max_pool2d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_max\\_pool2d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function mkldnn_max_pool2d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_max_pool2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_max_pool2d_backward(grad_output::Tensor, output::Tensor, input::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_max\\_pool2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor output, gc\\_tensor input, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function mkldnn_max_pool2d_backward(grad_output::Tensor, output::Tensor, input::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_max_pool2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 grad_output.pointer, output.pointer, input.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_max_pool2d_backward_out(out::Tensor, grad_output::Tensor, output::Tensor, input::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_max\\_pool2d\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor output, gc\\_tensor input, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function mkldnn_max_pool2d_backward_out(out::Tensor, grad_output::Tensor, output::Tensor, input::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_max_pool2d_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, grad_output.pointer, output.pointer, input.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_max_pool2d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_max\\_pool2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function mkldnn_max_pool2d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_max_pool2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_max_pool3d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_max\\_pool3d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function mkldnn_max_pool3d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_max_pool3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_max_pool3d_backward(grad_output::Tensor, output::Tensor, input::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_max\\_pool3d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor output, gc\\_tensor input, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function mkldnn_max_pool3d_backward(grad_output::Tensor, output::Tensor, input::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_max_pool3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 grad_output.pointer, output.pointer, input.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_max_pool3d_backward_out(out::Tensor, grad_output::Tensor, output::Tensor, input::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_max\\_pool3d\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor output, gc\\_tensor input, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function mkldnn_max_pool3d_backward_out(out::Tensor, grad_output::Tensor, output::Tensor, input::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_max_pool3d_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, grad_output.pointer, output.pointer, input.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_max_pool3d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_max\\_pool3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function mkldnn_max_pool3d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_max_pool3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_reorder_conv2d_weight(self::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, input_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_reorder\\_conv2d\\_weight(gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int64\\_t *input\\_size\\_data, int input\\_size\\_len)
"""
function mkldnn_reorder_conv2d_weight(self::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, input_size_data::Array{Int64})
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_mkldnn_reorder_conv2d_weight, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Ptr{Cvoid}, Cint),
                 self.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, input_size_data, input_size_len)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_reorder_conv2d_weight_out(out::Tensor, self::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, input_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_reorder\\_conv2d\\_weight\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups, int64\\_t *input\\_size\\_data, int input\\_size\\_len)
"""
function mkldnn_reorder_conv2d_weight_out(out::Tensor, self::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64, input_size_data::Array{Int64})
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_mkldnn_reorder_conv2d_weight_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups, input_size_data, input_size_len)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_reorder_conv3d_weight(self::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_reorder\\_conv3d\\_weight(gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function mkldnn_reorder_conv3d_weight(self::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_reorder_conv3d_weight, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end


"""
    mkldnn_reorder_conv3d_weight_out(out::Tensor, self::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mkldnn\\_reorder\\_conv3d\\_weight\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int64\\_t groups)
"""
function mkldnn_reorder_conv3d_weight_out(out::Tensor, self::Tensor, padding_data::Array{Int64}, stride_data::Array{Int64}, dilation_data::Array{Int64}, groups::Int64)
    padding_len = length(padding_data)
    stride_len = length(stride_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_mkldnn_reorder_conv3d_weight_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Clonglong),
                 out.pointer, self.pointer, padding_data, padding_len, stride_data, stride_len, dilation_data, dilation_len, groups)
    return tensor_from_ptr(__cret)
end
# mkldnn_rnn_layer ignored

# mkldnn_rnn_layer_backward ignored

# mkldnn_rnn_layer_backward_out ignored

# mkldnn_rnn_layer_out ignored



"""
    mm(self::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mm(gc\\_tensor self, gc\\_tensor mat2)
"""
function mm(self::Tensor, mat2::Tensor)

    __cret = ccall((:atg_mm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mm_out(out::Tensor, self::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat2)
"""
function mm_out(out::Tensor, self::Tensor, mat2::Tensor)

    __cret = ccall((:atg_mm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end
# mode ignored

# mode_values ignored



"""
    moveaxis(self::Tensor, source_data::Array{Int64}, destination_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_moveaxis(gc\\_tensor self, int64\\_t *source\\_data, int source\\_len, int64\\_t *destination\\_data, int destination\\_len)
"""
function moveaxis(self::Tensor, source_data::Array{Int64}, destination_data::Array{Int64})
    source_len = length(source_data)
    destination_len = length(destination_data)
    __cret = ccall((:atg_moveaxis, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, source_data, source_len, destination_data, destination_len)
    return tensor_from_ptr(__cret)
end


"""
    moveaxis_int(self::Tensor, source::Int64, destination::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_moveaxis\\_int(gc\\_tensor self, int64\\_t source, int64\\_t destination)
"""
function moveaxis_int(self::Tensor, source::Int64, destination::Int64)

    __cret = ccall((:atg_moveaxis_int, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, source, destination)
    return tensor_from_ptr(__cret)
end


"""
    movedim(self::Tensor, source_data::Array{Int64}, destination_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_movedim(gc\\_tensor self, int64\\_t *source\\_data, int source\\_len, int64\\_t *destination\\_data, int destination\\_len)
"""
function movedim(self::Tensor, source_data::Array{Int64}, destination_data::Array{Int64})
    source_len = length(source_data)
    destination_len = length(destination_data)
    __cret = ccall((:atg_movedim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, source_data, source_len, destination_data, destination_len)
    return tensor_from_ptr(__cret)
end


"""
    movedim_int(self::Tensor, source::Int64, destination::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_movedim\\_int(gc\\_tensor self, int64\\_t source, int64\\_t destination)
"""
function movedim_int(self::Tensor, source::Int64, destination::Int64)

    __cret = ccall((:atg_movedim_int, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, source, destination)
    return tensor_from_ptr(__cret)
end


"""
    mse_loss(self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mse\\_loss(gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function mse_loss(self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_mse_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    mse_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mse\\_loss\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function mse_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_mse_loss_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_output.pointer, self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    mse_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mse\\_loss\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function mse_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_mse_loss_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    mse_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mse\\_loss\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function mse_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_mse_loss_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    msort(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_msort(gc\\_tensor self)
"""
function msort(self::Tensor)

    __cret = ccall((:atg_msort, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    msort_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_msort\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function msort_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_msort_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mt(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mt(gc\\_tensor self)
"""
function mt(self::Tensor)

    __cret = ccall((:atg_mt, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mul(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mul(gc\\_tensor self, gc\\_tensor other)
"""
function mul(self::Tensor, other::Tensor)

    __cret = ccall((:atg_mul, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mul!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mul\\_(gc\\_tensor self, gc\\_tensor other)
"""
function mul!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_mul_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mul_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mul\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function mul_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_mul_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mul_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_mul\\_scalar(gc\\_tensor self, scalar other)
"""
function mul_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_mul_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mul_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_mul\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function mul_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_mul_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mul_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_mul\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function mul_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_mul_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    multi_margin_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, p::TorchNumber, margin::TorchNumber, weight::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_multi\\_margin\\_loss\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, scalar p, scalar margin, gc\\_tensor weight, int64\\_t reduction)
"""
function multi_margin_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, p::TorchNumber, margin::TorchNumber, weight::Tensor, reduction::Int64)
    p_s_ = Scalar(p)
    margin_s_ = Scalar(margin)
    __cret = ccall((:atg_multi_margin_loss_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_output.pointer, self.pointer, target.pointer, p_s_.pointer, margin_s_.pointer, weight.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    multi_margin_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, p::TorchNumber, margin::TorchNumber, weight::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_multi\\_margin\\_loss\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, scalar p, scalar margin, gc\\_tensor weight, int64\\_t reduction)
"""
function multi_margin_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, p::TorchNumber, margin::TorchNumber, weight::Tensor, reduction::Int64)
    p_s_ = Scalar(p)
    margin_s_ = Scalar(margin)
    __cret = ccall((:atg_multi_margin_loss_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, p_s_.pointer, margin_s_.pointer, weight.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    multilabel_margin_loss(self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_multilabel\\_margin\\_loss(gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function multilabel_margin_loss(self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_multilabel_margin_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    multilabel_margin_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, is_target::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_multilabel\\_margin\\_loss\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, gc\\_tensor is\\_target)
"""
function multilabel_margin_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, is_target::Tensor)

    __cret = ccall((:atg_multilabel_margin_loss_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, target.pointer, reduction, is_target.pointer)
    return tensor_from_ptr(__cret)
end


"""
    multilabel_margin_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, is_target::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_multilabel\\_margin\\_loss\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, gc\\_tensor is\\_target)
"""
function multilabel_margin_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, is_target::Tensor)

    __cret = ccall((:atg_multilabel_margin_loss_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, reduction, is_target.pointer)
    return tensor_from_ptr(__cret)
end


"""
    multilabel_margin_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_multilabel\\_margin\\_loss\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function multilabel_margin_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_multilabel_margin_loss_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    multinomial(self::Tensor, num_samples::Int64, replacement::Int)

 Wrapper of C++ function raw\\_tensor atg\\_multinomial(gc\\_tensor self, int64\\_t num\\_samples, int replacement)
"""
function multinomial(self::Tensor, num_samples::Int64, replacement::Int)

    __cret = ccall((:atg_multinomial, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, num_samples, replacement)
    return tensor_from_ptr(__cret)
end


"""
    multinomial_out(out::Tensor, self::Tensor, num_samples::Int64, replacement::Int)

 Wrapper of C++ function raw\\_tensor atg\\_multinomial\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t num\\_samples, int replacement)
"""
function multinomial_out(out::Tensor, self::Tensor, num_samples::Int64, replacement::Int)

    __cret = ccall((:atg_multinomial_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, num_samples, replacement)
    return tensor_from_ptr(__cret)
end


"""
    multiply(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_multiply(gc\\_tensor self, gc\\_tensor other)
"""
function multiply(self::Tensor, other::Tensor)

    __cret = ccall((:atg_multiply, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    multiply!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_multiply\\_(gc\\_tensor self, gc\\_tensor other)
"""
function multiply!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_multiply_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    multiply_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_multiply\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function multiply_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_multiply_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    multiply_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_multiply\\_scalar(gc\\_tensor self, scalar other)
"""
function multiply_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_multiply_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    multiply_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_multiply\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function multiply_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_multiply_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end
import Base.mv


"""
    mv(self::Tensor, vec::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mv(gc\\_tensor self, gc\\_tensor vec)
"""
function mv(self::Tensor, vec::Tensor)

    __cret = ccall((:atg_mv, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, vec.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mv_out(out::Tensor, self::Tensor, vec::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_mv\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor vec)
"""
function mv_out(out::Tensor, self::Tensor, vec::Tensor)

    __cret = ccall((:atg_mv_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, vec.pointer)
    return tensor_from_ptr(__cret)
end


"""
    mvlgamma(self::Tensor, p::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mvlgamma(gc\\_tensor self, int64\\_t p)
"""
function mvlgamma(self::Tensor, p::Int64)

    __cret = ccall((:atg_mvlgamma, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    mvlgamma!(self::Tensor, p::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mvlgamma\\_(gc\\_tensor self, int64\\_t p)
"""
function mvlgamma!(self::Tensor, p::Int64)

    __cret = ccall((:atg_mvlgamma_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    mvlgamma_out(out::Tensor, self::Tensor, p::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_mvlgamma\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t p)
"""
function mvlgamma_out(out::Tensor, self::Tensor, p::Int64)

    __cret = ccall((:atg_mvlgamma_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    nan_to_num(self::Tensor, nan_v::Float64, nan_null::Int, posinf_v::Float64, posinf_null::Int, neginf_v::Float64, neginf_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nan\\_to\\_num(gc\\_tensor self, double nan\\_v, int nan\\_null, double posinf\\_v, int posinf\\_null, double neginf\\_v, int neginf\\_null)
"""
function nan_to_num(self::Tensor, nan_v::Float64, nan_null::Int, posinf_v::Float64, posinf_null::Int, neginf_v::Float64, neginf_null::Int)

    __cret = ccall((:atg_nan_to_num, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, nan_v, nan_null, posinf_v, posinf_null, neginf_v, neginf_null)
    return tensor_from_ptr(__cret)
end


"""
    nan_to_num!(self::Tensor, nan_v::Float64, nan_null::Int, posinf_v::Float64, posinf_null::Int, neginf_v::Float64, neginf_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nan\\_to\\_num\\_(gc\\_tensor self, double nan\\_v, int nan\\_null, double posinf\\_v, int posinf\\_null, double neginf\\_v, int neginf\\_null)
"""
function nan_to_num!(self::Tensor, nan_v::Float64, nan_null::Int, posinf_v::Float64, posinf_null::Int, neginf_v::Float64, neginf_null::Int)

    __cret = ccall((:atg_nan_to_num_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, nan_v, nan_null, posinf_v, posinf_null, neginf_v, neginf_null)
    return tensor_from_ptr(__cret)
end


"""
    nan_to_num_out(out::Tensor, self::Tensor, nan_v::Float64, nan_null::Int, posinf_v::Float64, posinf_null::Int, neginf_v::Float64, neginf_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nan\\_to\\_num\\_out(gc\\_tensor out, gc\\_tensor self, double nan\\_v, int nan\\_null, double posinf\\_v, int posinf\\_null, double neginf\\_v, int neginf\\_null)
"""
function nan_to_num_out(out::Tensor, self::Tensor, nan_v::Float64, nan_null::Int, posinf_v::Float64, posinf_null::Int, neginf_v::Float64, neginf_null::Int)

    __cret = ccall((:atg_nan_to_num_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, nan_v, nan_null, posinf_v, posinf_null, neginf_v, neginf_null)
    return tensor_from_ptr(__cret)
end


"""
    nanmean(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nanmean(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function nanmean(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_nanmean, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    nanmean_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nanmean\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function nanmean_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_nanmean_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    nanmedian(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nanmedian(gc\\_tensor self)
"""
function nanmedian(self::Tensor)

    __cret = ccall((:atg_nanmedian, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
# nanmedian_dim ignored

# nanmedian_dim_values ignored



"""
    nanmedian_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nanmedian\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function nanmedian_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_nanmedian_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# nanquantile ignored

# nanquantile_out ignored

# nanquantile_scalar ignored

# nanquantile_scalar_out ignored



"""
    nansum(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nansum(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function nansum(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_nansum, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    nansum_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nansum\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function nansum_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_nansum_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    narrow(self::Tensor, dim::Int64, start::Int64, length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_narrow(gc\\_tensor self, int64\\_t dim, int64\\_t start, int64\\_t length)
"""
function narrow(self::Tensor, dim::Int64, start::Int64, length::Int64)
    dim = dim - 1
    __cret = ccall((:atg_narrow, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, dim, start, length)
    return tensor_from_ptr(__cret)
end


"""
    narrow_copy(self::Tensor, dim::Int64, start::Int64, length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_narrow\\_copy(gc\\_tensor self, int64\\_t dim, int64\\_t start, int64\\_t length)
"""
function narrow_copy(self::Tensor, dim::Int64, start::Int64, length::Int64)
    dim = dim - 1
    __cret = ccall((:atg_narrow_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, dim, start, length)
    return tensor_from_ptr(__cret)
end


"""
    narrow_copy_out(out::Tensor, self::Tensor, dim::Int64, start::Int64, length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_narrow\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int64\\_t start, int64\\_t length)
"""
function narrow_copy_out(out::Tensor, self::Tensor, dim::Int64, start::Int64, length::Int64)
    dim = dim - 1
    __cret = ccall((:atg_narrow_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 out.pointer, self.pointer, dim, start, length)
    return tensor_from_ptr(__cret)
end


"""
    narrow_tensor(self::Tensor, dim::Int64, start::Tensor, length::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_narrow\\_tensor(gc\\_tensor self, int64\\_t dim, gc\\_tensor start, int64\\_t length)
"""
function narrow_tensor(self::Tensor, dim::Int64, start::Tensor, length::Int64)
    dim = dim - 1
    __cret = ccall((:atg_narrow_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Clonglong),
                 self.pointer, dim, start.pointer, length)
    return tensor_from_ptr(__cret)
end
# native_batch_norm ignored

# native_batch_norm_out ignored



"""
    native_channel_shuffle(self::Tensor, groups::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_native\\_channel\\_shuffle(gc\\_tensor self, int64\\_t groups)
"""
function native_channel_shuffle(self::Tensor, groups::Int64)

    __cret = ccall((:atg_native_channel_shuffle, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, groups)
    return tensor_from_ptr(__cret)
end
# native_dropout ignored



"""
    native_dropout_backward(grad_output::Tensor, mask::Tensor, scale::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_native\\_dropout\\_backward(gc\\_tensor grad\\_output, gc\\_tensor mask, double scale)
"""
function native_dropout_backward(grad_output::Tensor, mask::Tensor, scale::Float64)

    __cret = ccall((:atg_native_dropout_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 grad_output.pointer, mask.pointer, scale)
    return tensor_from_ptr(__cret)
end


"""
    native_dropout_backward_out(out::Tensor, grad_output::Tensor, mask::Tensor, scale::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_native\\_dropout\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor mask, double scale)
"""
function native_dropout_backward_out(out::Tensor, grad_output::Tensor, mask::Tensor, scale::Float64)

    __cret = ccall((:atg_native_dropout_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble),
                 out.pointer, grad_output.pointer, mask.pointer, scale)
    return tensor_from_ptr(__cret)
end
# native_dropout_out ignored

# native_group_norm ignored

# native_group_norm_out ignored

# native_layer_norm ignored

# native_layer_norm_out ignored



"""
    native_norm(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_native\\_norm(gc\\_tensor self)
"""
function native_norm(self::Tensor)

    __cret = ccall((:atg_native_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    native_norm_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_native\\_norm\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function native_norm_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_native_norm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    native_norm_scalaropt_dim_dtype(self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_native\\_norm\\_scalaropt\\_dim\\_dtype(gc\\_tensor self, scalar p, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function native_norm_scalaropt_dim_dtype(self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    p_s_ = Scalar(p)
    dim_len = length(dim_data)
    __cret = ccall((:atg_native_norm_scalaropt_dim_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, p_s_.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    native_norm_scalaropt_dim_dtype_out(out::Tensor, self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_native\\_norm\\_scalaropt\\_dim\\_dtype\\_out(gc\\_tensor out, gc\\_tensor self, scalar p, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function native_norm_scalaropt_dim_dtype_out(out::Tensor, self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    p_s_ = Scalar(p)
    dim_len = length(dim_data)
    __cret = ccall((:atg_native_norm_scalaropt_dim_dtype_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, p_s_.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    ne(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_ne(gc\\_tensor self, scalar other)
"""
function ne(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_ne, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ne!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_ne\\_(gc\\_tensor self, scalar other)
"""
function ne!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_ne_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ne_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_ne\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function ne_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_ne_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ne_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ne\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function ne_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_ne_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ne_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ne\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function ne_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_ne_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ne_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ne\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function ne_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_ne_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    neg(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_neg(gc\\_tensor self)
"""
function neg(self::Tensor)

    __cret = ccall((:atg_neg, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    neg!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_neg\\_(gc\\_tensor self)
"""
function neg!(self::Tensor)

    __cret = ccall((:atg_neg_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    neg_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_neg\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function neg_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_neg_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    negative(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_negative(gc\\_tensor self)
"""
function negative(self::Tensor)

    __cret = ccall((:atg_negative, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    negative!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_negative\\_(gc\\_tensor self)
"""
function negative!(self::Tensor)

    __cret = ccall((:atg_negative_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    negative_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_negative\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function negative_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_negative_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nested_to_padded_tensor(self::Tensor, padding::Float64, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_nested\\_to\\_padded\\_tensor(gc\\_tensor self, double padding, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function nested_to_padded_tensor(self::Tensor, padding::Float64, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_nested_to_padded_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Ptr{Cvoid}, Cint),
                 self.pointer, padding, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    new_empty(self::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_new\\_empty(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function new_empty(self::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_new_empty, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    new_empty_out(out::Tensor, self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_new\\_empty\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function new_empty_out(out::Tensor, self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_new_empty_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    new_empty_strided(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_new\\_empty\\_strided(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len, int options\\_kind, int options\\_device)
"""
function new_empty_strided(self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_new_empty_strided, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, size_data, size_len, stride_data, stride_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    new_empty_strided_out(out::Tensor, self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_new\\_empty\\_strided\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function new_empty_strided_out(out::Tensor, self::Tensor, size_data::Array{Int64}, stride_data::Array{Int64})
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_new_empty_strided_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    new_full(self::Tensor, size_data::Array{Int64}, fill_value::TorchNumber, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_new\\_full(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, scalar fill\\_value, int options\\_kind, int options\\_device)
"""
function new_full(self::Tensor, size_data::Array{Int64}, fill_value::TorchNumber, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    fill_value_s_ = Scalar(fill_value)
    __cret = ccall((:atg_new_full, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, size_data, size_len, fill_value_s_.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    new_full_out(out::Tensor, self::Tensor, size_data::Array{Int64}, fill_value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_new\\_full\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, scalar fill\\_value)
"""
function new_full_out(out::Tensor, self::Tensor, size_data::Array{Int64}, fill_value::TorchNumber)
    size_len = length(size_data)
    fill_value_s_ = Scalar(fill_value)
    __cret = ccall((:atg_new_full_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}),
                 out.pointer, self.pointer, size_data, size_len, fill_value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    new_ones(self::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_new\\_ones(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function new_ones(self::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_new_ones, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    new_ones_out(out::Tensor, self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_new\\_ones\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function new_ones_out(out::Tensor, self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_new_ones_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    new_zeros(self::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_new\\_zeros(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function new_zeros(self::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_new_zeros, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    new_zeros_out(out::Tensor, self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_new\\_zeros\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function new_zeros_out(out::Tensor, self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_new_zeros_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    nextafter(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nextafter(gc\\_tensor self, gc\\_tensor other)
"""
function nextafter(self::Tensor, other::Tensor)

    __cret = ccall((:atg_nextafter, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nextafter!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nextafter\\_(gc\\_tensor self, gc\\_tensor other)
"""
function nextafter!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_nextafter_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nextafter_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nextafter\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function nextafter_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_nextafter_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss(gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index)
"""
function nll_loss(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

    __cret = ccall((:atg_nll_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, target.pointer, weight.pointer, reduction, ignore_index)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss2d(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss2d(gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index)
"""
function nll_loss2d(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

    __cret = ccall((:atg_nll_loss2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, target.pointer, weight.pointer, reduction, ignore_index)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss2d_backward(grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, total_weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index, gc\\_tensor total\\_weight)
"""
function nll_loss2d_backward(grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, total_weight::Tensor)

    __cret = ccall((:atg_nll_loss2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, target.pointer, weight.pointer, reduction, ignore_index, total_weight.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, total_weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index, gc\\_tensor total\\_weight)
"""
function nll_loss2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, total_weight::Tensor)

    __cret = ccall((:atg_nll_loss2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, weight.pointer, reduction, ignore_index, total_weight.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss2d_out(out::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss2d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index)
"""
function nll_loss2d_out(out::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

    __cret = ccall((:atg_nll_loss2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, self.pointer, target.pointer, weight.pointer, reduction, ignore_index)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, total_weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index, gc\\_tensor total\\_weight)
"""
function nll_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, total_weight::Tensor)

    __cret = ccall((:atg_nll_loss_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, target.pointer, weight.pointer, reduction, ignore_index, total_weight.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, total_weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index, gc\\_tensor total\\_weight)
"""
function nll_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64, total_weight::Tensor)

    __cret = ccall((:atg_nll_loss_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, weight.pointer, reduction, ignore_index, total_weight.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss_nd(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss\\_nd(gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index)
"""
function nll_loss_nd(self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

    __cret = ccall((:atg_nll_loss_nd, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, target.pointer, weight.pointer, reduction, ignore_index)
    return tensor_from_ptr(__cret)
end


"""
    nll_loss_out(out::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_nll\\_loss\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, gc\\_tensor weight, int64\\_t reduction, int64\\_t ignore\\_index)
"""
function nll_loss_out(out::Tensor, self::Tensor, target::Tensor, weight::Tensor, reduction::Int64, ignore_index::Int64)

    __cret = ccall((:atg_nll_loss_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, self.pointer, target.pointer, weight.pointer, reduction, ignore_index)
    return tensor_from_ptr(__cret)
end


"""
    nonzero(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nonzero(gc\\_tensor self)
"""
function nonzero(self::Tensor)

    __cret = ccall((:atg_nonzero, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nonzero_numpy(self::Tensor)

 Wrapper of C++ function raw\\_tensor *atg\\_nonzero\\_numpy(gc\\_tensor self)
"""
function nonzero_numpy(self::Tensor)

    __cret = ccall((:atg_nonzero_numpy, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    nonzero_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_nonzero\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function nonzero_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_nonzero_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nonzero_static(self::Tensor, size::Int64, fill_value::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_nonzero\\_static(gc\\_tensor self, int64\\_t size, int64\\_t fill\\_value)
"""
function nonzero_static(self::Tensor, size::Int64, fill_value::Int64)

    __cret = ccall((:atg_nonzero_static, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, size, fill_value)
    return tensor_from_ptr(__cret)
end


"""
    nonzero_static_out(out::Tensor, self::Tensor, size::Int64, fill_value::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_nonzero\\_static\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t size, int64\\_t fill\\_value)
"""
function nonzero_static_out(out::Tensor, self::Tensor, size::Int64, fill_value::Int64)

    __cret = ccall((:atg_nonzero_static_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, self.pointer, size, fill_value)
    return tensor_from_ptr(__cret)
end


"""
    norm(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_norm(gc\\_tensor self)
"""
function norm(self::Tensor)

    __cret = ccall((:atg_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    norm_dtype_out(out::Tensor, self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_norm\\_dtype\\_out(gc\\_tensor out, gc\\_tensor self, scalar p, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function norm_dtype_out(out::Tensor, self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    p_s_ = Scalar(p)
    dim_len = length(dim_data)
    __cret = ccall((:atg_norm_dtype_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, p_s_.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    norm_except_dim(v::Tensor, pow::Int64, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_norm\\_except\\_dim(gc\\_tensor v, int64\\_t pow, int64\\_t dim)
"""
function norm_except_dim(v::Tensor, pow::Int64, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_norm_except_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 v.pointer, pow, dim)
    return tensor_from_ptr(__cret)
end


"""
    norm_out(out::Tensor, self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_norm\\_out(gc\\_tensor out, gc\\_tensor self, scalar p, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function norm_out(out::Tensor, self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int)
    p_s_ = Scalar(p)
    dim_len = length(dim_data)
    __cret = ccall((:atg_norm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, p_s_.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    norm_scalar_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_norm\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function norm_scalar_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_norm_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    norm_scalaropt_dim(self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_norm\\_scalaropt\\_dim(gc\\_tensor self, scalar p, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function norm_scalaropt_dim(self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int)
    p_s_ = Scalar(p)
    dim_len = length(dim_data)
    __cret = ccall((:atg_norm_scalaropt_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, p_s_.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    norm_scalaropt_dim_dtype(self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_norm\\_scalaropt\\_dim\\_dtype(gc\\_tensor self, scalar p, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function norm_scalaropt_dim_dtype(self::Tensor, p::TorchNumber, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    p_s_ = Scalar(p)
    dim_len = length(dim_data)
    __cret = ccall((:atg_norm_scalaropt_dim_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, p_s_.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    norm_scalaropt_dtype(self::Tensor, p::TorchNumber, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_norm\\_scalaropt\\_dtype(gc\\_tensor self, scalar p, int dtype)
"""
function norm_scalaropt_dtype(self::Tensor, p::TorchNumber, dtype::Int)
    p_s_ = Scalar(p)
    __cret = ccall((:atg_norm_scalaropt_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, p_s_.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    norm_scalaropt_dtype_out(out::Tensor, self::Tensor, p::TorchNumber, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_norm\\_scalaropt\\_dtype\\_out(gc\\_tensor out, gc\\_tensor self, scalar p, int dtype)
"""
function norm_scalaropt_dtype_out(out::Tensor, self::Tensor, p::TorchNumber, dtype::Int)
    p_s_ = Scalar(p)
    __cret = ccall((:atg_norm_scalaropt_dtype_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, p_s_.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    normal!(self::Tensor, mean::Float64, std::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_normal\\_(gc\\_tensor self, double mean, double std)
"""
function normal!(self::Tensor, mean::Float64, std::Float64)

    __cret = ccall((:atg_normal_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, mean, std)
    return tensor_from_ptr(__cret)
end


"""
    normal_functional(self::Tensor, mean::Float64, std::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_normal\\_functional(gc\\_tensor self, double mean, double std)
"""
function normal_functional(self::Tensor, mean::Float64, std::Float64)

    __cret = ccall((:atg_normal_functional, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, mean, std)
    return tensor_from_ptr(__cret)
end


"""
    not_equal(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_not\\_equal(gc\\_tensor self, scalar other)
"""
function not_equal(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_not_equal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    not_equal!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_not\\_equal\\_(gc\\_tensor self, scalar other)
"""
function not_equal!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_not_equal_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    not_equal_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_not\\_equal\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function not_equal_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_not_equal_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    not_equal_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_not\\_equal\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function not_equal_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_not_equal_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    not_equal_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_not\\_equal\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function not_equal_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_not_equal_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    not_equal_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_not\\_equal\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function not_equal_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_not_equal_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    nuclear_norm(self::Tensor, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nuclear\\_norm(gc\\_tensor self, int keepdim)
"""
function nuclear_norm(self::Tensor, keepdim::Int)

    __cret = ccall((:atg_nuclear_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    nuclear_norm_dim(self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nuclear\\_norm\\_dim(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function nuclear_norm_dim(self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_nuclear_norm_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    nuclear_norm_dim_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nuclear\\_norm\\_dim\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function nuclear_norm_dim_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_nuclear_norm_dim_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    nuclear_norm_out(out::Tensor, self::Tensor, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_nuclear\\_norm\\_out(gc\\_tensor out, gc\\_tensor self, int keepdim)
"""
function nuclear_norm_out(out::Tensor, self::Tensor, keepdim::Int)

    __cret = ccall((:atg_nuclear_norm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    numpy_t(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_numpy\\_t(gc\\_tensor self)
"""
function numpy_t(self::Tensor)

    __cret = ccall((:atg_numpy_t, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    one_hot(self::Tensor, num_classes::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_one\\_hot(gc\\_tensor self, int64\\_t num\\_classes)
"""
function one_hot(self::Tensor, num_classes::Int64)

    __cret = ccall((:atg_one_hot, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, num_classes)
    return tensor_from_ptr(__cret)
end
import Base.ones


"""
    ones(size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_ones(int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function ones(size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_ones, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    ones_like(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ones\\_like(gc\\_tensor self)
"""
function ones_like(self::Tensor)

    __cret = ccall((:atg_ones_like, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ones_like_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ones\\_like\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function ones_like_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_ones_like_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ones_out(out::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_ones\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len)
"""
function ones_out(out::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_ones_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    orgqr(self::Tensor, input2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_orgqr(gc\\_tensor self, gc\\_tensor input2)
"""
function orgqr(self::Tensor, input2::Tensor)

    __cret = ccall((:atg_orgqr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, input2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    orgqr_out(out::Tensor, self::Tensor, input2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_orgqr\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor input2)
"""
function orgqr_out(out::Tensor, self::Tensor, input2::Tensor)

    __cret = ccall((:atg_orgqr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, input2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    ormqr(self::Tensor, input2::Tensor, input3::Tensor, left::Int, transpose::Int)

 Wrapper of C++ function raw\\_tensor atg\\_ormqr(gc\\_tensor self, gc\\_tensor input2, gc\\_tensor input3, int left, int transpose)
"""
function ormqr(self::Tensor, input2::Tensor, input3::Tensor, left::Int, transpose::Int)

    __cret = ccall((:atg_ormqr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, input2.pointer, input3.pointer, left, transpose)
    return tensor_from_ptr(__cret)
end


"""
    ormqr_out(out::Tensor, self::Tensor, input2::Tensor, input3::Tensor, left::Int, transpose::Int)

 Wrapper of C++ function raw\\_tensor atg\\_ormqr\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor input2, gc\\_tensor input3, int left, int transpose)
"""
function ormqr_out(out::Tensor, self::Tensor, input2::Tensor, input3::Tensor, left::Int, transpose::Int)

    __cret = ccall((:atg_ormqr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, input2.pointer, input3.pointer, left, transpose)
    return tensor_from_ptr(__cret)
end


"""
    outer(self::Tensor, vec2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_outer(gc\\_tensor self, gc\\_tensor vec2)
"""
function outer(self::Tensor, vec2::Tensor)

    __cret = ccall((:atg_outer, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, vec2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    outer_out(out::Tensor, self::Tensor, vec2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_outer\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor vec2)
"""
function outer_out(out::Tensor, self::Tensor, vec2::Tensor)

    __cret = ccall((:atg_outer_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, vec2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    output_nr(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_output\\_nr(gc\\_tensor self)
"""
function output_nr(self::Tensor)

    __cret = ccall((:atg_output_nr, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end
# pad ignored

# pad_sequence ignored



"""
    pairwise_distance(x1::Tensor, x2::Tensor, p::Float64, eps::Float64, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_pairwise\\_distance(gc\\_tensor x1, gc\\_tensor x2, double p, double eps, int keepdim)
"""
function pairwise_distance(x1::Tensor, x2::Tensor, p::Float64, eps::Float64, keepdim::Int)

    __cret = ccall((:atg_pairwise_distance, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble, Cint),
                 x1.pointer, x2.pointer, p, eps, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    pdist(self::Tensor, p::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_pdist(gc\\_tensor self, double p)
"""
function pdist(self::Tensor, p::Float64)

    __cret = ccall((:atg_pdist, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble),
                 self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    permute(self::Tensor, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_permute(gc\\_tensor self, int64\\_t *dims\\_data, int dims\\_len)
"""
function permute(self::Tensor, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_permute, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    permute_copy(self::Tensor, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_permute\\_copy(gc\\_tensor self, int64\\_t *dims\\_data, int dims\\_len)
"""
function permute_copy(self::Tensor, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_permute_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    permute_copy_out(out::Tensor, self::Tensor, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_permute\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dims\\_data, int dims\\_len)
"""
function permute_copy_out(out::Tensor, self::Tensor, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_permute_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    pin_memory(self::Tensor, device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_pin\\_memory(gc\\_tensor self, int device)
"""
function pin_memory(self::Tensor, device::Int)

    __cret = ccall((:atg_pin_memory, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, device)
    return tensor_from_ptr(__cret)
end


"""
    pinverse(self::Tensor, rcond::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_pinverse(gc\\_tensor self, double rcond)
"""
function pinverse(self::Tensor, rcond::Float64)

    __cret = ccall((:atg_pinverse, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble),
                 self.pointer, rcond)
    return tensor_from_ptr(__cret)
end


"""
    pixel_shuffle(self::Tensor, upscale_factor::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_pixel\\_shuffle(gc\\_tensor self, int64\\_t upscale\\_factor)
"""
function pixel_shuffle(self::Tensor, upscale_factor::Int64)

    __cret = ccall((:atg_pixel_shuffle, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, upscale_factor)
    return tensor_from_ptr(__cret)
end


"""
    pixel_shuffle_out(out::Tensor, self::Tensor, upscale_factor::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_pixel\\_shuffle\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t upscale\\_factor)
"""
function pixel_shuffle_out(out::Tensor, self::Tensor, upscale_factor::Int64)

    __cret = ccall((:atg_pixel_shuffle_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, upscale_factor)
    return tensor_from_ptr(__cret)
end


"""
    pixel_unshuffle(self::Tensor, downscale_factor::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_pixel\\_unshuffle(gc\\_tensor self, int64\\_t downscale\\_factor)
"""
function pixel_unshuffle(self::Tensor, downscale_factor::Int64)

    __cret = ccall((:atg_pixel_unshuffle, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, downscale_factor)
    return tensor_from_ptr(__cret)
end


"""
    pixel_unshuffle_out(out::Tensor, self::Tensor, downscale_factor::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_pixel\\_unshuffle\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t downscale\\_factor)
"""
function pixel_unshuffle_out(out::Tensor, self::Tensor, downscale_factor::Int64)

    __cret = ccall((:atg_pixel_unshuffle_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, downscale_factor)
    return tensor_from_ptr(__cret)
end


"""
    poisson(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_poisson(gc\\_tensor self)
"""
function poisson(self::Tensor)

    __cret = ccall((:atg_poisson, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    poisson_nll_loss(input::Tensor, target::Tensor, log_input::Int, full::Int, eps::Float64, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_poisson\\_nll\\_loss(gc\\_tensor input, gc\\_tensor target, int log\\_input, int full, double eps, int64\\_t reduction)
"""
function poisson_nll_loss(input::Tensor, target::Tensor, log_input::Int, full::Int, eps::Float64, reduction::Int64)

    __cret = ccall((:atg_poisson_nll_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Clonglong),
                 input.pointer, target.pointer, log_input, full, eps, reduction)
    return tensor_from_ptr(__cret)
end


"""
    poisson_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_poisson\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function poisson_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_poisson_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    polar(abs::Tensor, angle::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_polar(gc\\_tensor abs, gc\\_tensor angle)
"""
function polar(abs::Tensor, angle::Tensor)

    __cret = ccall((:atg_polar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 abs.pointer, angle.pointer)
    return tensor_from_ptr(__cret)
end


"""
    polar_out(out::Tensor, abs::Tensor, angle::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_polar\\_out(gc\\_tensor out, gc\\_tensor abs, gc\\_tensor angle)
"""
function polar_out(out::Tensor, abs::Tensor, angle::Tensor)

    __cret = ccall((:atg_polar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, abs.pointer, angle.pointer)
    return tensor_from_ptr(__cret)
end


"""
    polygamma(n::Int64, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_polygamma(int64\\_t n, gc\\_tensor self)
"""
function polygamma(n::Int64, self::Tensor)

    __cret = ccall((:atg_polygamma, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Ptr{Cvoid}),
                 n, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    polygamma!(self::Tensor, n::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_polygamma\\_(gc\\_tensor self, int64\\_t n)
"""
function polygamma!(self::Tensor, n::Int64)

    __cret = ccall((:atg_polygamma_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, n)
    return tensor_from_ptr(__cret)
end


"""
    polygamma_out(out::Tensor, n::Int64, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_polygamma\\_out(gc\\_tensor out, int64\\_t n, gc\\_tensor self)
"""
function polygamma_out(out::Tensor, n::Int64, self::Tensor)

    __cret = ccall((:atg_polygamma_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 out.pointer, n, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    positive(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_positive(gc\\_tensor self)
"""
function positive(self::Tensor)

    __cret = ccall((:atg_positive, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    pow(self::Tensor, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_pow(gc\\_tensor self, gc\\_tensor exponent)
"""
function pow(self::Tensor, exponent::Tensor)

    __cret = ccall((:atg_pow, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    pow!(self::Tensor, exponent::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_pow\\_(gc\\_tensor self, scalar exponent)
"""
function pow!(self::Tensor, exponent::TorchNumber)
    exponent_s_ = Scalar(exponent)
    __cret = ccall((:atg_pow_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, exponent_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    pow_scalar(self::TorchNumber, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_pow\\_scalar(scalar self, gc\\_tensor exponent)
"""
function pow_scalar(self::TorchNumber, exponent::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_pow_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    pow_scalar_out(out::Tensor, self::TorchNumber, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_pow\\_scalar\\_out(gc\\_tensor out, scalar self, gc\\_tensor exponent)
"""
function pow_scalar_out(out::Tensor, self::TorchNumber, exponent::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_pow_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    pow_tensor!(self::Tensor, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_pow\\_tensor\\_(gc\\_tensor self, gc\\_tensor exponent)
"""
function pow_tensor!(self::Tensor, exponent::Tensor)

    __cret = ccall((:atg_pow_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    pow_tensor_scalar(self::Tensor, exponent::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_pow\\_tensor\\_scalar(gc\\_tensor self, scalar exponent)
"""
function pow_tensor_scalar(self::Tensor, exponent::TorchNumber)
    exponent_s_ = Scalar(exponent)
    __cret = ccall((:atg_pow_tensor_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, exponent_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    pow_tensor_scalar_out(out::Tensor, self::Tensor, exponent::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_pow\\_tensor\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar exponent)
"""
function pow_tensor_scalar_out(out::Tensor, self::Tensor, exponent::TorchNumber)
    exponent_s_ = Scalar(exponent)
    __cret = ccall((:atg_pow_tensor_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, exponent_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    pow_tensor_tensor_out(out::Tensor, self::Tensor, exponent::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_pow\\_tensor\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor exponent)
"""
function pow_tensor_tensor_out(out::Tensor, self::Tensor, exponent::Tensor)

    __cret = ccall((:atg_pow_tensor_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, exponent.pointer)
    return tensor_from_ptr(__cret)
end


"""
    prelu(self::Tensor, weight::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_prelu(gc\\_tensor self, gc\\_tensor weight)
"""
function prelu(self::Tensor, weight::Tensor)

    __cret = ccall((:atg_prelu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, weight.pointer)
    return tensor_from_ptr(__cret)
end
import Base.prod


"""
    prod(self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_prod(gc\\_tensor self, int dtype)
"""
function prod(self::Tensor, dtype::Int)

    __cret = ccall((:atg_prod, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    prod_dim_int(self::Tensor, dim::Int64, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_prod\\_dim\\_int(gc\\_tensor self, int64\\_t dim, int keepdim, int dtype)
"""
function prod_dim_int(self::Tensor, dim::Int64, keepdim::Int, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_prod_dim_int, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Cint),
                 self.pointer, dim, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    prod_int_out(out::Tensor, self::Tensor, dim::Int64, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_prod\\_int\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int keepdim, int dtype)
"""
function prod_int_out(out::Tensor, self::Tensor, dim::Int64, keepdim::Int, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_prod_int_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Cint),
                 out.pointer, self.pointer, dim, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    prod_out(out::Tensor, self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_prod\\_out(gc\\_tensor out, gc\\_tensor self, int dtype)
"""
function prod_out(out::Tensor, self::Tensor, dtype::Int)

    __cret = ccall((:atg_prod_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    put(self::Tensor, index::Tensor, source::Tensor, accumulate::Int)

 Wrapper of C++ function raw\\_tensor atg\\_put(gc\\_tensor self, gc\\_tensor index, gc\\_tensor source, int accumulate)
"""
function put(self::Tensor, index::Tensor, source::Tensor, accumulate::Int)

    __cret = ccall((:atg_put, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, index.pointer, source.pointer, accumulate)
    return tensor_from_ptr(__cret)
end
import Base.put!


"""
    put!(self::Tensor, index::Tensor, source::Tensor, accumulate::Int)

 Wrapper of C++ function raw\\_tensor atg\\_put\\_(gc\\_tensor self, gc\\_tensor index, gc\\_tensor source, int accumulate)
"""
function put!(self::Tensor, index::Tensor, source::Tensor, accumulate::Int)

    __cret = ccall((:atg_put_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, index.pointer, source.pointer, accumulate)
    return tensor_from_ptr(__cret)
end


"""
    put_out(out::Tensor, self::Tensor, index::Tensor, source::Tensor, accumulate::Int)

 Wrapper of C++ function raw\\_tensor atg\\_put\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor index, gc\\_tensor source, int accumulate)
"""
function put_out(out::Tensor, self::Tensor, index::Tensor, source::Tensor, accumulate::Int)

    __cret = ccall((:atg_put_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, index.pointer, source.pointer, accumulate)
    return tensor_from_ptr(__cret)
end


"""
    q_per_channel_axis(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_q\\_per\\_channel\\_axis(gc\\_tensor self)
"""
function q_per_channel_axis(self::Tensor)

    __cret = ccall((:atg_q_per_channel_axis, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    q_per_channel_scales(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_q\\_per\\_channel\\_scales(gc\\_tensor self)
"""
function q_per_channel_scales(self::Tensor)

    __cret = ccall((:atg_q_per_channel_scales, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    q_per_channel_scales_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_q\\_per\\_channel\\_scales\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function q_per_channel_scales_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_q_per_channel_scales_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    q_per_channel_zero_points(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_q\\_per\\_channel\\_zero\\_points(gc\\_tensor self)
"""
function q_per_channel_zero_points(self::Tensor)

    __cret = ccall((:atg_q_per_channel_zero_points, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    q_per_channel_zero_points_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_q\\_per\\_channel\\_zero\\_points\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function q_per_channel_zero_points_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_q_per_channel_zero_points_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    q_scale(self::Tensor)

 Wrapper of C++ function double atg\\_q\\_scale(gc\\_tensor self)
"""
function q_scale(self::Tensor)

    __cret = ccall((:atg_q_scale, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    q_zero_point(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_q\\_zero\\_point(gc\\_tensor self)
"""
function q_zero_point(self::Tensor)

    __cret = ccall((:atg_q_zero_point, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end
# qr ignored

# qr_q ignored

# quantile ignored

# quantile_out ignored

# quantile_scalar ignored

# quantile_scalar_out ignored



"""
    quantize_per_channel(self::Tensor, scales::Tensor, zero_points::Tensor, axis::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantize\\_per\\_channel(gc\\_tensor self, gc\\_tensor scales, gc\\_tensor zero\\_points, int64\\_t axis, int dtype)
"""
function quantize_per_channel(self::Tensor, scales::Tensor, zero_points::Tensor, axis::Int64, dtype::Int)

    __cret = ccall((:atg_quantize_per_channel, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, scales.pointer, zero_points.pointer, axis, dtype)
    return tensor_from_ptr(__cret)
end


"""
    quantize_per_channel_out(out::Tensor, self::Tensor, scales::Tensor, zero_points::Tensor, axis::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantize\\_per\\_channel\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor scales, gc\\_tensor zero\\_points, int64\\_t axis, int dtype)
"""
function quantize_per_channel_out(out::Tensor, self::Tensor, scales::Tensor, zero_points::Tensor, axis::Int64, dtype::Int)

    __cret = ccall((:atg_quantize_per_channel_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, scales.pointer, zero_points.pointer, axis, dtype)
    return tensor_from_ptr(__cret)
end


"""
    quantize_per_tensor(self::Tensor, scale::Float64, zero_point::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantize\\_per\\_tensor(gc\\_tensor self, double scale, int64\\_t zero\\_point, int dtype)
"""
function quantize_per_tensor(self::Tensor, scale::Float64, zero_point::Int64, dtype::Int)

    __cret = ccall((:atg_quantize_per_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Clonglong, Cint),
                 self.pointer, scale, zero_point, dtype)
    return tensor_from_ptr(__cret)
end


"""
    quantize_per_tensor_dynamic(self::Tensor, dtype::Int, reduce_range::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantize\\_per\\_tensor\\_dynamic(gc\\_tensor self, int dtype, int reduce\\_range)
"""
function quantize_per_tensor_dynamic(self::Tensor, dtype::Int, reduce_range::Int)

    __cret = ccall((:atg_quantize_per_tensor_dynamic, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dtype, reduce_range)
    return tensor_from_ptr(__cret)
end


"""
    quantize_per_tensor_dynamic_out(out::Tensor, self::Tensor, dtype::Int, reduce_range::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantize\\_per\\_tensor\\_dynamic\\_out(gc\\_tensor out, gc\\_tensor self, int dtype, int reduce\\_range)
"""
function quantize_per_tensor_dynamic_out(out::Tensor, self::Tensor, dtype::Int, reduce_range::Int)

    __cret = ccall((:atg_quantize_per_tensor_dynamic_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, dtype, reduce_range)
    return tensor_from_ptr(__cret)
end


"""
    quantize_per_tensor_out(out::Tensor, self::Tensor, scale::Float64, zero_point::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantize\\_per\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, double scale, int64\\_t zero\\_point, int dtype)
"""
function quantize_per_tensor_out(out::Tensor, self::Tensor, scale::Float64, zero_point::Int64, dtype::Int)

    __cret = ccall((:atg_quantize_per_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Clonglong, Cint),
                 out.pointer, self.pointer, scale, zero_point, dtype)
    return tensor_from_ptr(__cret)
end


"""
    quantize_per_tensor_tensor_qparams(self::Tensor, scale::Tensor, zero_point::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantize\\_per\\_tensor\\_tensor\\_qparams(gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int dtype)
"""
function quantize_per_tensor_tensor_qparams(self::Tensor, scale::Tensor, zero_point::Tensor, dtype::Int)

    __cret = ccall((:atg_quantize_per_tensor_tensor_qparams, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, scale.pointer, zero_point.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    quantize_per_tensor_tensor_qparams_out(out::Tensor, self::Tensor, scale::Tensor, zero_point::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantize\\_per\\_tensor\\_tensor\\_qparams\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor scale, gc\\_tensor zero\\_point, int dtype)
"""
function quantize_per_tensor_tensor_qparams_out(out::Tensor, self::Tensor, scale::Tensor, zero_point::Tensor, dtype::Int)

    __cret = ccall((:atg_quantize_per_tensor_tensor_qparams_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, scale.pointer, zero_point.pointer, dtype)
    return tensor_from_ptr(__cret)
end
# quantize_per_tensor_tensors ignored

# quantize_per_tensor_tensors_out ignored



"""
    quantized_batch_norm(input::Tensor, weight::Tensor, bias::Tensor, mean::Tensor, var::Tensor, eps::Float64, output_scale::Float64, output_zero_point::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_batch\\_norm(gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, gc\\_tensor mean, gc\\_tensor var, double eps, double output\\_scale, int64\\_t output\\_zero\\_point)
"""
function quantized_batch_norm(input::Tensor, weight::Tensor, bias::Tensor, mean::Tensor, var::Tensor, eps::Float64, output_scale::Float64, output_zero_point::Int64)

    __cret = ccall((:atg_quantized_batch_norm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble, Clonglong),
                 input.pointer, weight.pointer, bias.pointer, mean.pointer, var.pointer, eps, output_scale, output_zero_point)
    return tensor_from_ptr(__cret)
end


"""
    quantized_batch_norm_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, mean::Tensor, var::Tensor, eps::Float64, output_scale::Float64, output_zero_point::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_batch\\_norm\\_out(gc\\_tensor out, gc\\_tensor input, gc\\_tensor weight, gc\\_tensor bias, gc\\_tensor mean, gc\\_tensor var, double eps, double output\\_scale, int64\\_t output\\_zero\\_point)
"""
function quantized_batch_norm_out(out::Tensor, input::Tensor, weight::Tensor, bias::Tensor, mean::Tensor, var::Tensor, eps::Float64, output_scale::Float64, output_zero_point::Int64)

    __cret = ccall((:atg_quantized_batch_norm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble, Clonglong),
                 out.pointer, input.pointer, weight.pointer, bias.pointer, mean.pointer, var.pointer, eps, output_scale, output_zero_point)
    return tensor_from_ptr(__cret)
end


"""
    quantized_gru_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor, packed_ih::Tensor, packed_hh::Tensor, col_offsets_ih::Tensor, col_offsets_hh::Tensor, scale_ih::TorchNumber, scale_hh::TorchNumber, zero_point_ih::TorchNumber, zero_point_hh::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_gru\\_cell(gc\\_tensor input, gc\\_tensor hx, gc\\_tensor w\\_ih, gc\\_tensor w\\_hh, gc\\_tensor b\\_ih, gc\\_tensor b\\_hh, gc\\_tensor packed\\_ih, gc\\_tensor packed\\_hh, gc\\_tensor col\\_offsets\\_ih, gc\\_tensor col\\_offsets\\_hh, scalar scale\\_ih, scalar scale\\_hh, scalar zero\\_point\\_ih, scalar zero\\_point\\_hh)
"""
function quantized_gru_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor, packed_ih::Tensor, packed_hh::Tensor, col_offsets_ih::Tensor, col_offsets_hh::Tensor, scale_ih::TorchNumber, scale_hh::TorchNumber, zero_point_ih::TorchNumber, zero_point_hh::TorchNumber)
    scale_ih_s_ = Scalar(scale_ih)
    scale_hh_s_ = Scalar(scale_hh)
    zero_point_ih_s_ = Scalar(zero_point_ih)
    zero_point_hh_s_ = Scalar(zero_point_hh)
    __cret = ccall((:atg_quantized_gru_cell, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, hx.pointer, w_ih.pointer, w_hh.pointer, b_ih.pointer, b_hh.pointer, packed_ih.pointer, packed_hh.pointer, col_offsets_ih.pointer, col_offsets_hh.pointer, scale_ih_s_.pointer, scale_hh_s_.pointer, zero_point_ih_s_.pointer, zero_point_hh_s_.pointer)
    return tensor_from_ptr(__cret)
end
# quantized_lstm_cell ignored



"""
    quantized_max_pool1d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_max\\_pool1d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function quantized_max_pool1d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_quantized_max_pool1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    quantized_max_pool1d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_max\\_pool1d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function quantized_max_pool1d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_quantized_max_pool1d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    quantized_max_pool2d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_max\\_pool2d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function quantized_max_pool2d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_quantized_max_pool2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    quantized_max_pool2d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_max\\_pool2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function quantized_max_pool2d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_quantized_max_pool2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    quantized_max_pool3d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_max\\_pool3d(gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function quantized_max_pool3d(self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_quantized_max_pool3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    quantized_max_pool3d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_max\\_pool3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len, int ceil\\_mode)
"""
function quantized_max_pool3d_out(out::Tensor, self::Tensor, kernel_size_data::Array{Int64}, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64}, ceil_mode::Int)
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_quantized_max_pool3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, kernel_size_data, kernel_size_len, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len, ceil_mode)
    return tensor_from_ptr(__cret)
end


"""
    quantized_rnn_relu_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor, packed_ih::Tensor, packed_hh::Tensor, col_offsets_ih::Tensor, col_offsets_hh::Tensor, scale_ih::TorchNumber, scale_hh::TorchNumber, zero_point_ih::TorchNumber, zero_point_hh::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_rnn\\_relu\\_cell(gc\\_tensor input, gc\\_tensor hx, gc\\_tensor w\\_ih, gc\\_tensor w\\_hh, gc\\_tensor b\\_ih, gc\\_tensor b\\_hh, gc\\_tensor packed\\_ih, gc\\_tensor packed\\_hh, gc\\_tensor col\\_offsets\\_ih, gc\\_tensor col\\_offsets\\_hh, scalar scale\\_ih, scalar scale\\_hh, scalar zero\\_point\\_ih, scalar zero\\_point\\_hh)
"""
function quantized_rnn_relu_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor, packed_ih::Tensor, packed_hh::Tensor, col_offsets_ih::Tensor, col_offsets_hh::Tensor, scale_ih::TorchNumber, scale_hh::TorchNumber, zero_point_ih::TorchNumber, zero_point_hh::TorchNumber)
    scale_ih_s_ = Scalar(scale_ih)
    scale_hh_s_ = Scalar(scale_hh)
    zero_point_ih_s_ = Scalar(zero_point_ih)
    zero_point_hh_s_ = Scalar(zero_point_hh)
    __cret = ccall((:atg_quantized_rnn_relu_cell, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, hx.pointer, w_ih.pointer, w_hh.pointer, b_ih.pointer, b_hh.pointer, packed_ih.pointer, packed_hh.pointer, col_offsets_ih.pointer, col_offsets_hh.pointer, scale_ih_s_.pointer, scale_hh_s_.pointer, zero_point_ih_s_.pointer, zero_point_hh_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    quantized_rnn_tanh_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor, packed_ih::Tensor, packed_hh::Tensor, col_offsets_ih::Tensor, col_offsets_hh::Tensor, scale_ih::TorchNumber, scale_hh::TorchNumber, zero_point_ih::TorchNumber, zero_point_hh::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_quantized\\_rnn\\_tanh\\_cell(gc\\_tensor input, gc\\_tensor hx, gc\\_tensor w\\_ih, gc\\_tensor w\\_hh, gc\\_tensor b\\_ih, gc\\_tensor b\\_hh, gc\\_tensor packed\\_ih, gc\\_tensor packed\\_hh, gc\\_tensor col\\_offsets\\_ih, gc\\_tensor col\\_offsets\\_hh, scalar scale\\_ih, scalar scale\\_hh, scalar zero\\_point\\_ih, scalar zero\\_point\\_hh)
"""
function quantized_rnn_tanh_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor, packed_ih::Tensor, packed_hh::Tensor, col_offsets_ih::Tensor, col_offsets_hh::Tensor, scale_ih::TorchNumber, scale_hh::TorchNumber, zero_point_ih::TorchNumber, zero_point_hh::TorchNumber)
    scale_ih_s_ = Scalar(scale_ih)
    scale_hh_s_ = Scalar(scale_hh)
    zero_point_ih_s_ = Scalar(zero_point_ih)
    zero_point_hh_s_ = Scalar(zero_point_hh)
    __cret = ccall((:atg_quantized_rnn_tanh_cell, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, hx.pointer, w_ih.pointer, w_hh.pointer, b_ih.pointer, b_hh.pointer, packed_ih.pointer, packed_hh.pointer, col_offsets_ih.pointer, col_offsets_hh.pointer, scale_ih_s_.pointer, scale_hh_s_.pointer, zero_point_ih_s_.pointer, zero_point_hh_s_.pointer)
    return tensor_from_ptr(__cret)
end
import Base.rad2deg


"""
    rad2deg(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rad2deg(gc\\_tensor self)
"""
function rad2deg(self::Tensor)

    __cret = ccall((:atg_rad2deg, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rad2deg!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rad2deg\\_(gc\\_tensor self)
"""
function rad2deg!(self::Tensor)

    __cret = ccall((:atg_rad2deg_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rad2deg_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rad2deg\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function rad2deg_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_rad2deg_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.rand


"""
    rand(size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_rand(int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function rand(size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_rand, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    rand_like(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rand\\_like(gc\\_tensor self)
"""
function rand_like(self::Tensor)

    __cret = ccall((:atg_rand_like, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rand_like_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rand\\_like\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function rand_like_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_rand_like_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rand_out(out::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_rand\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len)
"""
function rand_out(out::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_rand_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    randint(high::Int64, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_randint(int64\\_t high, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function randint(high::Int64, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_randint, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Ptr{Cvoid}, Cint, Cint, Cint),
                 high, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    randint_like(self::Tensor, high::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_randint\\_like(gc\\_tensor self, int64\\_t high)
"""
function randint_like(self::Tensor, high::Int64)

    __cret = ccall((:atg_randint_like, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, high)
    return tensor_from_ptr(__cret)
end


"""
    randint_like_low_dtype(self::Tensor, low::Int64, high::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_randint\\_like\\_low\\_dtype(gc\\_tensor self, int64\\_t low, int64\\_t high)
"""
function randint_like_low_dtype(self::Tensor, low::Int64, high::Int64)

    __cret = ccall((:atg_randint_like_low_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, low, high)
    return tensor_from_ptr(__cret)
end


"""
    randint_like_low_dtype_out(out::Tensor, self::Tensor, low::Int64, high::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_randint\\_like\\_low\\_dtype\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t low, int64\\_t high)
"""
function randint_like_low_dtype_out(out::Tensor, self::Tensor, low::Int64, high::Int64)

    __cret = ccall((:atg_randint_like_low_dtype_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, self.pointer, low, high)
    return tensor_from_ptr(__cret)
end


"""
    randint_like_out(out::Tensor, self::Tensor, high::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_randint\\_like\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t high)
"""
function randint_like_out(out::Tensor, self::Tensor, high::Int64)

    __cret = ccall((:atg_randint_like_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, high)
    return tensor_from_ptr(__cret)
end


"""
    randint_low(low::Int64, high::Int64, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_randint\\_low(int64\\_t low, int64\\_t high, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function randint_low(low::Int64, high::Int64, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_randint_low, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Clonglong, Ptr{Cvoid}, Cint, Cint, Cint),
                 low, high, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    randint_low_out(out::Tensor, low::Int64, high::Int64, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_randint\\_low\\_out(gc\\_tensor out, int64\\_t low, int64\\_t high, int64\\_t *size\\_data, int size\\_len)
"""
function randint_low_out(out::Tensor, low::Int64, high::Int64, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_randint_low_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Ptr{Cvoid}, Cint),
                 out.pointer, low, high, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    randint_out(out::Tensor, high::Int64, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_randint\\_out(gc\\_tensor out, int64\\_t high, int64\\_t *size\\_data, int size\\_len)
"""
function randint_out(out::Tensor, high::Int64, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_randint_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Cint),
                 out.pointer, high, size_data, size_len)
    return tensor_from_ptr(__cret)
end
import Base.randn


"""
    randn(size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_randn(int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function randn(size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_randn, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    randn_like(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_randn\\_like(gc\\_tensor self)
"""
function randn_like(self::Tensor)

    __cret = ccall((:atg_randn_like, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    randn_like_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_randn\\_like\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function randn_like_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_randn_like_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    randn_out(out::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_randn\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len)
"""
function randn_out(out::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_randn_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    random(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_random(gc\\_tensor self)
"""
function random(self::Tensor)

    __cret = ccall((:atg_random, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    random!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_random\\_(gc\\_tensor self)
"""
function random!(self::Tensor)

    __cret = ccall((:atg_random_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    random_from(self::Tensor, from::Int64, to_v::Int64, to_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_random\\_from(gc\\_tensor self, int64\\_t from, int64\\_t to\\_v, int to\\_null)
"""
function random_from(self::Tensor, from::Int64, to_v::Int64, to_null::Int)

    __cret = ccall((:atg_random_from, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 self.pointer, from, to_v, to_null)
    return tensor_from_ptr(__cret)
end


"""
    random_from!(self::Tensor, from::Int64, to_v::Int64, to_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_random\\_from\\_(gc\\_tensor self, int64\\_t from, int64\\_t to\\_v, int to\\_null)
"""
function random_from!(self::Tensor, from::Int64, to_v::Int64, to_null::Int)

    __cret = ccall((:atg_random_from_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 self.pointer, from, to_v, to_null)
    return tensor_from_ptr(__cret)
end


"""
    random_from_out(out::Tensor, self::Tensor, from::Int64, to_v::Int64, to_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_random\\_from\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t from, int64\\_t to\\_v, int to\\_null)
"""
function random_from_out(out::Tensor, self::Tensor, from::Int64, to_v::Int64, to_null::Int)

    __cret = ccall((:atg_random_from_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint),
                 out.pointer, self.pointer, from, to_v, to_null)
    return tensor_from_ptr(__cret)
end


"""
    random_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_random\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function random_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_random_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    random_to(self::Tensor, to::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_random\\_to(gc\\_tensor self, int64\\_t to)
"""
function random_to(self::Tensor, to::Int64)

    __cret = ccall((:atg_random_to, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, to)
    return tensor_from_ptr(__cret)
end


"""
    random_to!(self::Tensor, to::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_random\\_to\\_(gc\\_tensor self, int64\\_t to)
"""
function random_to!(self::Tensor, to::Int64)

    __cret = ccall((:atg_random_to_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, to)
    return tensor_from_ptr(__cret)
end


"""
    random_to_out(out::Tensor, self::Tensor, to::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_random\\_to\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t to)
"""
function random_to_out(out::Tensor, self::Tensor, to::Int64)

    __cret = ccall((:atg_random_to_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, to)
    return tensor_from_ptr(__cret)
end


"""
    randperm(n::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_randperm(int64\\_t n, int options\\_kind, int options\\_device)
"""
function randperm(n::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_randperm, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Cint, Cint),
                 n, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    randperm_out(out::Tensor, n::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_randperm\\_out(gc\\_tensor out, int64\\_t n)
"""
function randperm_out(out::Tensor, n::Int64)

    __cret = ccall((:atg_randperm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 out.pointer, n)
    return tensor_from_ptr(__cret)
end
import Base.range


"""
    range(start::TorchNumber, end_::TorchNumber, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_range(scalar start, scalar end, int options\\_kind, int options\\_device)
"""
function range(start::TorchNumber, end_::TorchNumber, options_kind::Int, options_device::Int)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_range, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 start_s_.pointer, end__s_.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    range_out(out::Tensor, start::TorchNumber, end_::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_range\\_out(gc\\_tensor out, scalar start, scalar end)
"""
function range_out(out::Tensor, start::TorchNumber, end_::TorchNumber)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_range_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, start_s_.pointer, end__s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    range_out!(out::Tensor, start::TorchNumber, end_::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_range\\_out\\_(gc\\_tensor out, scalar start, scalar end)
"""
function range_out!(out::Tensor, start::TorchNumber, end_::TorchNumber)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_range_out_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, start_s_.pointer, end__s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    range_step(start::TorchNumber, end_::TorchNumber, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_range\\_step(scalar start, scalar end, int options\\_kind, int options\\_device)
"""
function range_step(start::TorchNumber, end_::TorchNumber, options_kind::Int, options_device::Int)
    start_s_ = Scalar(start)
    end__s_ = Scalar(end_)
    __cret = ccall((:atg_range_step, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 start_s_.pointer, end__s_.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    ravel(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_ravel(gc\\_tensor self)
"""
function ravel(self::Tensor)

    __cret = ccall((:atg_ravel, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.real


"""
    real(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_real(gc\\_tensor self)
"""
function real(self::Tensor)

    __cret = ccall((:atg_real, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    reciprocal(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_reciprocal(gc\\_tensor self)
"""
function reciprocal(self::Tensor)

    __cret = ccall((:atg_reciprocal, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    reciprocal!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_reciprocal\\_(gc\\_tensor self)
"""
function reciprocal!(self::Tensor)

    __cret = ccall((:atg_reciprocal_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    reciprocal_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_reciprocal\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function reciprocal_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_reciprocal_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad1d(self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad1d(gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad1d(self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad1d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad1d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad1d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad1d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad1d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad1d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad1d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad1d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad1d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad1d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad2d(self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad2d(gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad2d(self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad2d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad2d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad2d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad2d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad3d(self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad3d(gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad3d(self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad3d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad3d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad3d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad3d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad3d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    reflection_pad3d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reflection\\_pad3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function reflection_pad3d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_reflection_pad3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    relu(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_relu(gc\\_tensor self)
"""
function relu(self::Tensor)

    __cret = ccall((:atg_relu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    relu6(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_relu6(gc\\_tensor self)
"""
function relu6(self::Tensor)

    __cret = ccall((:atg_relu6, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    relu6!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_relu6\\_(gc\\_tensor self)
"""
function relu6!(self::Tensor)

    __cret = ccall((:atg_relu6_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    relu!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_relu\\_(gc\\_tensor self)
"""
function relu!(self::Tensor)

    __cret = ccall((:atg_relu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    relu_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_relu\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function relu_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_relu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    remainder(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_remainder(gc\\_tensor self, scalar other)
"""
function remainder(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_remainder, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    remainder!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_remainder\\_(gc\\_tensor self, scalar other)
"""
function remainder!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_remainder_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    remainder_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_remainder\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function remainder_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_remainder_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    remainder_scalar_tensor(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_remainder\\_scalar\\_tensor(scalar self, gc\\_tensor other)
"""
function remainder_scalar_tensor(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_remainder_scalar_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    remainder_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_remainder\\_scalar\\_tensor\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function remainder_scalar_tensor_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_remainder_scalar_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    remainder_tensor(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_remainder\\_tensor(gc\\_tensor self, gc\\_tensor other)
"""
function remainder_tensor(self::Tensor, other::Tensor)

    __cret = ccall((:atg_remainder_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    remainder_tensor!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_remainder\\_tensor\\_(gc\\_tensor self, gc\\_tensor other)
"""
function remainder_tensor!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_remainder_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    remainder_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_remainder\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function remainder_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_remainder_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    renorm(self::Tensor, p::TorchNumber, dim::Int64, maxnorm::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_renorm(gc\\_tensor self, scalar p, int64\\_t dim, scalar maxnorm)
"""
function renorm(self::Tensor, p::TorchNumber, dim::Int64, maxnorm::TorchNumber)
    p_s_ = Scalar(p)
    dim = dim - 1
    maxnorm_s_ = Scalar(maxnorm)
    __cret = ccall((:atg_renorm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 self.pointer, p_s_.pointer, dim, maxnorm_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    renorm!(self::Tensor, p::TorchNumber, dim::Int64, maxnorm::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_renorm\\_(gc\\_tensor self, scalar p, int64\\_t dim, scalar maxnorm)
"""
function renorm!(self::Tensor, p::TorchNumber, dim::Int64, maxnorm::TorchNumber)
    p_s_ = Scalar(p)
    dim = dim - 1
    maxnorm_s_ = Scalar(maxnorm)
    __cret = ccall((:atg_renorm_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 self.pointer, p_s_.pointer, dim, maxnorm_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    renorm_out(out::Tensor, self::Tensor, p::TorchNumber, dim::Int64, maxnorm::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_renorm\\_out(gc\\_tensor out, gc\\_tensor self, scalar p, int64\\_t dim, scalar maxnorm)
"""
function renorm_out(out::Tensor, self::Tensor, p::TorchNumber, dim::Int64, maxnorm::TorchNumber)
    p_s_ = Scalar(p)
    dim = dim - 1
    maxnorm_s_ = Scalar(maxnorm)
    __cret = ccall((:atg_renorm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 out.pointer, self.pointer, p_s_.pointer, dim, maxnorm_s_.pointer)
    return tensor_from_ptr(__cret)
end
import Base.repeat


"""
    repeat(self::Tensor, repeats_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_repeat(gc\\_tensor self, int64\\_t *repeats\\_data, int repeats\\_len)
"""
function repeat(self::Tensor, repeats_data::Array{Int64})
    repeats_len = length(repeats_data)
    __cret = ccall((:atg_repeat, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, repeats_data, repeats_len)
    return tensor_from_ptr(__cret)
end


"""
    repeat_interleave(repeats::Tensor, output_size_v::Int64, output_size_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_repeat\\_interleave(gc\\_tensor repeats, int64\\_t output\\_size\\_v, int output\\_size\\_null)
"""
function repeat_interleave(repeats::Tensor, output_size_v::Int64, output_size_null::Int)

    __cret = ccall((:atg_repeat_interleave, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 repeats.pointer, output_size_v, output_size_null)
    return tensor_from_ptr(__cret)
end


"""
    repeat_interleave_self_int(self::Tensor, repeats::Int64, dim_v::Int64, dim_null::Int, output_size_v::Int64, output_size_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_repeat\\_interleave\\_self\\_int(gc\\_tensor self, int64\\_t repeats, int64\\_t dim\\_v, int dim\\_null, int64\\_t output\\_size\\_v, int output\\_size\\_null)
"""
function repeat_interleave_self_int(self::Tensor, repeats::Int64, dim_v::Int64, dim_null::Int, output_size_v::Int64, output_size_null::Int)

    __cret = ccall((:atg_repeat_interleave_self_int, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Cint, Clonglong, Cint),
                 self.pointer, repeats, dim_v, dim_null, output_size_v, output_size_null)
    return tensor_from_ptr(__cret)
end


"""
    repeat_interleave_self_tensor(self::Tensor, repeats::Tensor, dim_v::Int64, dim_null::Int, output_size_v::Int64, output_size_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_repeat\\_interleave\\_self\\_tensor(gc\\_tensor self, gc\\_tensor repeats, int64\\_t dim\\_v, int dim\\_null, int64\\_t output\\_size\\_v, int output\\_size\\_null)
"""
function repeat_interleave_self_tensor(self::Tensor, repeats::Tensor, dim_v::Int64, dim_null::Int, output_size_v::Int64, output_size_null::Int)

    __cret = ccall((:atg_repeat_interleave_self_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint, Clonglong, Cint),
                 self.pointer, repeats.pointer, dim_v, dim_null, output_size_v, output_size_null)
    return tensor_from_ptr(__cret)
end


"""
    repeat_interleave_tensor_out(out::Tensor, repeats::Tensor, output_size_v::Int64, output_size_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_repeat\\_interleave\\_tensor\\_out(gc\\_tensor out, gc\\_tensor repeats, int64\\_t output\\_size\\_v, int output\\_size\\_null)
"""
function repeat_interleave_tensor_out(out::Tensor, repeats::Tensor, output_size_v::Int64, output_size_null::Int)

    __cret = ccall((:atg_repeat_interleave_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, repeats.pointer, output_size_v, output_size_null)
    return tensor_from_ptr(__cret)
end


"""
    repeat_out(out::Tensor, self::Tensor, repeats_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_repeat\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *repeats\\_data, int repeats\\_len)
"""
function repeat_out(out::Tensor, self::Tensor, repeats_data::Array{Int64})
    repeats_len = length(repeats_data)
    __cret = ccall((:atg_repeat_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, repeats_data, repeats_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad1d(self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad1d(gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad1d(self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad1d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad1d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad1d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad1d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad1d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad1d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad1d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad1d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad1d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad1d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad2d(self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad2d(gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad2d(self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad2d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad2d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad2d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad2d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad2d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad3d(self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad3d(gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad3d(self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad3d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad3d\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad3d_backward(grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad3d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad3d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad_input.pointer, grad_output.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    replication_pad3d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_replication\\_pad3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *padding\\_data, int padding\\_len)
"""
function replication_pad3d_out(out::Tensor, self::Tensor, padding_data::Array{Int64})
    padding_len = length(padding_data)
    __cret = ccall((:atg_replication_pad3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    requires_grad!(self::Tensor, requires_grad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_requires\\_grad\\_(gc\\_tensor self, int requires\\_grad)
"""
function requires_grad!(self::Tensor, requires_grad::Int)

    __cret = ccall((:atg_requires_grad_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, requires_grad)
    return tensor_from_ptr(__cret)
end
import Base.reshape


"""
    reshape(self::Tensor, shape_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_reshape(gc\\_tensor self, int64\\_t *shape\\_data, int shape\\_len)
"""
function reshape(self::Tensor, shape_data::Array{Int64})
    shape_len = length(shape_data)
    __cret = ccall((:atg_reshape, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, shape_data, shape_len)
    return tensor_from_ptr(__cret)
end


"""
    reshape_as(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_reshape\\_as(gc\\_tensor self, gc\\_tensor other)
"""
function reshape_as(self::Tensor, other::Tensor)

    __cret = ccall((:atg_reshape_as, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    resize(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_resize(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function resize(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_resize, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end
import Base.resize!


"""
    resize!(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_resize\\_(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function resize!(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_resize_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    resize_as(self::Tensor, the_template::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_resize\\_as(gc\\_tensor self, gc\\_tensor the\\_template)
"""
function resize_as(self::Tensor, the_template::Tensor)

    __cret = ccall((:atg_resize_as, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, the_template.pointer)
    return tensor_from_ptr(__cret)
end


"""
    resize_as!(self::Tensor, the_template::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_resize\\_as\\_(gc\\_tensor self, gc\\_tensor the\\_template)
"""
function resize_as!(self::Tensor, the_template::Tensor)

    __cret = ccall((:atg_resize_as_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, the_template.pointer)
    return tensor_from_ptr(__cret)
end


"""
    resize_as_out(out::Tensor, self::Tensor, the_template::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_resize\\_as\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor the\\_template)
"""
function resize_as_out(out::Tensor, self::Tensor, the_template::Tensor)

    __cret = ccall((:atg_resize_as_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, the_template.pointer)
    return tensor_from_ptr(__cret)
end


"""
    resize_as_sparse(self::Tensor, the_template::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_resize\\_as\\_sparse(gc\\_tensor self, gc\\_tensor the\\_template)
"""
function resize_as_sparse(self::Tensor, the_template::Tensor)

    __cret = ccall((:atg_resize_as_sparse, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, the_template.pointer)
    return tensor_from_ptr(__cret)
end


"""
    resize_as_sparse!(self::Tensor, the_template::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_resize\\_as\\_sparse\\_(gc\\_tensor self, gc\\_tensor the\\_template)
"""
function resize_as_sparse!(self::Tensor, the_template::Tensor)

    __cret = ccall((:atg_resize_as_sparse_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, the_template.pointer)
    return tensor_from_ptr(__cret)
end


"""
    resize_as_sparse_out(out::Tensor, self::Tensor, the_template::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_resize\\_as\\_sparse\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor the\\_template)
"""
function resize_as_sparse_out(out::Tensor, self::Tensor, the_template::Tensor)

    __cret = ccall((:atg_resize_as_sparse_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, the_template.pointer)
    return tensor_from_ptr(__cret)
end


"""
    resize_out(out::Tensor, self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_resize\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function resize_out(out::Tensor, self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_resize_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    resolve_conj(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_resolve\\_conj(gc\\_tensor self)
"""
function resolve_conj(self::Tensor)

    __cret = ccall((:atg_resolve_conj, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    resolve_neg(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_resolve\\_neg(gc\\_tensor self)
"""
function resolve_neg(self::Tensor)

    __cret = ccall((:atg_resolve_neg, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    retains_grad(self::Tensor)

 Wrapper of C++ function int atg\\_retains\\_grad(gc\\_tensor self)
"""
function retains_grad(self::Tensor)

    __cret = ccall((:atg_retains_grad, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end
# rnn_relu ignored



"""
    rnn_relu_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rnn\\_relu\\_cell(gc\\_tensor input, gc\\_tensor hx, gc\\_tensor w\\_ih, gc\\_tensor w\\_hh, gc\\_tensor b\\_ih, gc\\_tensor b\\_hh)
"""
function rnn_relu_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor)

    __cret = ccall((:atg_rnn_relu_cell, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, hx.pointer, w_ih.pointer, w_hh.pointer, b_ih.pointer, b_hh.pointer)
    return tensor_from_ptr(__cret)
end
# rnn_relu_data ignored

# rnn_tanh ignored



"""
    rnn_tanh_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rnn\\_tanh\\_cell(gc\\_tensor input, gc\\_tensor hx, gc\\_tensor w\\_ih, gc\\_tensor w\\_hh, gc\\_tensor b\\_ih, gc\\_tensor b\\_hh)
"""
function rnn_tanh_cell(input::Tensor, hx::Tensor, w_ih::Tensor, w_hh::Tensor, b_ih::Tensor, b_hh::Tensor)

    __cret = ccall((:atg_rnn_tanh_cell, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 input.pointer, hx.pointer, w_ih.pointer, w_hh.pointer, b_ih.pointer, b_hh.pointer)
    return tensor_from_ptr(__cret)
end
# rnn_tanh_data ignored



"""
    roll(self::Tensor, shifts_data::Array{Int64}, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_roll(gc\\_tensor self, int64\\_t *shifts\\_data, int shifts\\_len, int64\\_t *dims\\_data, int dims\\_len)
"""
function roll(self::Tensor, shifts_data::Array{Int64}, dims_data::Array{Int64})
    shifts_len = length(shifts_data)
    dims_len = length(dims_data)
    __cret = ccall((:atg_roll, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, shifts_data, shifts_len, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    roll_out(out::Tensor, self::Tensor, shifts_data::Array{Int64}, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_roll\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *shifts\\_data, int shifts\\_len, int64\\_t *dims\\_data, int dims\\_len)
"""
function roll_out(out::Tensor, self::Tensor, shifts_data::Array{Int64}, dims_data::Array{Int64})
    shifts_len = length(shifts_data)
    dims_len = length(dims_data)
    __cret = ccall((:atg_roll_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, shifts_data, shifts_len, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    rot90(self::Tensor, k::Int64, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_rot90(gc\\_tensor self, int64\\_t k, int64\\_t *dims\\_data, int dims\\_len)
"""
function rot90(self::Tensor, k::Int64, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_rot90, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Cint),
                 self.pointer, k, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    rot90_out(out::Tensor, self::Tensor, k::Int64, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_rot90\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t k, int64\\_t *dims\\_data, int dims\\_len)
"""
function rot90_out(out::Tensor, self::Tensor, k::Int64, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_rot90_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, k, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end
import Base.round


"""
    round(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_round(gc\\_tensor self)
"""
function round(self::Tensor)

    __cret = ccall((:atg_round, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    round!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_round\\_(gc\\_tensor self)
"""
function round!(self::Tensor)

    __cret = ccall((:atg_round_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    round_decimals(self::Tensor, decimals::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_round\\_decimals(gc\\_tensor self, int64\\_t decimals)
"""
function round_decimals(self::Tensor, decimals::Int64)

    __cret = ccall((:atg_round_decimals, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, decimals)
    return tensor_from_ptr(__cret)
end


"""
    round_decimals!(self::Tensor, decimals::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_round\\_decimals\\_(gc\\_tensor self, int64\\_t decimals)
"""
function round_decimals!(self::Tensor, decimals::Int64)

    __cret = ccall((:atg_round_decimals_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, decimals)
    return tensor_from_ptr(__cret)
end


"""
    round_decimals_out(out::Tensor, self::Tensor, decimals::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_round\\_decimals\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t decimals)
"""
function round_decimals_out(out::Tensor, self::Tensor, decimals::Int64)

    __cret = ccall((:atg_round_decimals_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, decimals)
    return tensor_from_ptr(__cret)
end


"""
    round_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_round\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function round_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_round_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    row_indices(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_row\\_indices(gc\\_tensor self)
"""
function row_indices(self::Tensor)

    __cret = ccall((:atg_row_indices, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    row_indices_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_row\\_indices\\_copy(gc\\_tensor self)
"""
function row_indices_copy(self::Tensor)

    __cret = ccall((:atg_row_indices_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    row_indices_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_row\\_indices\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function row_indices_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_row_indices_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# row_stack ignored

# row_stack_out ignored



"""
    rrelu(self::Tensor, training::Int)

 Wrapper of C++ function raw\\_tensor atg\\_rrelu(gc\\_tensor self, int training)
"""
function rrelu(self::Tensor, training::Int)

    __cret = ccall((:atg_rrelu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, training)
    return tensor_from_ptr(__cret)
end


"""
    rrelu!(self::Tensor, training::Int)

 Wrapper of C++ function raw\\_tensor atg\\_rrelu\\_(gc\\_tensor self, int training)
"""
function rrelu!(self::Tensor, training::Int)

    __cret = ccall((:atg_rrelu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, training)
    return tensor_from_ptr(__cret)
end


"""
    rrelu_with_noise(self::Tensor, noise::Tensor, training::Int)

 Wrapper of C++ function raw\\_tensor atg\\_rrelu\\_with\\_noise(gc\\_tensor self, gc\\_tensor noise, int training)
"""
function rrelu_with_noise(self::Tensor, noise::Tensor, training::Int)

    __cret = ccall((:atg_rrelu_with_noise, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, noise.pointer, training)
    return tensor_from_ptr(__cret)
end


"""
    rrelu_with_noise!(self::Tensor, noise::Tensor, training::Int)

 Wrapper of C++ function raw\\_tensor atg\\_rrelu\\_with\\_noise\\_(gc\\_tensor self, gc\\_tensor noise, int training)
"""
function rrelu_with_noise!(self::Tensor, noise::Tensor, training::Int)

    __cret = ccall((:atg_rrelu_with_noise_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, noise.pointer, training)
    return tensor_from_ptr(__cret)
end


"""
    rrelu_with_noise_backward(grad_output::Tensor, self::Tensor, noise::Tensor, lower::TorchNumber, upper::TorchNumber, training::Int, self_is_result::Int)

 Wrapper of C++ function raw\\_tensor atg\\_rrelu\\_with\\_noise\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor noise, scalar lower, scalar upper, int training, int self\\_is\\_result)
"""
function rrelu_with_noise_backward(grad_output::Tensor, self::Tensor, noise::Tensor, lower::TorchNumber, upper::TorchNumber, training::Int, self_is_result::Int)
    lower_s_ = Scalar(lower)
    upper_s_ = Scalar(upper)
    __cret = ccall((:atg_rrelu_with_noise_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 grad_output.pointer, self.pointer, noise.pointer, lower_s_.pointer, upper_s_.pointer, training, self_is_result)
    return tensor_from_ptr(__cret)
end


"""
    rrelu_with_noise_backward_out(out::Tensor, grad_output::Tensor, self::Tensor, noise::Tensor, lower::TorchNumber, upper::TorchNumber, training::Int, self_is_result::Int)

 Wrapper of C++ function raw\\_tensor atg\\_rrelu\\_with\\_noise\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor noise, scalar lower, scalar upper, int training, int self\\_is\\_result)
"""
function rrelu_with_noise_backward_out(out::Tensor, grad_output::Tensor, self::Tensor, noise::Tensor, lower::TorchNumber, upper::TorchNumber, training::Int, self_is_result::Int)
    lower_s_ = Scalar(lower)
    upper_s_ = Scalar(upper)
    __cret = ccall((:atg_rrelu_with_noise_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, grad_output.pointer, self.pointer, noise.pointer, lower_s_.pointer, upper_s_.pointer, training, self_is_result)
    return tensor_from_ptr(__cret)
end


"""
    rrelu_with_noise_out(out::Tensor, self::Tensor, noise::Tensor, training::Int)

 Wrapper of C++ function raw\\_tensor atg\\_rrelu\\_with\\_noise\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor noise, int training)
"""
function rrelu_with_noise_out(out::Tensor, self::Tensor, noise::Tensor, training::Int)

    __cret = ccall((:atg_rrelu_with_noise_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, noise.pointer, training)
    return tensor_from_ptr(__cret)
end


"""
    rsqrt(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rsqrt(gc\\_tensor self)
"""
function rsqrt(self::Tensor)

    __cret = ccall((:atg_rsqrt, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rsqrt!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rsqrt\\_(gc\\_tensor self)
"""
function rsqrt!(self::Tensor)

    __cret = ccall((:atg_rsqrt_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rsqrt_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rsqrt\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function rsqrt_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_rsqrt_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rsub(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rsub(gc\\_tensor self, gc\\_tensor other)
"""
function rsub(self::Tensor, other::Tensor)

    __cret = ccall((:atg_rsub, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rsub_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_rsub\\_scalar(gc\\_tensor self, scalar other)
"""
function rsub_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_rsub_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rsub_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_rsub\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function rsub_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_rsub_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    rsub_tensor_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_rsub\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function rsub_tensor_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_rsub_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scalar_tensor(s::TorchNumber, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_scalar\\_tensor(scalar s, int options\\_kind, int options\\_device)
"""
function scalar_tensor(s::TorchNumber, options_kind::Int, options_device::Int)
    s_s_ = Scalar(s)
    __cret = ccall((:atg_scalar_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint),
                 s_s_.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    scalar_tensor_out(out::Tensor, s::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_scalar\\_tensor\\_out(gc\\_tensor out, scalar s)
"""
function scalar_tensor_out(out::Tensor, s::TorchNumber)
    s_s_ = Scalar(s)
    __cret = ccall((:atg_scalar_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, s_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scaled_dot_product_attention(query::Tensor, key::Tensor, value::Tensor, attn_mask::Tensor, dropout_p::Float64, is_causal::Int, scale_v::Float64, scale_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_scaled\\_dot\\_product\\_attention(gc\\_tensor query, gc\\_tensor key, gc\\_tensor value, gc\\_tensor attn\\_mask, double dropout\\_p, int is\\_causal, double scale\\_v, int scale\\_null)
"""
function scaled_dot_product_attention(query::Tensor, key::Tensor, value::Tensor, attn_mask::Tensor, dropout_p::Float64, is_causal::Int, scale_v::Float64, scale_null::Int)

    __cret = ccall((:atg_scaled_dot_product_attention, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint, Cdouble, Cint),
                 query.pointer, key.pointer, value.pointer, attn_mask.pointer, dropout_p, is_causal, scale_v, scale_null)
    return tensor_from_ptr(__cret)
end


"""
    scatter(self::Tensor, dim::Int64, index::Tensor, src::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_scatter(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor src)
"""
function scatter(self::Tensor, dim::Int64, index::Tensor, src::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_scatter, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, src.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scatter!(self::Tensor, dim::Int64, index::Tensor, src::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_scatter\\_(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor src)
"""
function scatter!(self::Tensor, dim::Int64, index::Tensor, src::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_scatter_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, src.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scatter_add(self::Tensor, dim::Int64, index::Tensor, src::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_scatter\\_add(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor src)
"""
function scatter_add(self::Tensor, dim::Int64, index::Tensor, src::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_scatter_add, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, src.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scatter_add!(self::Tensor, dim::Int64, index::Tensor, src::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_scatter\\_add\\_(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor src)
"""
function scatter_add!(self::Tensor, dim::Int64, index::Tensor, src::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_scatter_add_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, src.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scatter_add_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, src::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_scatter\\_add\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor src)
"""
function scatter_add_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, src::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_scatter_add_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, dim, index.pointer, src.pointer)
    return tensor_from_ptr(__cret)
end
# scatter_reduce ignored

# scatter_reduce_ ignored

# scatter_reduce_out ignored



"""
    scatter_src_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, src::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_scatter\\_src\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, gc\\_tensor src)
"""
function scatter_src_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, src::Tensor)
    dim = dim - 1
    __cret = ccall((:atg_scatter_src_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, dim, index.pointer, src.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scatter_value(self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_scatter\\_value(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, scalar value)
"""
function scatter_value(self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)
    dim = dim - 1
    value_s_ = Scalar(value)
    __cret = ccall((:atg_scatter_value, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scatter_value!(self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_scatter\\_value\\_(gc\\_tensor self, int64\\_t dim, gc\\_tensor index, scalar value)
"""
function scatter_value!(self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)
    dim = dim - 1
    value_s_ = Scalar(value)
    __cret = ccall((:atg_scatter_value_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, dim, index.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    scatter_value_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_scatter\\_value\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, gc\\_tensor index, scalar value)
"""
function scatter_value_out(out::Tensor, self::Tensor, dim::Int64, index::Tensor, value::TorchNumber)
    dim = dim - 1
    value_s_ = Scalar(value)
    __cret = ccall((:atg_scatter_value_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, dim, index.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end
# scatter_value_reduce ignored

# scatter_value_reduce_ ignored

# scatter_value_reduce_out ignored

# searchsorted ignored

# searchsorted_scalar ignored

# searchsorted_scalar_out ignored

# searchsorted_tensor_out ignored

# segment_reduce ignored

# segment_reduce_out ignored



"""
    select(self::Tensor, dim::Int64, index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_select(gc\\_tensor self, int64\\_t dim, int64\\_t index)
"""
function select(self::Tensor, dim::Int64, index::Int64)
    dim = dim - 1
    __cret = ccall((:atg_select, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim, index)
    return tensor_from_ptr(__cret)
end


"""
    select_backward(grad_output::Tensor, input_sizes_data::Array{Int64}, dim::Int64, index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_select\\_backward(gc\\_tensor grad\\_output, int64\\_t *input\\_sizes\\_data, int input\\_sizes\\_len, int64\\_t dim, int64\\_t index)
"""
function select_backward(grad_output::Tensor, input_sizes_data::Array{Int64}, dim::Int64, index::Int64)
    input_sizes_len = length(input_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_select_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 grad_output.pointer, input_sizes_data, input_sizes_len, dim, index)
    return tensor_from_ptr(__cret)
end


"""
    select_backward_out(out::Tensor, grad_output::Tensor, input_sizes_data::Array{Int64}, dim::Int64, index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_select\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, int64\\_t *input\\_sizes\\_data, int input\\_sizes\\_len, int64\\_t dim, int64\\_t index)
"""
function select_backward_out(out::Tensor, grad_output::Tensor, input_sizes_data::Array{Int64}, dim::Int64, index::Int64)
    input_sizes_len = length(input_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_select_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 out.pointer, grad_output.pointer, input_sizes_data, input_sizes_len, dim, index)
    return tensor_from_ptr(__cret)
end


"""
    select_copy(self::Tensor, dim::Int64, index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_select\\_copy(gc\\_tensor self, int64\\_t dim, int64\\_t index)
"""
function select_copy(self::Tensor, dim::Int64, index::Int64)
    dim = dim - 1
    __cret = ccall((:atg_select_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim, index)
    return tensor_from_ptr(__cret)
end


"""
    select_copy_int_out(out::Tensor, self::Tensor, dim::Int64, index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_select\\_copy\\_int\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int64\\_t index)
"""
function select_copy_int_out(out::Tensor, self::Tensor, dim::Int64, index::Int64)
    dim = dim - 1
    __cret = ccall((:atg_select_copy_int_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, self.pointer, dim, index)
    return tensor_from_ptr(__cret)
end


"""
    select_scatter(self::Tensor, src::Tensor, dim::Int64, index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_select\\_scatter(gc\\_tensor self, gc\\_tensor src, int64\\_t dim, int64\\_t index)
"""
function select_scatter(self::Tensor, src::Tensor, dim::Int64, index::Int64)
    dim = dim - 1
    __cret = ccall((:atg_select_scatter, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, src.pointer, dim, index)
    return tensor_from_ptr(__cret)
end


"""
    select_scatter_out(out::Tensor, self::Tensor, src::Tensor, dim::Int64, index::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_select\\_scatter\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor src, int64\\_t dim, int64\\_t index)
"""
function select_scatter_out(out::Tensor, self::Tensor, src::Tensor, dim::Int64, index::Int64)
    dim = dim - 1
    __cret = ccall((:atg_select_scatter_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, self.pointer, src.pointer, dim, index)
    return tensor_from_ptr(__cret)
end


"""
    selu(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_selu(gc\\_tensor self)
"""
function selu(self::Tensor)

    __cret = ccall((:atg_selu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    selu!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_selu\\_(gc\\_tensor self)
"""
function selu!(self::Tensor)

    __cret = ccall((:atg_selu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    set(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_set(gc\\_tensor self)
"""
function set(self::Tensor)

    __cret = ccall((:atg_set, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    set!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_set\\_(gc\\_tensor self)
"""
function set!(self::Tensor)

    __cret = ccall((:atg_set_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    set_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_set\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function set_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_set_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    set_requires_grad(self::Tensor, r::Int)

 Wrapper of C++ function raw\\_tensor atg\\_set\\_requires\\_grad(gc\\_tensor self, int r)
"""
function set_requires_grad(self::Tensor, r::Int)

    __cret = ccall((:atg_set_requires_grad, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, r)
    return tensor_from_ptr(__cret)
end


"""
    set_source_tensor(self::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_set\\_source\\_tensor(gc\\_tensor self, gc\\_tensor source)
"""
function set_source_tensor(self::Tensor, source::Tensor)

    __cret = ccall((:atg_set_source_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    set_source_tensor!(self::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_set\\_source\\_tensor\\_(gc\\_tensor self, gc\\_tensor source)
"""
function set_source_tensor!(self::Tensor, source::Tensor)

    __cret = ccall((:atg_set_source_tensor_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    set_source_tensor_out(out::Tensor, self::Tensor, source::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_set\\_source\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor source)
"""
function set_source_tensor_out(out::Tensor, self::Tensor, source::Tensor)

    __cret = ccall((:atg_set_source_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, source.pointer)
    return tensor_from_ptr(__cret)
end


"""
    set_source_tensor_storage_offset!(self::Tensor, source::Tensor, storage_offset::Int64, size_data::Array{Int64}, stride_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_set\\_source\\_tensor\\_storage\\_offset\\_(gc\\_tensor self, gc\\_tensor source, int64\\_t storage\\_offset, int64\\_t *size\\_data, int size\\_len, int64\\_t *stride\\_data, int stride\\_len)
"""
function set_source_tensor_storage_offset!(self::Tensor, source::Tensor, storage_offset::Int64, size_data::Array{Int64}, stride_data::Array{Int64})
    size_len = length(size_data)
    stride_len = length(stride_data)
    __cret = ccall((:atg_set_source_tensor_storage_offset_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, source.pointer, storage_offset, size_data, size_len, stride_data, stride_len)
    return tensor_from_ptr(__cret)
end


"""
    sgn(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sgn(gc\\_tensor self)
"""
function sgn(self::Tensor)

    __cret = ccall((:atg_sgn, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sgn!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sgn\\_(gc\\_tensor self)
"""
function sgn!(self::Tensor)

    __cret = ccall((:atg_sgn_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sgn_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sgn\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function sgn_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_sgn_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sigmoid(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sigmoid(gc\\_tensor self)
"""
function sigmoid(self::Tensor)

    __cret = ccall((:atg_sigmoid, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sigmoid!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sigmoid\\_(gc\\_tensor self)
"""
function sigmoid!(self::Tensor)

    __cret = ccall((:atg_sigmoid_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sigmoid_backward(grad_output::Tensor, output::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sigmoid\\_backward(gc\\_tensor grad\\_output, gc\\_tensor output)
"""
function sigmoid_backward(grad_output::Tensor, output::Tensor)

    __cret = ccall((:atg_sigmoid_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, output.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sigmoid_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sigmoid\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor output)
"""
function sigmoid_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output::Tensor)

    __cret = ccall((:atg_sigmoid_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, output.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sigmoid_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sigmoid\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function sigmoid_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_sigmoid_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.sign


"""
    sign(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sign(gc\\_tensor self)
"""
function sign(self::Tensor)

    __cret = ccall((:atg_sign, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sign!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sign\\_(gc\\_tensor self)
"""
function sign!(self::Tensor)

    __cret = ccall((:atg_sign_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sign_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sign\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function sign_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_sign_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.signbit


"""
    signbit(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_signbit(gc\\_tensor self)
"""
function signbit(self::Tensor)

    __cret = ccall((:atg_signbit, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    signbit_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_signbit\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function signbit_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_signbit_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    silu(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_silu(gc\\_tensor self)
"""
function silu(self::Tensor)

    __cret = ccall((:atg_silu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    silu!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_silu\\_(gc\\_tensor self)
"""
function silu!(self::Tensor)

    __cret = ccall((:atg_silu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    silu_backward(grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_silu\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function silu_backward(grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_silu_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    silu_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_silu\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self)
"""
function silu_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor)

    __cret = ccall((:atg_silu_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    silu_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_silu\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function silu_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_silu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.sin


"""
    sin(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sin(gc\\_tensor self)
"""
function sin(self::Tensor)

    __cret = ccall((:atg_sin, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sin!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sin\\_(gc\\_tensor self)
"""
function sin!(self::Tensor)

    __cret = ccall((:atg_sin_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sin_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sin\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function sin_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_sin_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.sinc


"""
    sinc(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sinc(gc\\_tensor self)
"""
function sinc(self::Tensor)

    __cret = ccall((:atg_sinc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sinc!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sinc\\_(gc\\_tensor self)
"""
function sinc!(self::Tensor)

    __cret = ccall((:atg_sinc_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sinc_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sinc\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function sinc_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_sinc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.sinh


"""
    sinh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sinh(gc\\_tensor self)
"""
function sinh(self::Tensor)

    __cret = ccall((:atg_sinh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sinh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sinh\\_(gc\\_tensor self)
"""
function sinh!(self::Tensor)

    __cret = ccall((:atg_sinh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sinh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sinh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function sinh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_sinh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.size


"""
    size(self::Tensor, dim::Int64)

 Wrapper of C++ function int64\\_t atg\\_size(gc\\_tensor self, int64\\_t dim)
"""
function size(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_size, :libtorch_capi),
                 Int, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return __cret
end


"""
    slice(self::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_slice(gc\\_tensor self, int64\\_t dim, int64\\_t start\\_v, int start\\_null, int64\\_t end\\_v, int end\\_null, int64\\_t step)
"""
function slice(self::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)
    dim = dim - 1
    __cret = ccall((:atg_slice, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Cint, Clonglong, Cint, Clonglong),
                 self.pointer, dim, start_v, start_null, end_v, end_null, step)
    return tensor_from_ptr(__cret)
end


"""
    slice_backward(grad_output::Tensor, input_sizes_data::Array{Int64}, dim::Int64, start::Int64, end_::Int64, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_slice\\_backward(gc\\_tensor grad\\_output, int64\\_t *input\\_sizes\\_data, int input\\_sizes\\_len, int64\\_t dim, int64\\_t start, int64\\_t end, int64\\_t step)
"""
function slice_backward(grad_output::Tensor, input_sizes_data::Array{Int64}, dim::Int64, start::Int64, end_::Int64, step::Int64)
    input_sizes_len = length(input_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_slice_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong, Clonglong, Clonglong),
                 grad_output.pointer, input_sizes_data, input_sizes_len, dim, start, end_, step)
    return tensor_from_ptr(__cret)
end


"""
    slice_backward_out(out::Tensor, grad_output::Tensor, input_sizes_data::Array{Int64}, dim::Int64, start::Int64, end_::Int64, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_slice\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_output, int64\\_t *input\\_sizes\\_data, int input\\_sizes\\_len, int64\\_t dim, int64\\_t start, int64\\_t end, int64\\_t step)
"""
function slice_backward_out(out::Tensor, grad_output::Tensor, input_sizes_data::Array{Int64}, dim::Int64, start::Int64, end_::Int64, step::Int64)
    input_sizes_len = length(input_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_slice_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong, Clonglong, Clonglong),
                 out.pointer, grad_output.pointer, input_sizes_data, input_sizes_len, dim, start, end_, step)
    return tensor_from_ptr(__cret)
end


"""
    slice_copy(self::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_slice\\_copy(gc\\_tensor self, int64\\_t dim, int64\\_t start\\_v, int start\\_null, int64\\_t end\\_v, int end\\_null, int64\\_t step)
"""
function slice_copy(self::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)
    dim = dim - 1
    __cret = ccall((:atg_slice_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Cint, Clonglong, Cint, Clonglong),
                 self.pointer, dim, start_v, start_null, end_v, end_null, step)
    return tensor_from_ptr(__cret)
end


"""
    slice_copy_tensor_out(out::Tensor, self::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_slice\\_copy\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int64\\_t start\\_v, int start\\_null, int64\\_t end\\_v, int end\\_null, int64\\_t step)
"""
function slice_copy_tensor_out(out::Tensor, self::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)
    dim = dim - 1
    __cret = ccall((:atg_slice_copy_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint, Clonglong, Cint, Clonglong),
                 out.pointer, self.pointer, dim, start_v, start_null, end_v, end_null, step)
    return tensor_from_ptr(__cret)
end


"""
    slice_scatter(self::Tensor, src::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_slice\\_scatter(gc\\_tensor self, gc\\_tensor src, int64\\_t dim, int64\\_t start\\_v, int start\\_null, int64\\_t end\\_v, int end\\_null, int64\\_t step)
"""
function slice_scatter(self::Tensor, src::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)
    dim = dim - 1
    __cret = ccall((:atg_slice_scatter, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint, Clonglong, Cint, Clonglong),
                 self.pointer, src.pointer, dim, start_v, start_null, end_v, end_null, step)
    return tensor_from_ptr(__cret)
end


"""
    slice_scatter_out(out::Tensor, self::Tensor, src::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_slice\\_scatter\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor src, int64\\_t dim, int64\\_t start\\_v, int start\\_null, int64\\_t end\\_v, int end\\_null, int64\\_t step)
"""
function slice_scatter_out(out::Tensor, self::Tensor, src::Tensor, dim::Int64, start_v::Int64, start_null::Int, end_v::Int64, end_null::Int, step::Int64)
    dim = dim - 1
    __cret = ccall((:atg_slice_scatter_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Cint, Clonglong, Cint, Clonglong),
                 out.pointer, self.pointer, src.pointer, dim, start_v, start_null, end_v, end_null, step)
    return tensor_from_ptr(__cret)
end
# slogdet ignored

# slogdet_out ignored



"""
    slow_conv3d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv3d(gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len)
"""
function slow_conv3d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_slow_conv3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv3d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv3d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len)
"""
function slow_conv3d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    __cret = ccall((:atg_slow_conv3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv_dilated2d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv\\_dilated2d(gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function slow_conv_dilated2d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_slow_conv_dilated2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv_dilated2d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv\\_dilated2d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function slow_conv_dilated2d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_slow_conv_dilated2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv_dilated3d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv\\_dilated3d(gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function slow_conv_dilated3d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_slow_conv_dilated3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv_dilated3d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv\\_dilated3d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function slow_conv_dilated3d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_slow_conv_dilated3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv_transpose2d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv\\_transpose2d(gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function slow_conv_transpose2d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_slow_conv_transpose2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, output_padding_data, output_padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv_transpose2d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv\\_transpose2d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function slow_conv_transpose2d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_slow_conv_transpose2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, output_padding_data, output_padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv_transpose3d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv\\_transpose3d(gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function slow_conv_transpose3d(self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_slow_conv_transpose3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, output_padding_data, output_padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    slow_conv_transpose3d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, dilation_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_slow\\_conv\\_transpose3d\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor weight, int64\\_t *kernel\\_size\\_data, int kernel\\_size\\_len, gc\\_tensor bias, int64\\_t *stride\\_data, int stride\\_len, int64\\_t *padding\\_data, int padding\\_len, int64\\_t *output\\_padding\\_data, int output\\_padding\\_len, int64\\_t *dilation\\_data, int dilation\\_len)
"""
function slow_conv_transpose3d_out(out::Tensor, self::Tensor, weight::Tensor, kernel_size_data::Array{Int64}, bias::Tensor, stride_data::Array{Int64}, padding_data::Array{Int64}, output_padding_data::Array{Int64}, dilation_data::Array{Int64})
    kernel_size_len = length(kernel_size_data)
    stride_len = length(stride_data)
    padding_len = length(padding_data)
    output_padding_len = length(output_padding_data)
    dilation_len = length(dilation_data)
    __cret = ccall((:atg_slow_conv_transpose3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, weight.pointer, kernel_size_data, kernel_size_len, bias.pointer, stride_data, stride_len, padding_data, padding_len, output_padding_data, output_padding_len, dilation_data, dilation_len)
    return tensor_from_ptr(__cret)
end


"""
    smm(self::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_smm(gc\\_tensor self, gc\\_tensor mat2)
"""
function smm(self::Tensor, mat2::Tensor)

    __cret = ccall((:atg_smm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    smooth_l1_loss(self::Tensor, target::Tensor, reduction::Int64, beta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_smooth\\_l1\\_loss(gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, double beta)
"""
function smooth_l1_loss(self::Tensor, target::Tensor, reduction::Int64, beta::Float64)

    __cret = ccall((:atg_smooth_l1_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 self.pointer, target.pointer, reduction, beta)
    return tensor_from_ptr(__cret)
end


"""
    smooth_l1_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, beta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_smooth\\_l1\\_loss\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, double beta)
"""
function smooth_l1_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, beta::Float64)

    __cret = ccall((:atg_smooth_l1_loss_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 grad_output.pointer, self.pointer, target.pointer, reduction, beta)
    return tensor_from_ptr(__cret)
end


"""
    smooth_l1_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, beta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_smooth\\_l1\\_loss\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, double beta)
"""
function smooth_l1_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64, beta::Float64)

    __cret = ccall((:atg_smooth_l1_loss_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, reduction, beta)
    return tensor_from_ptr(__cret)
end


"""
    smooth_l1_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64, beta::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_smooth\\_l1\\_loss\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction, double beta)
"""
function smooth_l1_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64, beta::Float64)

    __cret = ccall((:atg_smooth_l1_loss_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cdouble),
                 out.pointer, self.pointer, target.pointer, reduction, beta)
    return tensor_from_ptr(__cret)
end


"""
    soft_margin_loss(self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_soft\\_margin\\_loss(gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function soft_margin_loss(self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_soft_margin_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    soft_margin_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_soft\\_margin\\_loss\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function soft_margin_loss_backward(grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_soft_margin_loss_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_output.pointer, self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    soft_margin_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_soft\\_margin\\_loss\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function soft_margin_loss_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_soft_margin_loss_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 grad_input.pointer, grad_output.pointer, self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    soft_margin_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_soft\\_margin\\_loss\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor target, int64\\_t reduction)
"""
function soft_margin_loss_out(out::Tensor, self::Tensor, target::Tensor, reduction::Int64)

    __cret = ccall((:atg_soft_margin_loss_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, target.pointer, reduction)
    return tensor_from_ptr(__cret)
end


"""
    softmax(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_softmax(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function softmax(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    softmax_int_out(out::Tensor, self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_softmax\\_int\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim, int dtype)
"""
function softmax_int_out(out::Tensor, self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_softmax_int_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    softplus(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_softplus(gc\\_tensor self)
"""
function softplus(self::Tensor)

    __cret = ccall((:atg_softplus, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    softplus_backward(grad_output::Tensor, self::Tensor, beta::TorchNumber, threshold::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_softplus\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, scalar beta, scalar threshold)
"""
function softplus_backward(grad_output::Tensor, self::Tensor, beta::TorchNumber, threshold::TorchNumber)
    beta_s_ = Scalar(beta)
    threshold_s_ = Scalar(threshold)
    __cret = ccall((:atg_softplus_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, beta_s_.pointer, threshold_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    softplus_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, beta::TorchNumber, threshold::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_softplus\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, scalar beta, scalar threshold)
"""
function softplus_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, beta::TorchNumber, threshold::TorchNumber)
    beta_s_ = Scalar(beta)
    threshold_s_ = Scalar(threshold)
    __cret = ccall((:atg_softplus_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, beta_s_.pointer, threshold_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    softplus_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_softplus\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function softplus_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_softplus_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    softshrink(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_softshrink(gc\\_tensor self)
"""
function softshrink(self::Tensor)

    __cret = ccall((:atg_softshrink, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    softshrink_backward(grad_output::Tensor, self::Tensor, lambd::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_softshrink\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, scalar lambd)
"""
function softshrink_backward(grad_output::Tensor, self::Tensor, lambd::TorchNumber)
    lambd_s_ = Scalar(lambd)
    __cret = ccall((:atg_softshrink_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, lambd_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    softshrink_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, lambd::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_softshrink\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, scalar lambd)
"""
function softshrink_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, lambd::TorchNumber)
    lambd_s_ = Scalar(lambd)
    __cret = ccall((:atg_softshrink_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, lambd_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    softshrink_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_softshrink\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function softshrink_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_softshrink_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
# sort ignored

# sort_stable ignored

# sort_values ignored

# sort_values_stable ignored



"""
    sparse_bsc_tensor(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_bsc\\_tensor(gc\\_tensor ccol\\_indices, gc\\_tensor row\\_indices, gc\\_tensor values, int options\\_kind, int options\\_device)
"""
function sparse_bsc_tensor(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_sparse_bsc_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 ccol_indices.pointer, row_indices.pointer, values.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_bsc_tensor_ccol_row_value_size(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_bsc\\_tensor\\_ccol\\_row\\_value\\_size(gc\\_tensor ccol\\_indices, gc\\_tensor row\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function sparse_bsc_tensor_ccol_row_value_size(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_bsc_tensor_ccol_row_value_size, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 ccol_indices.pointer, row_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_bsr_tensor(crow_indices::Tensor, col_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_bsr\\_tensor(gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, gc\\_tensor values, int options\\_kind, int options\\_device)
"""
function sparse_bsr_tensor(crow_indices::Tensor, col_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_sparse_bsr_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 crow_indices.pointer, col_indices.pointer, values.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_bsr_tensor_crow_col_value_size(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_bsr\\_tensor\\_crow\\_col\\_value\\_size(gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function sparse_bsr_tensor_crow_col_value_size(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_bsr_tensor_crow_col_value_size, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 crow_indices.pointer, col_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_compressed_tensor(compressed_indices::Tensor, plain_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_compressed\\_tensor(gc\\_tensor compressed\\_indices, gc\\_tensor plain\\_indices, gc\\_tensor values, int options\\_kind, int options\\_device)
"""
function sparse_compressed_tensor(compressed_indices::Tensor, plain_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_sparse_compressed_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 compressed_indices.pointer, plain_indices.pointer, values.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_compressed_tensor_comp_plain_value_size(compressed_indices::Tensor, plain_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_compressed\\_tensor\\_comp\\_plain\\_value\\_size(gc\\_tensor compressed\\_indices, gc\\_tensor plain\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function sparse_compressed_tensor_comp_plain_value_size(compressed_indices::Tensor, plain_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_compressed_tensor_comp_plain_value_size, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 compressed_indices.pointer, plain_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_coo_tensor(size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_coo\\_tensor(int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function sparse_coo_tensor(size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_coo_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_coo_tensor_indices(indices::Tensor, values::Tensor, options_kind::Int, options_device::Int, is_coalesced::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_coo\\_tensor\\_indices(gc\\_tensor indices, gc\\_tensor values, int options\\_kind, int options\\_device, int is\\_coalesced)
"""
function sparse_coo_tensor_indices(indices::Tensor, values::Tensor, options_kind::Int, options_device::Int, is_coalesced::Int)

    __cret = ccall((:atg_sparse_coo_tensor_indices, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 indices.pointer, values.pointer, options_kind, options_device, is_coalesced)
    return tensor_from_ptr(__cret)
end


"""
    sparse_coo_tensor_indices_size(indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int, is_coalesced::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_coo\\_tensor\\_indices\\_size(gc\\_tensor indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device, int is\\_coalesced)
"""
function sparse_coo_tensor_indices_size(indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int, is_coalesced::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_coo_tensor_indices_size, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint, Cint),
                 indices.pointer, values.pointer, size_data, size_len, options_kind, options_device, is_coalesced)
    return tensor_from_ptr(__cret)
end


"""
    sparse_coo_tensor_size_out(out::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_coo\\_tensor\\_size\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len)
"""
function sparse_coo_tensor_size_out(out::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_coo_tensor_size_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    sparse_csc_tensor(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_csc\\_tensor(gc\\_tensor ccol\\_indices, gc\\_tensor row\\_indices, gc\\_tensor values, int options\\_kind, int options\\_device)
"""
function sparse_csc_tensor(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_sparse_csc_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 ccol_indices.pointer, row_indices.pointer, values.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_csc_tensor_ccol_row_value_size(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_csc\\_tensor\\_ccol\\_row\\_value\\_size(gc\\_tensor ccol\\_indices, gc\\_tensor row\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function sparse_csc_tensor_ccol_row_value_size(ccol_indices::Tensor, row_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_csc_tensor_ccol_row_value_size, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 ccol_indices.pointer, row_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_csr_tensor(crow_indices::Tensor, col_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_csr\\_tensor(gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, gc\\_tensor values, int options\\_kind, int options\\_device)
"""
function sparse_csr_tensor(crow_indices::Tensor, col_indices::Tensor, values::Tensor, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_sparse_csr_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 crow_indices.pointer, col_indices.pointer, values.pointer, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_csr_tensor_crow_col_value_size(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_csr\\_tensor\\_crow\\_col\\_value\\_size(gc\\_tensor crow\\_indices, gc\\_tensor col\\_indices, gc\\_tensor values, int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function sparse_csr_tensor_crow_col_value_size(crow_indices::Tensor, col_indices::Tensor, values::Tensor, size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_csr_tensor_crow_col_value_size, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 crow_indices.pointer, col_indices.pointer, values.pointer, size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    sparse_dim(self::Tensor)

 Wrapper of C++ function int64\\_t atg\\_sparse\\_dim(gc\\_tensor self)
"""
function sparse_dim(self::Tensor)

    __cret = ccall((:atg_sparse_dim, :libtorch_capi),
                 Int, (Ptr{Cvoid},),
                 self.pointer)
    return __cret
end


"""
    sparse_mask(self::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_mask(gc\\_tensor self, gc\\_tensor mask)
"""
function sparse_mask(self::Tensor, mask::Tensor)

    __cret = ccall((:atg_sparse_mask, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sparse_mask_out(out::Tensor, self::Tensor, mask::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_mask\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mask)
"""
function sparse_mask_out(out::Tensor, self::Tensor, mask::Tensor)

    __cret = ccall((:atg_sparse_mask_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mask.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sparse_resize(self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_resize(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t sparse\\_dim, int64\\_t dense\\_dim)
"""
function sparse_resize(self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_resize, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 self.pointer, size_data, size_len, sparse_dim, dense_dim)
    return tensor_from_ptr(__cret)
end


"""
    sparse_resize!(self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_resize\\_(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t sparse\\_dim, int64\\_t dense\\_dim)
"""
function sparse_resize!(self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_resize_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 self.pointer, size_data, size_len, sparse_dim, dense_dim)
    return tensor_from_ptr(__cret)
end


"""
    sparse_resize_and_clear(self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_resize\\_and\\_clear(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t sparse\\_dim, int64\\_t dense\\_dim)
"""
function sparse_resize_and_clear(self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_resize_and_clear, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 self.pointer, size_data, size_len, sparse_dim, dense_dim)
    return tensor_from_ptr(__cret)
end


"""
    sparse_resize_and_clear!(self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_resize\\_and\\_clear\\_(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t sparse\\_dim, int64\\_t dense\\_dim)
"""
function sparse_resize_and_clear!(self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_resize_and_clear_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 self.pointer, size_data, size_len, sparse_dim, dense_dim)
    return tensor_from_ptr(__cret)
end


"""
    sparse_resize_and_clear_out(out::Tensor, self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_resize\\_and\\_clear\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t sparse\\_dim, int64\\_t dense\\_dim)
"""
function sparse_resize_and_clear_out(out::Tensor, self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_resize_and_clear_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 out.pointer, self.pointer, size_data, size_len, sparse_dim, dense_dim)
    return tensor_from_ptr(__cret)
end


"""
    sparse_resize_out(out::Tensor, self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_resize\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len, int64\\_t sparse\\_dim, int64\\_t dense\\_dim)
"""
function sparse_resize_out(out::Tensor, self::Tensor, size_data::Array{Int64}, sparse_dim::Int64, dense_dim::Int64)
    size_len = length(size_data)
    __cret = ccall((:atg_sparse_resize_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong),
                 out.pointer, self.pointer, size_data, size_len, sparse_dim, dense_dim)
    return tensor_from_ptr(__cret)
end


"""
    sparse_sampled_addmm(self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_sampled\\_addmm(gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function sparse_sampled_addmm(self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_sparse_sampled_addmm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sparse_sampled_addmm_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sparse\\_sampled\\_addmm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function sparse_sampled_addmm_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_sparse_sampled_addmm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_airy_ai(x::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_airy\\_ai(gc\\_tensor x)
"""
function special_airy_ai(x::Tensor)

    __cret = ccall((:atg_special_airy_ai, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 x.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_airy_ai_out(out::Tensor, x::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_airy\\_ai\\_out(gc\\_tensor out, gc\\_tensor x)
"""
function special_airy_ai_out(out::Tensor, x::Tensor)

    __cret = ccall((:atg_special_airy_ai_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_bessel_j0(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_bessel\\_j0(gc\\_tensor self)
"""
function special_bessel_j0(self::Tensor)

    __cret = ccall((:atg_special_bessel_j0, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_bessel_j0_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_bessel\\_j0\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_bessel_j0_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_bessel_j0_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_bessel_j1(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_bessel\\_j1(gc\\_tensor self)
"""
function special_bessel_j1(self::Tensor)

    __cret = ccall((:atg_special_bessel_j1, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_bessel_j1_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_bessel\\_j1\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_bessel_j1_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_bessel_j1_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_bessel_y0(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_bessel\\_y0(gc\\_tensor self)
"""
function special_bessel_y0(self::Tensor)

    __cret = ccall((:atg_special_bessel_y0, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_bessel_y0_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_bessel\\_y0\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_bessel_y0_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_bessel_y0_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_bessel_y1(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_bessel\\_y1(gc\\_tensor self)
"""
function special_bessel_y1(self::Tensor)

    __cret = ccall((:atg_special_bessel_y1, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_bessel_y1_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_bessel\\_y1\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_bessel_y1_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_bessel_y1_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_t(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_t(gc\\_tensor x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_t(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_chebyshev_polynomial_t, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_t_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_t\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_chebyshev_polynomial_t_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_chebyshev_polynomial_t_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_t_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_t\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_chebyshev_polynomial_t_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_chebyshev_polynomial_t_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_t_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_t\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_t_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_chebyshev_polynomial_t_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_t_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_t\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_t_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_chebyshev_polynomial_t_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_t_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_t\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_t_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_chebyshev_polynomial_t_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_u(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_u(gc\\_tensor x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_u(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_chebyshev_polynomial_u, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_u_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_u\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_chebyshev_polynomial_u_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_chebyshev_polynomial_u_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_u_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_u\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_chebyshev_polynomial_u_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_chebyshev_polynomial_u_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_u_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_u\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_u_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_chebyshev_polynomial_u_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_u_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_u\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_u_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_chebyshev_polynomial_u_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_u_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_u\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_u_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_chebyshev_polynomial_u_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_v(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_v(gc\\_tensor x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_v(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_chebyshev_polynomial_v, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_v_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_v\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_chebyshev_polynomial_v_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_chebyshev_polynomial_v_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_v_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_v\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_chebyshev_polynomial_v_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_chebyshev_polynomial_v_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_v_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_v\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_v_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_chebyshev_polynomial_v_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_v_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_v\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_v_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_chebyshev_polynomial_v_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_v_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_v\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_v_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_chebyshev_polynomial_v_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_w(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_w(gc\\_tensor x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_w(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_chebyshev_polynomial_w, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_w_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_w\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_chebyshev_polynomial_w_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_chebyshev_polynomial_w_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_w_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_w\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_chebyshev_polynomial_w_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_chebyshev_polynomial_w_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_w_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_w\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_w_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_chebyshev_polynomial_w_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_w_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_w\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_w_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_chebyshev_polynomial_w_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_chebyshev_polynomial_w_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_chebyshev\\_polynomial\\_w\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_chebyshev_polynomial_w_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_chebyshev_polynomial_w_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_digamma(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_digamma(gc\\_tensor self)
"""
function special_digamma(self::Tensor)

    __cret = ccall((:atg_special_digamma, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_digamma_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_digamma\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_digamma_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_digamma_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_entr(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_entr(gc\\_tensor self)
"""
function special_entr(self::Tensor)

    __cret = ccall((:atg_special_entr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_entr_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_entr\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_entr_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_entr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_erf(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_erf(gc\\_tensor self)
"""
function special_erf(self::Tensor)

    __cret = ccall((:atg_special_erf, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_erf_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_erf\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_erf_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_erf_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_erfc(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_erfc(gc\\_tensor self)
"""
function special_erfc(self::Tensor)

    __cret = ccall((:atg_special_erfc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_erfc_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_erfc\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_erfc_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_erfc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_erfcx(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_erfcx(gc\\_tensor self)
"""
function special_erfcx(self::Tensor)

    __cret = ccall((:atg_special_erfcx, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_erfcx_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_erfcx\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_erfcx_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_erfcx_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_erfinv(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_erfinv(gc\\_tensor self)
"""
function special_erfinv(self::Tensor)

    __cret = ccall((:atg_special_erfinv, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_erfinv_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_erfinv\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_erfinv_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_erfinv_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_exp2(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_exp2(gc\\_tensor self)
"""
function special_exp2(self::Tensor)

    __cret = ccall((:atg_special_exp2, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_exp2_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_exp2\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_exp2_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_exp2_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_expit(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_expit(gc\\_tensor self)
"""
function special_expit(self::Tensor)

    __cret = ccall((:atg_special_expit, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_expit_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_expit\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_expit_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_expit_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_expm1(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_expm1(gc\\_tensor self)
"""
function special_expm1(self::Tensor)

    __cret = ccall((:atg_special_expm1, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_expm1_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_expm1\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_expm1_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_expm1_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_gammainc(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_gammainc(gc\\_tensor self, gc\\_tensor other)
"""
function special_gammainc(self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_gammainc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_gammainc_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_gammainc\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function special_gammainc_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_gammainc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_gammaincc(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_gammaincc(gc\\_tensor self, gc\\_tensor other)
"""
function special_gammaincc(self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_gammaincc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_gammaincc_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_gammaincc\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function special_gammaincc_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_gammaincc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_gammaln(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_gammaln(gc\\_tensor self)
"""
function special_gammaln(self::Tensor)

    __cret = ccall((:atg_special_gammaln, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_gammaln_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_gammaln\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_gammaln_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_gammaln_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_h(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_h(gc\\_tensor x, gc\\_tensor n)
"""
function special_hermite_polynomial_h(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_hermite_polynomial_h, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_h_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_h\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_hermite_polynomial_h_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_hermite_polynomial_h_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_h_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_h\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_hermite_polynomial_h_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_hermite_polynomial_h_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_h_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_h\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_hermite_polynomial_h_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_hermite_polynomial_h_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_h_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_h\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_hermite_polynomial_h_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_hermite_polynomial_h_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_h_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_h\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_hermite_polynomial_h_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_hermite_polynomial_h_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_he(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_he(gc\\_tensor x, gc\\_tensor n)
"""
function special_hermite_polynomial_he(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_hermite_polynomial_he, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_he_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_he\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_hermite_polynomial_he_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_hermite_polynomial_he_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_he_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_he\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_hermite_polynomial_he_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_hermite_polynomial_he_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_he_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_he\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_hermite_polynomial_he_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_hermite_polynomial_he_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_he_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_he\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_hermite_polynomial_he_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_hermite_polynomial_he_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_hermite_polynomial_he_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_hermite\\_polynomial\\_he\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_hermite_polynomial_he_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_hermite_polynomial_he_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_i0(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_i0(gc\\_tensor self)
"""
function special_i0(self::Tensor)

    __cret = ccall((:atg_special_i0, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_i0_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_i0\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_i0_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_i0_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_i0e(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_i0e(gc\\_tensor self)
"""
function special_i0e(self::Tensor)

    __cret = ccall((:atg_special_i0e, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_i0e_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_i0e\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_i0e_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_i0e_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_i1(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_i1(gc\\_tensor self)
"""
function special_i1(self::Tensor)

    __cret = ccall((:atg_special_i1, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_i1_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_i1\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_i1_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_i1_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_i1e(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_i1e(gc\\_tensor self)
"""
function special_i1e(self::Tensor)

    __cret = ccall((:atg_special_i1e, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_i1e_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_i1e\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_i1e_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_i1e_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_laguerre_polynomial_l(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_laguerre\\_polynomial\\_l(gc\\_tensor x, gc\\_tensor n)
"""
function special_laguerre_polynomial_l(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_laguerre_polynomial_l, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_laguerre_polynomial_l_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_laguerre\\_polynomial\\_l\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_laguerre_polynomial_l_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_laguerre_polynomial_l_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_laguerre_polynomial_l_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_laguerre\\_polynomial\\_l\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_laguerre_polynomial_l_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_laguerre_polynomial_l_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_laguerre_polynomial_l_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_laguerre\\_polynomial\\_l\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_laguerre_polynomial_l_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_laguerre_polynomial_l_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_laguerre_polynomial_l_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_laguerre\\_polynomial\\_l\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_laguerre_polynomial_l_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_laguerre_polynomial_l_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_laguerre_polynomial_l_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_laguerre\\_polynomial\\_l\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_laguerre_polynomial_l_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_laguerre_polynomial_l_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_legendre_polynomial_p(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_legendre\\_polynomial\\_p(gc\\_tensor x, gc\\_tensor n)
"""
function special_legendre_polynomial_p(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_legendre_polynomial_p, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_legendre_polynomial_p_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_legendre\\_polynomial\\_p\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_legendre_polynomial_p_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_legendre_polynomial_p_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_legendre_polynomial_p_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_legendre\\_polynomial\\_p\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_legendre_polynomial_p_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_legendre_polynomial_p_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_legendre_polynomial_p_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_legendre\\_polynomial\\_p\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_legendre_polynomial_p_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_legendre_polynomial_p_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_legendre_polynomial_p_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_legendre\\_polynomial\\_p\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_legendre_polynomial_p_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_legendre_polynomial_p_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_legendre_polynomial_p_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_legendre\\_polynomial\\_p\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_legendre_polynomial_p_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_legendre_polynomial_p_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_log1p(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_log1p(gc\\_tensor self)
"""
function special_log1p(self::Tensor)

    __cret = ccall((:atg_special_log1p, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_log1p_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_log1p\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_log1p_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_log1p_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_log_ndtr(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_log\\_ndtr(gc\\_tensor self)
"""
function special_log_ndtr(self::Tensor)

    __cret = ccall((:atg_special_log_ndtr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_log_ndtr_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_log\\_ndtr\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_log_ndtr_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_log_ndtr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_log_softmax(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_log\\_softmax(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function special_log_softmax(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_special_log_softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    special_logit(self::Tensor, eps_v::Float64, eps_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_logit(gc\\_tensor self, double eps\\_v, int eps\\_null)
"""
function special_logit(self::Tensor, eps_v::Float64, eps_null::Int)

    __cret = ccall((:atg_special_logit, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cint),
                 self.pointer, eps_v, eps_null)
    return tensor_from_ptr(__cret)
end


"""
    special_logit_out(out::Tensor, self::Tensor, eps_v::Float64, eps_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_logit\\_out(gc\\_tensor out, gc\\_tensor self, double eps\\_v, int eps\\_null)
"""
function special_logit_out(out::Tensor, self::Tensor, eps_v::Float64, eps_null::Int)

    __cret = ccall((:atg_special_logit_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cint),
                 out.pointer, self.pointer, eps_v, eps_null)
    return tensor_from_ptr(__cret)
end


"""
    special_logsumexp(self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_logsumexp(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function special_logsumexp(self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_special_logsumexp, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    special_logsumexp_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_logsumexp\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim)
"""
function special_logsumexp_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_special_logsumexp_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    special_modified_bessel_i0(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_modified\\_bessel\\_i0(gc\\_tensor self)
"""
function special_modified_bessel_i0(self::Tensor)

    __cret = ccall((:atg_special_modified_bessel_i0, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_modified_bessel_i0_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_modified\\_bessel\\_i0\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_modified_bessel_i0_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_modified_bessel_i0_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_modified_bessel_i1(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_modified\\_bessel\\_i1(gc\\_tensor self)
"""
function special_modified_bessel_i1(self::Tensor)

    __cret = ccall((:atg_special_modified_bessel_i1, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_modified_bessel_i1_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_modified\\_bessel\\_i1\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_modified_bessel_i1_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_modified_bessel_i1_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_modified_bessel_k0(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_modified\\_bessel\\_k0(gc\\_tensor self)
"""
function special_modified_bessel_k0(self::Tensor)

    __cret = ccall((:atg_special_modified_bessel_k0, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_modified_bessel_k0_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_modified\\_bessel\\_k0\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_modified_bessel_k0_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_modified_bessel_k0_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_modified_bessel_k1(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_modified\\_bessel\\_k1(gc\\_tensor self)
"""
function special_modified_bessel_k1(self::Tensor)

    __cret = ccall((:atg_special_modified_bessel_k1, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_modified_bessel_k1_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_modified\\_bessel\\_k1\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_modified_bessel_k1_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_modified_bessel_k1_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_multigammaln(self::Tensor, p::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_multigammaln(gc\\_tensor self, int64\\_t p)
"""
function special_multigammaln(self::Tensor, p::Int64)

    __cret = ccall((:atg_special_multigammaln, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    special_multigammaln_out(out::Tensor, self::Tensor, p::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_multigammaln\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t p)
"""
function special_multigammaln_out(out::Tensor, self::Tensor, p::Int64)

    __cret = ccall((:atg_special_multigammaln_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, p)
    return tensor_from_ptr(__cret)
end


"""
    special_ndtr(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_ndtr(gc\\_tensor self)
"""
function special_ndtr(self::Tensor)

    __cret = ccall((:atg_special_ndtr, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_ndtr_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_ndtr\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_ndtr_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_ndtr_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_ndtri(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_ndtri(gc\\_tensor self)
"""
function special_ndtri(self::Tensor)

    __cret = ccall((:atg_special_ndtri, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_ndtri_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_ndtri\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_ndtri_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_ndtri_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_polygamma(n::Int64, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_polygamma(int64\\_t n, gc\\_tensor self)
"""
function special_polygamma(n::Int64, self::Tensor)

    __cret = ccall((:atg_special_polygamma, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Ptr{Cvoid}),
                 n, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_polygamma_out(out::Tensor, n::Int64, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_polygamma\\_out(gc\\_tensor out, int64\\_t n, gc\\_tensor self)
"""
function special_polygamma_out(out::Tensor, n::Int64, self::Tensor)

    __cret = ccall((:atg_special_polygamma_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}),
                 out.pointer, n, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_psi(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_psi(gc\\_tensor self)
"""
function special_psi(self::Tensor)

    __cret = ccall((:atg_special_psi, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_psi_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_psi\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_psi_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_psi_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_round(self::Tensor, decimals::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_round(gc\\_tensor self, int64\\_t decimals)
"""
function special_round(self::Tensor, decimals::Int64)

    __cret = ccall((:atg_special_round, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, decimals)
    return tensor_from_ptr(__cret)
end


"""
    special_round_out(out::Tensor, self::Tensor, decimals::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_round\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t decimals)
"""
function special_round_out(out::Tensor, self::Tensor, decimals::Int64)

    __cret = ccall((:atg_special_round_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, decimals)
    return tensor_from_ptr(__cret)
end


"""
    special_scaled_modified_bessel_k0(x::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_scaled\\_modified\\_bessel\\_k0(gc\\_tensor x)
"""
function special_scaled_modified_bessel_k0(x::Tensor)

    __cret = ccall((:atg_special_scaled_modified_bessel_k0, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 x.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_scaled_modified_bessel_k0_out(out::Tensor, x::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_scaled\\_modified\\_bessel\\_k0\\_out(gc\\_tensor out, gc\\_tensor x)
"""
function special_scaled_modified_bessel_k0_out(out::Tensor, x::Tensor)

    __cret = ccall((:atg_special_scaled_modified_bessel_k0_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_scaled_modified_bessel_k1(x::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_scaled\\_modified\\_bessel\\_k1(gc\\_tensor x)
"""
function special_scaled_modified_bessel_k1(x::Tensor)

    __cret = ccall((:atg_special_scaled_modified_bessel_k1, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 x.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_scaled_modified_bessel_k1_out(out::Tensor, x::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_scaled\\_modified\\_bessel\\_k1\\_out(gc\\_tensor out, gc\\_tensor x)
"""
function special_scaled_modified_bessel_k1_out(out::Tensor, x::Tensor)

    __cret = ccall((:atg_special_scaled_modified_bessel_k1_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_t(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_t(gc\\_tensor x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_t(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_t, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_t_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_t\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_shifted_chebyshev_polynomial_t_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_t_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_t_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_t\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_shifted_chebyshev_polynomial_t_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_t_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_t_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_t\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_t_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_t_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_t_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_t\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_t_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_t_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_t_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_t\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_t_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_t_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_u(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_u(gc\\_tensor x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_u(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_u, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_u_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_u\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_shifted_chebyshev_polynomial_u_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_u_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_u_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_u\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_shifted_chebyshev_polynomial_u_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_u_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_u_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_u\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_u_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_u_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_u_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_u\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_u_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_u_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_u_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_u\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_u_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_u_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_v(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_v(gc\\_tensor x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_v(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_v, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_v_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_v\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_shifted_chebyshev_polynomial_v_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_v_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_v_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_v\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_shifted_chebyshev_polynomial_v_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_v_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_v_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_v\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_v_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_v_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_v_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_v\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_v_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_v_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_v_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_v\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_v_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_v_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_w(x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_w(gc\\_tensor x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_w(x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_w, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_w_n_scalar(x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_w\\_n\\_scalar(gc\\_tensor x, scalar n)
"""
function special_shifted_chebyshev_polynomial_w_n_scalar(x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_w_n_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_w_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_w\\_n\\_scalar\\_out(gc\\_tensor out, gc\\_tensor x, scalar n)
"""
function special_shifted_chebyshev_polynomial_w_n_scalar_out(out::Tensor, x::Tensor, n::TorchNumber)
    n_s_ = Scalar(n)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_w_n_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_w_out(out::Tensor, x::Tensor, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_w\\_out(gc\\_tensor out, gc\\_tensor x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_w_out(out::Tensor, x::Tensor, n::Tensor)

    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_w_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_w_x_scalar(x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_w\\_x\\_scalar(scalar x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_w_x_scalar(x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_w_x_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_shifted_chebyshev_polynomial_w_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_shifted\\_chebyshev\\_polynomial\\_w\\_x\\_scalar\\_out(gc\\_tensor out, scalar x, gc\\_tensor n)
"""
function special_shifted_chebyshev_polynomial_w_x_scalar_out(out::Tensor, x::TorchNumber, n::Tensor)
    x_s_ = Scalar(x)
    __cret = ccall((:atg_special_shifted_chebyshev_polynomial_w_x_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x_s_.pointer, n.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_sinc(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_sinc(gc\\_tensor self)
"""
function special_sinc(self::Tensor)

    __cret = ccall((:atg_special_sinc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_sinc_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_sinc\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function special_sinc_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_special_sinc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_softmax(self::Tensor, dim::Int64, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_softmax(gc\\_tensor self, int64\\_t dim, int dtype)
"""
function special_softmax(self::Tensor, dim::Int64, dtype::Int)
    dim = dim - 1
    __cret = ccall((:atg_special_softmax, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, dim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    special_spherical_bessel_j0(x::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_spherical\\_bessel\\_j0(gc\\_tensor x)
"""
function special_spherical_bessel_j0(x::Tensor)

    __cret = ccall((:atg_special_spherical_bessel_j0, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 x.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_spherical_bessel_j0_out(out::Tensor, x::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_spherical\\_bessel\\_j0\\_out(gc\\_tensor out, gc\\_tensor x)
"""
function special_spherical_bessel_j0_out(out::Tensor, x::Tensor)

    __cret = ccall((:atg_special_spherical_bessel_j0_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, x.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlog1py(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlog1py(gc\\_tensor self, gc\\_tensor other)
"""
function special_xlog1py(self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_xlog1py, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlog1py_other_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlog1py\\_other\\_scalar(gc\\_tensor self, scalar other)
"""
function special_xlog1py_other_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_special_xlog1py_other_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlog1py_other_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlog1py\\_other\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function special_xlog1py_other_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_special_xlog1py_other_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlog1py_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlog1py\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function special_xlog1py_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_xlog1py_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlog1py_self_scalar(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlog1py\\_self\\_scalar(scalar self, gc\\_tensor other)
"""
function special_xlog1py_self_scalar(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_special_xlog1py_self_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlog1py_self_scalar_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlog1py\\_self\\_scalar\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function special_xlog1py_self_scalar_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_special_xlog1py_self_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlogy(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlogy(gc\\_tensor self, gc\\_tensor other)
"""
function special_xlogy(self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_xlogy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlogy_other_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlogy\\_other\\_scalar(gc\\_tensor self, scalar other)
"""
function special_xlogy_other_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_special_xlogy_other_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlogy_other_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlogy\\_other\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function special_xlogy_other_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_special_xlogy_other_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlogy_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlogy\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function special_xlogy_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_xlogy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlogy_self_scalar(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlogy\\_self\\_scalar(scalar self, gc\\_tensor other)
"""
function special_xlogy_self_scalar(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_special_xlogy_self_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_xlogy_self_scalar_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_xlogy\\_self\\_scalar\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function special_xlogy_self_scalar_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_special_xlogy_self_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_zeta(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_zeta(gc\\_tensor self, gc\\_tensor other)
"""
function special_zeta(self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_zeta, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_zeta_other_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_zeta\\_other\\_scalar(gc\\_tensor self, scalar other)
"""
function special_zeta_other_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_special_zeta_other_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_zeta_other_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_zeta\\_other\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function special_zeta_other_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_special_zeta_other_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_zeta_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_zeta\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function special_zeta_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_special_zeta_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_zeta_self_scalar(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_zeta\\_self\\_scalar(scalar self, gc\\_tensor other)
"""
function special_zeta_self_scalar(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_special_zeta_self_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    special_zeta_self_scalar_out(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_special\\_zeta\\_self\\_scalar\\_out(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function special_zeta_self_scalar_out(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_special_zeta_self_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
import Base.split


"""
    split(self::Tensor, split_size::Int64, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_split(gc\\_tensor self, int64\\_t split\\_size, int64\\_t dim)
"""
function split(self::Tensor, split_size::Int64, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_split, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, split_size, dim)
    return __cret
end


"""
    split_copy(self::Tensor, split_size::Int64, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_split\\_copy(gc\\_tensor self, int64\\_t split\\_size, int64\\_t dim)
"""
function split_copy(self::Tensor, split_size::Int64, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_split_copy, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, split_size, dim)
    return __cret
end
# split_copy_tensor_out ignored



"""
    split_sizes(self::Tensor, split_size_data::Array{Int64}, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_split\\_sizes(gc\\_tensor self, int64\\_t *split\\_size\\_data, int split\\_size\\_len, int64\\_t dim)
"""
function split_sizes(self::Tensor, split_size_data::Array{Int64}, dim::Int64)
    split_size_len = length(split_size_data)
    dim = dim - 1
    __cret = ccall((:atg_split_sizes, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, split_size_data, split_size_len, dim)
    return __cret
end


"""
    split_with_sizes(self::Tensor, split_sizes_data::Array{Int64}, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_split\\_with\\_sizes(gc\\_tensor self, int64\\_t *split\\_sizes\\_data, int split\\_sizes\\_len, int64\\_t dim)
"""
function split_with_sizes(self::Tensor, split_sizes_data::Array{Int64}, dim::Int64)
    split_sizes_len = length(split_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_split_with_sizes, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, split_sizes_data, split_sizes_len, dim)
    return __cret
end


"""
    split_with_sizes_copy(self::Tensor, split_sizes_data::Array{Int64}, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_split\\_with\\_sizes\\_copy(gc\\_tensor self, int64\\_t *split\\_sizes\\_data, int split\\_sizes\\_len, int64\\_t dim)
"""
function split_with_sizes_copy(self::Tensor, split_sizes_data::Array{Int64}, dim::Int64)
    split_sizes_len = length(split_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_split_with_sizes_copy, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, split_sizes_data, split_sizes_len, dim)
    return __cret
end
# split_with_sizes_copy_out ignored

import Base.sqrt


"""
    sqrt(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sqrt(gc\\_tensor self)
"""
function sqrt(self::Tensor)

    __cret = ccall((:atg_sqrt, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sqrt!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sqrt\\_(gc\\_tensor self)
"""
function sqrt!(self::Tensor)

    __cret = ccall((:atg_sqrt_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sqrt_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sqrt\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function sqrt_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_sqrt_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    square(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_square(gc\\_tensor self)
"""
function square(self::Tensor)

    __cret = ccall((:atg_square, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    square!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_square\\_(gc\\_tensor self)
"""
function square!(self::Tensor)

    __cret = ccall((:atg_square_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    square_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_square\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function square_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_square_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    squeeze(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_squeeze(gc\\_tensor self)
"""
function squeeze(self::Tensor)

    __cret = ccall((:atg_squeeze, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    squeeze!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_(gc\\_tensor self)
"""
function squeeze!(self::Tensor)

    __cret = ccall((:atg_squeeze_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_copy(gc\\_tensor self)
"""
function squeeze_copy(self::Tensor)

    __cret = ccall((:atg_squeeze_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_copy_dim(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_copy\\_dim(gc\\_tensor self, int64\\_t dim)
"""
function squeeze_copy_dim(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_squeeze_copy_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_copy_dim_out(out::Tensor, self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_copy\\_dim\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim)
"""
function squeeze_copy_dim_out(out::Tensor, self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_squeeze_copy_dim_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_copy_dims(self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_copy\\_dims(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function squeeze_copy_dims(self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg_squeeze_copy_dims, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_copy_dims_out(out::Tensor, self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_copy\\_dims\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function squeeze_copy_dims_out(out::Tensor, self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg_squeeze_copy_dims_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function squeeze_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_squeeze_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_dim(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_dim(gc\\_tensor self, int64\\_t dim)
"""
function squeeze_dim(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_squeeze_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_dim!(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_dim\\_(gc\\_tensor self, int64\\_t dim)
"""
function squeeze_dim!(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_squeeze_dim_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_dims(self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_dims(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function squeeze_dims(self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg_squeeze_dims, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    squeeze_dims!(self::Tensor, dim_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_squeeze\\_dims\\_(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len)
"""
function squeeze_dims!(self::Tensor, dim_data::Array{Int64})
    dim_len = length(dim_data)
    __cret = ccall((:atg_squeeze_dims_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dim_data, dim_len)
    return tensor_from_ptr(__cret)
end


"""
    sspaddmm(self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sspaddmm(gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function sspaddmm(self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_sspaddmm, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sspaddmm_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sspaddmm\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor mat1, gc\\_tensor mat2)
"""
function sspaddmm_out(out::Tensor, self::Tensor, mat1::Tensor, mat2::Tensor)

    __cret = ccall((:atg_sspaddmm_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, mat1.pointer, mat2.pointer)
    return tensor_from_ptr(__cret)
end
# stack ignored

# stack_out ignored



"""
    std(self::Tensor, unbiased::Int)

 Wrapper of C++ function raw\\_tensor atg\\_std(gc\\_tensor self, int unbiased)
"""
function std(self::Tensor, unbiased::Int)

    __cret = ccall((:atg_std, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, unbiased)
    return tensor_from_ptr(__cret)
end


"""
    std_correction(self::Tensor, dim_data::Array{Int64}, correction::TorchNumber, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_std\\_correction(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, scalar correction, int keepdim)
"""
function std_correction(self::Tensor, dim_data::Array{Int64}, correction::TorchNumber, keepdim::Int)
    dim_len = length(dim_data)
    correction_s_ = Scalar(correction)
    __cret = ccall((:atg_std_correction, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, dim_data, dim_len, correction_s_.pointer, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    std_correction_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, correction::TorchNumber, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_std\\_correction\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, scalar correction, int keepdim)
"""
function std_correction_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, correction::TorchNumber, keepdim::Int)
    dim_len = length(dim_data)
    correction_s_ = Scalar(correction)
    __cret = ccall((:atg_std_correction_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, correction_s_.pointer, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    std_dim(self::Tensor, dim_data::Array{Int64}, unbiased::Int, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_std\\_dim(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int unbiased, int keepdim)
"""
function std_dim(self::Tensor, dim_data::Array{Int64}, unbiased::Int, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_std_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dim_data, dim_len, unbiased, keepdim)
    return tensor_from_ptr(__cret)
end
# std_mean ignored

# std_mean_correction ignored

# std_mean_correction_out ignored

# std_mean_dim ignored



"""
    std_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, unbiased::Int, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_std\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int unbiased, int keepdim)
"""
function std_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, unbiased::Int, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_std_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, unbiased, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    stft(self::Tensor, n_fft::Int64, hop_length_v::Int64, hop_length_null::Int, win_length_v::Int64, win_length_null::Int, window::Tensor, normalized::Int, onesided::Int, return_complex::Int)

 Wrapper of C++ function raw\\_tensor atg\\_stft(gc\\_tensor self, int64\\_t n\\_fft, int64\\_t hop\\_length\\_v, int hop\\_length\\_null, int64\\_t win\\_length\\_v, int win\\_length\\_null, gc\\_tensor window, int normalized, int onesided, int return\\_complex)
"""
function stft(self::Tensor, n_fft::Int64, hop_length_v::Int64, hop_length_null::Int, win_length_v::Int64, win_length_null::Int, window::Tensor, normalized::Int, onesided::Int, return_complex::Int)

    __cret = ccall((:atg_stft, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Cint, Clonglong, Cint, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, n_fft, hop_length_v, hop_length_null, win_length_v, win_length_null, window.pointer, normalized, onesided, return_complex)
    return tensor_from_ptr(__cret)
end
# stft_center ignored

import Base.stride


"""
    stride(self::Tensor, dim::Int64)

 Wrapper of C++ function int64\\_t atg\\_stride(gc\\_tensor self, int64\\_t dim)
"""
function stride(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_stride, :libtorch_capi),
                 Int, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return __cret
end


"""
    sub(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sub(gc\\_tensor self, gc\\_tensor other)
"""
function sub(self::Tensor, other::Tensor)

    __cret = ccall((:atg_sub, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sub!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sub\\_(gc\\_tensor self, gc\\_tensor other)
"""
function sub!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_sub_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sub_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_sub\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function sub_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_sub_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sub_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_sub\\_scalar(gc\\_tensor self, scalar other)
"""
function sub_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_sub_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sub_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_sub\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function sub_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_sub_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    sub_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_sub\\_scalar\\_out(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function sub_scalar_out(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_sub_scalar_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    subtract(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_subtract(gc\\_tensor self, gc\\_tensor other)
"""
function subtract(self::Tensor, other::Tensor)

    __cret = ccall((:atg_subtract, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    subtract!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_subtract\\_(gc\\_tensor self, gc\\_tensor other)
"""
function subtract!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_subtract_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    subtract_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_subtract\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function subtract_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_subtract_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    subtract_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_subtract\\_scalar(gc\\_tensor self, scalar other)
"""
function subtract_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_subtract_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    subtract_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_subtract\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function subtract_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_subtract_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end
import Base.sum


"""
    sum(self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sum(gc\\_tensor self, int dtype)
"""
function sum(self::Tensor, dtype::Int)

    __cret = ccall((:atg_sum, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    sum_dim_intlist(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sum\\_dim\\_intlist(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function sum_dim_intlist(self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_sum_dim_intlist, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    sum_intlist_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sum\\_intlist\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int keepdim, int dtype)
"""
function sum_intlist_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, keepdim::Int, dtype::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_sum_intlist_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, keepdim, dtype)
    return tensor_from_ptr(__cret)
end


"""
    sum_out(out::Tensor, self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_sum\\_out(gc\\_tensor out, gc\\_tensor self, int dtype)
"""
function sum_out(out::Tensor, self::Tensor, dtype::Int)

    __cret = ccall((:atg_sum_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    sum_to_size(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_sum\\_to\\_size(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function sum_to_size(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_sum_to_size, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end
# svd ignored

# svd_u ignored



"""
    swapaxes(self::Tensor, axis0::Int64, axis1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_swapaxes(gc\\_tensor self, int64\\_t axis0, int64\\_t axis1)
"""
function swapaxes(self::Tensor, axis0::Int64, axis1::Int64)

    __cret = ccall((:atg_swapaxes, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, axis0, axis1)
    return tensor_from_ptr(__cret)
end


"""
    swapaxes!(self::Tensor, axis0::Int64, axis1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_swapaxes\\_(gc\\_tensor self, int64\\_t axis0, int64\\_t axis1)
"""
function swapaxes!(self::Tensor, axis0::Int64, axis1::Int64)

    __cret = ccall((:atg_swapaxes_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, axis0, axis1)
    return tensor_from_ptr(__cret)
end


"""
    swapdims(self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_swapdims(gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function swapdims(self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg_swapdims, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    swapdims!(self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_swapdims\\_(gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function swapdims!(self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg_swapdims_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    t(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_t(gc\\_tensor self)
"""
function t(self::Tensor)

    __cret = ccall((:atg_t, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    t_(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_t\\_(gc\\_tensor self)
"""
function t_(self::Tensor)

    __cret = ccall((:atg_t_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    t_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_t\\_copy(gc\\_tensor self)
"""
function t_copy(self::Tensor)

    __cret = ccall((:atg_t_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    t_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_t\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function t_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_t_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    take(self::Tensor, index::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_take(gc\\_tensor self, gc\\_tensor index)
"""
function take(self::Tensor, index::Tensor)

    __cret = ccall((:atg_take, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, index.pointer)
    return tensor_from_ptr(__cret)
end


"""
    take_along_dim(self::Tensor, indices::Tensor, dim_v::Int64, dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_take\\_along\\_dim(gc\\_tensor self, gc\\_tensor indices, int64\\_t dim\\_v, int dim\\_null)
"""
function take_along_dim(self::Tensor, indices::Tensor, dim_v::Int64, dim_null::Int)

    __cret = ccall((:atg_take_along_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 self.pointer, indices.pointer, dim_v, dim_null)
    return tensor_from_ptr(__cret)
end


"""
    take_along_dim_out(out::Tensor, self::Tensor, indices::Tensor, dim_v::Int64, dim_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_take\\_along\\_dim\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor indices, int64\\_t dim\\_v, int dim\\_null)
"""
function take_along_dim_out(out::Tensor, self::Tensor, indices::Tensor, dim_v::Int64, dim_null::Int)

    __cret = ccall((:atg_take_along_dim_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Cint),
                 out.pointer, self.pointer, indices.pointer, dim_v, dim_null)
    return tensor_from_ptr(__cret)
end


"""
    take_out(out::Tensor, self::Tensor, index::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_take\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor index)
"""
function take_out(out::Tensor, self::Tensor, index::Tensor)

    __cret = ccall((:atg_take_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, index.pointer)
    return tensor_from_ptr(__cret)
end
import Base.tan


"""
    tan(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_tan(gc\\_tensor self)
"""
function tan(self::Tensor)

    __cret = ccall((:atg_tan, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    tan!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_tan\\_(gc\\_tensor self)
"""
function tan!(self::Tensor)

    __cret = ccall((:atg_tan_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    tan_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_tan\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function tan_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_tan_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.tanh


"""
    tanh(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_tanh(gc\\_tensor self)
"""
function tanh(self::Tensor)

    __cret = ccall((:atg_tanh, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    tanh!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_tanh\\_(gc\\_tensor self)
"""
function tanh!(self::Tensor)

    __cret = ccall((:atg_tanh_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    tanh_backward(grad_output::Tensor, output::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_tanh\\_backward(gc\\_tensor grad\\_output, gc\\_tensor output)
"""
function tanh_backward(grad_output::Tensor, output::Tensor)

    __cret = ccall((:atg_tanh_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, output.pointer)
    return tensor_from_ptr(__cret)
end


"""
    tanh_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_tanh\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor output)
"""
function tanh_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output::Tensor)

    __cret = ccall((:atg_tanh_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, output.pointer)
    return tensor_from_ptr(__cret)
end


"""
    tanh_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_tanh\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function tanh_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_tanh_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    tensor_split(self::Tensor, sections::Int64, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_tensor\\_split(gc\\_tensor self, int64\\_t sections, int64\\_t dim)
"""
function tensor_split(self::Tensor, sections::Int64, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_tensor_split, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, sections, dim)
    return __cret
end


"""
    tensor_split_indices(self::Tensor, indices_data::Array{Int64}, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_tensor\\_split\\_indices(gc\\_tensor self, int64\\_t *indices\\_data, int indices\\_len, int64\\_t dim)
"""
function tensor_split_indices(self::Tensor, indices_data::Array{Int64}, dim::Int64)
    indices_len = length(indices_data)
    dim = dim - 1
    __cret = ccall((:atg_tensor_split_indices, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, indices_data, indices_len, dim)
    return __cret
end


"""
    tensor_split_tensor_indices_or_sections(self::Tensor, tensor_indices_or_sections::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_tensor\\_split\\_tensor\\_indices\\_or\\_sections(gc\\_tensor self, gc\\_tensor tensor\\_indices\\_or\\_sections, int64\\_t dim)
"""
function tensor_split_tensor_indices_or_sections(self::Tensor, tensor_indices_or_sections::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_tensor_split_tensor_indices_or_sections, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 self.pointer, tensor_indices_or_sections.pointer, dim)
    return __cret
end


"""
    tensordot(self::Tensor, other::Tensor, dims_self_data::Array{Int64}, dims_other_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_tensordot(gc\\_tensor self, gc\\_tensor other, int64\\_t *dims\\_self\\_data, int dims\\_self\\_len, int64\\_t *dims\\_other\\_data, int dims\\_other\\_len)
"""
function tensordot(self::Tensor, other::Tensor, dims_self_data::Array{Int64}, dims_other_data::Array{Int64})
    dims_self_len = length(dims_self_data)
    dims_other_len = length(dims_other_data)
    __cret = ccall((:atg_tensordot, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, other.pointer, dims_self_data, dims_self_len, dims_other_data, dims_other_len)
    return tensor_from_ptr(__cret)
end


"""
    tensordot_out(out::Tensor, self::Tensor, other::Tensor, dims_self_data::Array{Int64}, dims_other_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_tensordot\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other, int64\\_t *dims\\_self\\_data, int dims\\_self\\_len, int64\\_t *dims\\_other\\_data, int dims\\_other\\_len)
"""
function tensordot_out(out::Tensor, self::Tensor, other::Tensor, dims_self_data::Array{Int64}, dims_other_data::Array{Int64})
    dims_self_len = length(dims_self_data)
    dims_other_len = length(dims_other_data)
    __cret = ccall((:atg_tensordot_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, other.pointer, dims_self_data, dims_self_len, dims_other_data, dims_other_len)
    return tensor_from_ptr(__cret)
end


"""
    threshold(self::Tensor, threshold::TorchNumber, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_threshold(gc\\_tensor self, scalar threshold, scalar value)
"""
function threshold(self::Tensor, threshold::TorchNumber, value::TorchNumber)
    threshold_s_ = Scalar(threshold)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_threshold, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, threshold_s_.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    threshold!(self::Tensor, threshold::TorchNumber, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_threshold\\_(gc\\_tensor self, scalar threshold, scalar value)
"""
function threshold!(self::Tensor, threshold::TorchNumber, value::TorchNumber)
    threshold_s_ = Scalar(threshold)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_threshold_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, threshold_s_.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    threshold_backward(grad_output::Tensor, self::Tensor, threshold::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_threshold\\_backward(gc\\_tensor grad\\_output, gc\\_tensor self, scalar threshold)
"""
function threshold_backward(grad_output::Tensor, self::Tensor, threshold::TorchNumber)
    threshold_s_ = Scalar(threshold)
    __cret = ccall((:atg_threshold_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_output.pointer, self.pointer, threshold_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    threshold_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, threshold::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_threshold\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, gc\\_tensor self, scalar threshold)
"""
function threshold_backward_grad_input(grad_input::Tensor, grad_output::Tensor, self::Tensor, threshold::TorchNumber)
    threshold_s_ = Scalar(threshold)
    __cret = ccall((:atg_threshold_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 grad_input.pointer, grad_output.pointer, self.pointer, threshold_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    threshold_out(out::Tensor, self::Tensor, threshold::TorchNumber, value::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_threshold\\_out(gc\\_tensor out, gc\\_tensor self, scalar threshold, scalar value)
"""
function threshold_out(out::Tensor, self::Tensor, threshold::TorchNumber, value::TorchNumber)
    threshold_s_ = Scalar(threshold)
    value_s_ = Scalar(value)
    __cret = ccall((:atg_threshold_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, threshold_s_.pointer, value_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    tile(self::Tensor, dims_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_tile(gc\\_tensor self, int64\\_t *dims\\_data, int dims\\_len)
"""
function tile(self::Tensor, dims_data::Array{Int64})
    dims_len = length(dims_data)
    __cret = ccall((:atg_tile, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, dims_data, dims_len)
    return tensor_from_ptr(__cret)
end


"""
    to(self::Tensor, device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to(gc\\_tensor self, int device)
"""
function to(self::Tensor, device::Int)

    __cret = ccall((:atg_to, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, device)
    return tensor_from_ptr(__cret)
end


"""
    to_dense(self::Tensor, dtype::Int, masked_grad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_dense(gc\\_tensor self, int dtype, int masked\\_grad)
"""
function to_dense(self::Tensor, dtype::Int, masked_grad::Int)

    __cret = ccall((:atg_to_dense, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint),
                 self.pointer, dtype, masked_grad)
    return tensor_from_ptr(__cret)
end


"""
    to_dense_backward(grad::Tensor, input::Tensor, masked_grad::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_dense\\_backward(gc\\_tensor grad, gc\\_tensor input, int masked\\_grad)
"""
function to_dense_backward(grad::Tensor, input::Tensor, masked_grad::Int)

    __cret = ccall((:atg_to_dense_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad.pointer, input.pointer, masked_grad)
    return tensor_from_ptr(__cret)
end


"""
    to_device(self::Tensor, device::Int, dtype::Int, non_blocking::Int, copy::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_device(gc\\_tensor self, int device, int dtype, int non\\_blocking, int copy)
"""
function to_device(self::Tensor, device::Int, dtype::Int, non_blocking::Int, copy::Int)

    __cret = ccall((:atg_to_device, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint, Cint),
                 self.pointer, device, dtype, non_blocking, copy)
    return tensor_from_ptr(__cret)
end


"""
    to_dtype(self::Tensor, dtype::Int, non_blocking::Int, copy::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_dtype(gc\\_tensor self, int dtype, int non\\_blocking, int copy)
"""
function to_dtype(self::Tensor, dtype::Int, non_blocking::Int, copy::Int)

    __cret = ccall((:atg_to_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dtype, non_blocking, copy)
    return tensor_from_ptr(__cret)
end


"""
    to_dtype_layout(self::Tensor, options_kind::Int, options_device::Int, non_blocking::Int, copy::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_dtype\\_layout(gc\\_tensor self, int options\\_kind, int options\\_device, int non\\_blocking, int copy)
"""
function to_dtype_layout(self::Tensor, options_kind::Int, options_device::Int, non_blocking::Int, copy::Int)

    __cret = ccall((:atg_to_dtype_layout, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint, Cint),
                 self.pointer, options_kind, options_device, non_blocking, copy)
    return tensor_from_ptr(__cret)
end


"""
    to_mkldnn(self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_mkldnn(gc\\_tensor self, int dtype)
"""
function to_mkldnn(self::Tensor, dtype::Int)

    __cret = ccall((:atg_to_mkldnn, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    to_mkldnn_backward(grad::Tensor, input::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_mkldnn\\_backward(gc\\_tensor grad, gc\\_tensor input)
"""
function to_mkldnn_backward(grad::Tensor, input::Tensor)

    __cret = ccall((:atg_to_mkldnn_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 grad.pointer, input.pointer)
    return tensor_from_ptr(__cret)
end


"""
    to_mkldnn_out(out::Tensor, self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_mkldnn\\_out(gc\\_tensor out, gc\\_tensor self, int dtype)
"""
function to_mkldnn_out(out::Tensor, self::Tensor, dtype::Int)

    __cret = ccall((:atg_to_mkldnn_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    to_other(self::Tensor, other::Tensor, non_blocking::Int, copy::Int)

 Wrapper of C++ function raw\\_tensor atg\\_to\\_other(gc\\_tensor self, gc\\_tensor other, int non\\_blocking, int copy)
"""
function to_other(self::Tensor, other::Tensor, non_blocking::Int, copy::Int)

    __cret = ccall((:atg_to_other, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 self.pointer, other.pointer, non_blocking, copy)
    return tensor_from_ptr(__cret)
end


"""
    to_padded_tensor(self::Tensor, padding::Float64, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_to\\_padded\\_tensor(gc\\_tensor self, double padding, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function to_padded_tensor(self::Tensor, padding::Float64, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_to_padded_tensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Ptr{Cvoid}, Cint),
                 self.pointer, padding, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end


"""
    to_padded_tensor_out(out::Tensor, self::Tensor, padding::Float64, output_size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_to\\_padded\\_tensor\\_out(gc\\_tensor out, gc\\_tensor self, double padding, int64\\_t *output\\_size\\_data, int output\\_size\\_len)
"""
function to_padded_tensor_out(out::Tensor, self::Tensor, padding::Float64, output_size_data::Array{Int64})
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_to_padded_tensor_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, padding, output_size_data, output_size_len)
    return tensor_from_ptr(__cret)
end
# topk ignored

# topk_values ignored



"""
    totype(self::Tensor, scalar_type::Int)

 Wrapper of C++ function raw\\_tensor atg\\_totype(gc\\_tensor self, int scalar\\_type)
"""
function totype(self::Tensor, scalar_type::Int)

    __cret = ccall((:atg_totype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, scalar_type)
    return tensor_from_ptr(__cret)
end


"""
    trace(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_trace(gc\\_tensor self)
"""
function trace(self::Tensor)

    __cret = ccall((:atg_trace, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    trace_backward(grad::Tensor, sizes_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_trace\\_backward(gc\\_tensor grad, int64\\_t *sizes\\_data, int sizes\\_len)
"""
function trace_backward(grad::Tensor, sizes_data::Array{Int64})
    sizes_len = length(sizes_data)
    __cret = ccall((:atg_trace_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 grad.pointer, sizes_data, sizes_len)
    return tensor_from_ptr(__cret)
end


"""
    trace_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_trace\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function trace_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_trace_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.transpose


"""
    transpose(self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_transpose(gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function transpose(self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg_transpose, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    transpose!(self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_transpose\\_(gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function transpose!(self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg_transpose_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    transpose_copy(self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_transpose\\_copy(gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function transpose_copy(self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg_transpose_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    transpose_copy_int_out(out::Tensor, self::Tensor, dim0::Int64, dim1::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_transpose\\_copy\\_int\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim0, int64\\_t dim1)
"""
function transpose_copy_int_out(out::Tensor, self::Tensor, dim0::Int64, dim1::Int64)

    __cret = ccall((:atg_transpose_copy_int_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong),
                 out.pointer, self.pointer, dim0, dim1)
    return tensor_from_ptr(__cret)
end


"""
    trapezoid(y::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_trapezoid(gc\\_tensor y, int64\\_t dim)
"""
function trapezoid(y::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_trapezoid, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 y.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    trapezoid_x(y::Tensor, x::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_trapezoid\\_x(gc\\_tensor y, gc\\_tensor x, int64\\_t dim)
"""
function trapezoid_x(y::Tensor, x::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_trapezoid_x, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 y.pointer, x.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    trapz(y::Tensor, x::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_trapz(gc\\_tensor y, gc\\_tensor x, int64\\_t dim)
"""
function trapz(y::Tensor, x::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_trapz, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 y.pointer, x.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    trapz_dx(y::Tensor, dx::Float64, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_trapz\\_dx(gc\\_tensor y, double dx, int64\\_t dim)
"""
function trapz_dx(y::Tensor, dx::Float64, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_trapz_dx, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Clonglong),
                 y.pointer, dx, dim)
    return tensor_from_ptr(__cret)
end
# triangular_solve ignored

# triangular_solve_x ignored



"""
    tril(self::Tensor, diagonal::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_tril(gc\\_tensor self, int64\\_t diagonal)
"""
function tril(self::Tensor, diagonal::Int64)

    __cret = ccall((:atg_tril, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, diagonal)
    return tensor_from_ptr(__cret)
end


"""
    tril!(self::Tensor, diagonal::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_tril\\_(gc\\_tensor self, int64\\_t diagonal)
"""
function tril!(self::Tensor, diagonal::Int64)

    __cret = ccall((:atg_tril_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, diagonal)
    return tensor_from_ptr(__cret)
end


"""
    tril_indices(row::Int64, col::Int64, offset::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_tril\\_indices(int64\\_t row, int64\\_t col, int64\\_t offset, int options\\_kind, int options\\_device)
"""
function tril_indices(row::Int64, col::Int64, offset::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_tril_indices, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Clonglong, Clonglong, Cint, Cint),
                 row, col, offset, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    tril_indices_out(out::Tensor, row::Int64, col::Int64, offset::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_tril\\_indices\\_out(gc\\_tensor out, int64\\_t row, int64\\_t col, int64\\_t offset)
"""
function tril_indices_out(out::Tensor, row::Int64, col::Int64, offset::Int64)

    __cret = ccall((:atg_tril_indices_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 out.pointer, row, col, offset)
    return tensor_from_ptr(__cret)
end


"""
    tril_out(out::Tensor, self::Tensor, diagonal::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_tril\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t diagonal)
"""
function tril_out(out::Tensor, self::Tensor, diagonal::Int64)

    __cret = ccall((:atg_tril_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, diagonal)
    return tensor_from_ptr(__cret)
end


"""
    triplet_margin_loss(anchor::Tensor, positive::Tensor, negative::Tensor, margin::Float64, p::Float64, eps::Float64, swap::Int, reduction::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_triplet\\_margin\\_loss(gc\\_tensor anchor, gc\\_tensor positive, gc\\_tensor negative, double margin, double p, double eps, int swap, int64\\_t reduction)
"""
function triplet_margin_loss(anchor::Tensor, positive::Tensor, negative::Tensor, margin::Float64, p::Float64, eps::Float64, swap::Int, reduction::Int64)

    __cret = ccall((:atg_triplet_margin_loss, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble, Cdouble, Cint, Clonglong),
                 anchor.pointer, positive.pointer, negative.pointer, margin, p, eps, swap, reduction)
    return tensor_from_ptr(__cret)
end


"""
    triu(self::Tensor, diagonal::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_triu(gc\\_tensor self, int64\\_t diagonal)
"""
function triu(self::Tensor, diagonal::Int64)

    __cret = ccall((:atg_triu, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, diagonal)
    return tensor_from_ptr(__cret)
end


"""
    triu!(self::Tensor, diagonal::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_triu\\_(gc\\_tensor self, int64\\_t diagonal)
"""
function triu!(self::Tensor, diagonal::Int64)

    __cret = ccall((:atg_triu_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, diagonal)
    return tensor_from_ptr(__cret)
end


"""
    triu_indices(row::Int64, col::Int64, offset::Int64, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_triu\\_indices(int64\\_t row, int64\\_t col, int64\\_t offset, int options\\_kind, int options\\_device)
"""
function triu_indices(row::Int64, col::Int64, offset::Int64, options_kind::Int, options_device::Int)

    __cret = ccall((:atg_triu_indices, :libtorch_capi),
                 Ptr{Cvoid}, (Clonglong, Clonglong, Clonglong, Cint, Cint),
                 row, col, offset, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    triu_indices_out(out::Tensor, row::Int64, col::Int64, offset::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_triu\\_indices\\_out(gc\\_tensor out, int64\\_t row, int64\\_t col, int64\\_t offset)
"""
function triu_indices_out(out::Tensor, row::Int64, col::Int64, offset::Int64)

    __cret = ccall((:atg_triu_indices_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 out.pointer, row, col, offset)
    return tensor_from_ptr(__cret)
end


"""
    triu_out(out::Tensor, self::Tensor, diagonal::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_triu\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t diagonal)
"""
function triu_out(out::Tensor, self::Tensor, diagonal::Int64)

    __cret = ccall((:atg_triu_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, diagonal)
    return tensor_from_ptr(__cret)
end


"""
    true_divide(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_true\\_divide(gc\\_tensor self, gc\\_tensor other)
"""
function true_divide(self::Tensor, other::Tensor)

    __cret = ccall((:atg_true_divide, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    true_divide!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_true\\_divide\\_(gc\\_tensor self, gc\\_tensor other)
"""
function true_divide!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_true_divide_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    true_divide_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_true\\_divide\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function true_divide_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_true_divide_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    true_divide_scalar(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_true\\_divide\\_scalar(gc\\_tensor self, scalar other)
"""
function true_divide_scalar(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_true_divide_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    true_divide_scalar!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_true\\_divide\\_scalar\\_(gc\\_tensor self, scalar other)
"""
function true_divide_scalar!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_true_divide_scalar_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end
import Base.trunc


"""
    trunc(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_trunc(gc\\_tensor self)
"""
function trunc(self::Tensor)

    __cret = ccall((:atg_trunc, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    trunc!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_trunc\\_(gc\\_tensor self)
"""
function trunc!(self::Tensor)

    __cret = ccall((:atg_trunc_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    trunc_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_trunc\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function trunc_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_trunc_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    type_as(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_type\\_as(gc\\_tensor self, gc\\_tensor other)
"""
function type_as(self::Tensor, other::Tensor)

    __cret = ccall((:atg_type_as, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    unbind(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_unbind(gc\\_tensor self, int64\\_t dim)
"""
function unbind(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_unbind, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return __cret
end


"""
    unbind_copy(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_unbind\\_copy(gc\\_tensor self, int64\\_t dim)
"""
function unbind_copy(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_unbind_copy, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return __cret
end
# unbind_copy_int_out ignored



"""
    unflatten(self::Tensor, dim::Int64, sizes_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_unflatten(gc\\_tensor self, int64\\_t dim, int64\\_t *sizes\\_data, int sizes\\_len)
"""
function unflatten(self::Tensor, dim::Int64, sizes_data::Array{Int64})
    dim = dim - 1
    sizes_len = length(sizes_data)
    __cret = ccall((:atg_unflatten, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Cint),
                 self.pointer, dim, sizes_data, sizes_len)
    return tensor_from_ptr(__cret)
end
# unflatten_dense_tensors ignored



"""
    unfold(self::Tensor, dimension::Int64, size::Int64, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unfold(gc\\_tensor self, int64\\_t dimension, int64\\_t size, int64\\_t step)
"""
function unfold(self::Tensor, dimension::Int64, size::Int64, step::Int64)

    __cret = ccall((:atg_unfold, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, dimension, size, step)
    return tensor_from_ptr(__cret)
end


"""
    unfold_backward(grad_in::Tensor, input_sizes_data::Array{Int64}, dim::Int64, size::Int64, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unfold\\_backward(gc\\_tensor grad\\_in, int64\\_t *input\\_sizes\\_data, int input\\_sizes\\_len, int64\\_t dim, int64\\_t size, int64\\_t step)
"""
function unfold_backward(grad_in::Tensor, input_sizes_data::Array{Int64}, dim::Int64, size::Int64, step::Int64)
    input_sizes_len = length(input_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_unfold_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong, Clonglong),
                 grad_in.pointer, input_sizes_data, input_sizes_len, dim, size, step)
    return tensor_from_ptr(__cret)
end


"""
    unfold_backward_out(out::Tensor, grad_in::Tensor, input_sizes_data::Array{Int64}, dim::Int64, size::Int64, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unfold\\_backward\\_out(gc\\_tensor out, gc\\_tensor grad\\_in, int64\\_t *input\\_sizes\\_data, int input\\_sizes\\_len, int64\\_t dim, int64\\_t size, int64\\_t step)
"""
function unfold_backward_out(out::Tensor, grad_in::Tensor, input_sizes_data::Array{Int64}, dim::Int64, size::Int64, step::Int64)
    input_sizes_len = length(input_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_unfold_backward_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong, Clonglong, Clonglong),
                 out.pointer, grad_in.pointer, input_sizes_data, input_sizes_len, dim, size, step)
    return tensor_from_ptr(__cret)
end


"""
    unfold_copy(self::Tensor, dimension::Int64, size::Int64, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unfold\\_copy(gc\\_tensor self, int64\\_t dimension, int64\\_t size, int64\\_t step)
"""
function unfold_copy(self::Tensor, dimension::Int64, size::Int64, step::Int64)

    __cret = ccall((:atg_unfold_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 self.pointer, dimension, size, step)
    return tensor_from_ptr(__cret)
end


"""
    unfold_copy_out(out::Tensor, self::Tensor, dimension::Int64, size::Int64, step::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unfold\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dimension, int64\\_t size, int64\\_t step)
"""
function unfold_copy_out(out::Tensor, self::Tensor, dimension::Int64, size::Int64, step::Int64)

    __cret = ccall((:atg_unfold_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong, Clonglong, Clonglong),
                 out.pointer, self.pointer, dimension, size, step)
    return tensor_from_ptr(__cret)
end


"""
    uniform(self::Tensor, from::Float64, to::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_uniform(gc\\_tensor self, double from, double to)
"""
function uniform(self::Tensor, from::Float64, to::Float64)

    __cret = ccall((:atg_uniform, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, from, to)
    return tensor_from_ptr(__cret)
end


"""
    uniform!(self::Tensor, from::Float64, to::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_uniform\\_(gc\\_tensor self, double from, double to)
"""
function uniform!(self::Tensor, from::Float64, to::Float64)

    __cret = ccall((:atg_uniform_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cdouble, Cdouble),
                 self.pointer, from, to)
    return tensor_from_ptr(__cret)
end


"""
    uniform_out(out::Tensor, self::Tensor, from::Float64, to::Float64)

 Wrapper of C++ function raw\\_tensor atg\\_uniform\\_out(gc\\_tensor out, gc\\_tensor self, double from, double to)
"""
function uniform_out(out::Tensor, self::Tensor, from::Float64, to::Float64)

    __cret = ccall((:atg_uniform_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cdouble, Cdouble),
                 out.pointer, self.pointer, from, to)
    return tensor_from_ptr(__cret)
end
# unique_consecutive ignored

# unique_consecutive_out ignored

# unique_dim ignored

# unique_dim_consecutive ignored

# unique_dim_consecutive_out ignored

# unique_dim_out ignored



"""
    unsafe_chunk(self::Tensor, chunks::Int64, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_unsafe\\_chunk(gc\\_tensor self, int64\\_t chunks, int64\\_t dim)
"""
function unsafe_chunk(self::Tensor, chunks::Int64, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_unsafe_chunk, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, chunks, dim)
    return __cret
end


"""
    unsafe_split(self::Tensor, split_size::Int64, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_unsafe\\_split(gc\\_tensor self, int64\\_t split\\_size, int64\\_t dim)
"""
function unsafe_split(self::Tensor, split_size::Int64, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_unsafe_split, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong, Clonglong),
                 self.pointer, split_size, dim)
    return __cret
end
# unsafe_split_tensor_out ignored



"""
    unsafe_split_with_sizes(self::Tensor, split_sizes_data::Array{Int64}, dim::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_unsafe\\_split\\_with\\_sizes(gc\\_tensor self, int64\\_t *split\\_sizes\\_data, int split\\_sizes\\_len, int64\\_t dim)
"""
function unsafe_split_with_sizes(self::Tensor, split_sizes_data::Array{Int64}, dim::Int64)
    split_sizes_len = length(split_sizes_data)
    dim = dim - 1
    __cret = ccall((:atg_unsafe_split_with_sizes, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Clonglong),
                 self.pointer, split_sizes_data, split_sizes_len, dim)
    return __cret
end
# unsafe_split_with_sizes_out ignored



"""
    unsqueeze(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unsqueeze(gc\\_tensor self, int64\\_t dim)
"""
function unsqueeze(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_unsqueeze, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    unsqueeze!(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unsqueeze\\_(gc\\_tensor self, int64\\_t dim)
"""
function unsqueeze!(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_unsqueeze_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    unsqueeze_copy(self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unsqueeze\\_copy(gc\\_tensor self, int64\\_t dim)
"""
function unsqueeze_copy(self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_unsqueeze_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong),
                 self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    unsqueeze_copy_out(out::Tensor, self::Tensor, dim::Int64)

 Wrapper of C++ function raw\\_tensor atg\\_unsqueeze\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t dim)
"""
function unsqueeze_copy_out(out::Tensor, self::Tensor, dim::Int64)
    dim = dim - 1
    __cret = ccall((:atg_unsqueeze_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Clonglong),
                 out.pointer, self.pointer, dim)
    return tensor_from_ptr(__cret)
end


"""
    upsample_bicubic2d(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_bicubic2d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_bicubic2d(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_bicubic2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_bicubic2d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_bicubic2d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_bicubic2d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_bicubic2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_bicubic2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_bicubic2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_bicubic2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_bicubic2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_bicubic2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_bicubic2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_bicubic2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_bicubic2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# upsample_bicubic2d_vec ignored



"""
    upsample_bilinear2d(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_bilinear2d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_bilinear2d(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_bilinear2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_bilinear2d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_bilinear2d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_bilinear2d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_bilinear2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_bilinear2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_bilinear2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_bilinear2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_bilinear2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_bilinear2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_bilinear2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_bilinear2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_bilinear2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, align_corners, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# upsample_bilinear2d_vec ignored



"""
    upsample_linear1d(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_linear1d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_v, int scales\\_null)
"""
function upsample_linear1d(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_linear1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, align_corners, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_linear1d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_linear1d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_v, int scales\\_null)
"""
function upsample_linear1d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_linear1d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_linear1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_linear1d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_v, int scales\\_null)
"""
function upsample_linear1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_linear1d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_linear1d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_linear1d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_v, int scales\\_null)
"""
function upsample_linear1d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_linear1d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, align_corners, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end
# upsample_linear1d_vec ignored



"""
    upsample_nearest1d(self::Tensor, output_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest1d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_v, int scales\\_null)
"""
function upsample_nearest1d(self::Tensor, output_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_nearest1d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest1d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest1d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_v, int scales\\_null)
"""
function upsample_nearest1d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_nearest1d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest1d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_v, int scales\\_null)
"""
function upsample_nearest1d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_nearest1d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest1d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest1d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_v, int scales\\_null)
"""
function upsample_nearest1d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_v::Float64, scales_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_nearest1d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, scales_v, scales_null)
    return tensor_from_ptr(__cret)
end
# upsample_nearest1d_vec ignored



"""
    upsample_nearest2d(self::Tensor, output_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest2d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_nearest2d(self::Tensor, output_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_nearest2d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest2d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest2d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_nearest2d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_nearest2d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest2d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_nearest2d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_nearest2d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest2d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_nearest2d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_nearest2d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# upsample_nearest2d_vec ignored



"""
    upsample_nearest3d(self::Tensor, output_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest3d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_nearest3d(self::Tensor, output_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_nearest3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest3d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest3d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_nearest3d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_nearest3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest3d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_nearest3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_nearest3d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_nearest3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_nearest3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_nearest3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_nearest3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# upsample_nearest3d_vec ignored



"""
    upsample_trilinear3d(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_trilinear3d(gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_trilinear3d(self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_trilinear3d, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 self.pointer, output_size_data, output_size_len, align_corners, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_trilinear3d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_trilinear3d\\_backward(gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_trilinear3d_backward(grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_trilinear3d_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_trilinear3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_trilinear3d\\_backward\\_grad\\_input(gc\\_tensor grad\\_input, gc\\_tensor grad\\_output, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int64\\_t *input\\_size\\_data, int input\\_size\\_len, int align\\_corners, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_trilinear3d_backward_grad_input(grad_input::Tensor, grad_output::Tensor, output_size_data::Array{Int64}, input_size_data::Array{Int64}, align_corners::Int, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    input_size_len = length(input_size_data)
    __cret = ccall((:atg_upsample_trilinear3d_backward_grad_input, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 grad_input.pointer, grad_output.pointer, output_size_data, output_size_len, input_size_data, input_size_len, align_corners, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end


"""
    upsample_trilinear3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)

 Wrapper of C++ function raw\\_tensor atg\\_upsample\\_trilinear3d\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *output\\_size\\_data, int output\\_size\\_len, int align\\_corners, double scales\\_d\\_v, int scales\\_d\\_null, double scales\\_h\\_v, int scales\\_h\\_null, double scales\\_w\\_v, int scales\\_w\\_null)
"""
function upsample_trilinear3d_out(out::Tensor, self::Tensor, output_size_data::Array{Int64}, align_corners::Int, scales_d_v::Float64, scales_d_null::Int, scales_h_v::Float64, scales_h_null::Int, scales_w_v::Float64, scales_w_null::Int)
    output_size_len = length(output_size_data)
    __cret = ccall((:atg_upsample_trilinear3d_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cdouble, Cint, Cdouble, Cint, Cdouble, Cint),
                 out.pointer, self.pointer, output_size_data, output_size_len, align_corners, scales_d_v, scales_d_null, scales_h_v, scales_h_null, scales_w_v, scales_w_null)
    return tensor_from_ptr(__cret)
end
# upsample_trilinear3d_vec ignored



"""
    value_selecting_reduction_backward(grad::Tensor, dim::Int64, indices::Tensor, sizes_data::Array{Int64}, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_value\\_selecting\\_reduction\\_backward(gc\\_tensor grad, int64\\_t dim, gc\\_tensor indices, int64\\_t *sizes\\_data, int sizes\\_len, int keepdim)
"""
function value_selecting_reduction_backward(grad::Tensor, dim::Int64, indices::Tensor, sizes_data::Array{Int64}, keepdim::Int)
    dim = dim - 1
    sizes_len = length(sizes_data)
    __cret = ccall((:atg_value_selecting_reduction_backward, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint),
                 grad.pointer, dim, indices.pointer, sizes_data, sizes_len, keepdim)
    return tensor_from_ptr(__cret)
end
import Base.values


"""
    values(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_values(gc\\_tensor self)
"""
function values(self::Tensor)

    __cret = ccall((:atg_values, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    values_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_values\\_copy(gc\\_tensor self)
"""
function values_copy(self::Tensor)

    __cret = ccall((:atg_values_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    values_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_values\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function values_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_values_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    vander(x::Tensor, n_v::Int64, n_null::Int, increasing::Int)

 Wrapper of C++ function raw\\_tensor atg\\_vander(gc\\_tensor x, int64\\_t n\\_v, int n\\_null, int increasing)
"""
function vander(x::Tensor, n_v::Int64, n_null::Int, increasing::Int)

    __cret = ccall((:atg_vander, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Clonglong, Cint, Cint),
                 x.pointer, n_v, n_null, increasing)
    return tensor_from_ptr(__cret)
end


"""
    var(self::Tensor, unbiased::Int)

 Wrapper of C++ function raw\\_tensor atg\\_var(gc\\_tensor self, int unbiased)
"""
function var(self::Tensor, unbiased::Int)

    __cret = ccall((:atg_var, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, unbiased)
    return tensor_from_ptr(__cret)
end


"""
    var_correction(self::Tensor, dim_data::Array{Int64}, correction::TorchNumber, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_var\\_correction(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, scalar correction, int keepdim)
"""
function var_correction(self::Tensor, dim_data::Array{Int64}, correction::TorchNumber, keepdim::Int)
    dim_len = length(dim_data)
    correction_s_ = Scalar(correction)
    __cret = ccall((:atg_var_correction, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 self.pointer, dim_data, dim_len, correction_s_.pointer, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    var_correction_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, correction::TorchNumber, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_var\\_correction\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, scalar correction, int keepdim)
"""
function var_correction_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, correction::TorchNumber, keepdim::Int)
    dim_len = length(dim_data)
    correction_s_ = Scalar(correction)
    __cret = ccall((:atg_var_correction_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, correction_s_.pointer, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    var_dim(self::Tensor, dim_data::Array{Int64}, unbiased::Int, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_var\\_dim(gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int unbiased, int keepdim)
"""
function var_dim(self::Tensor, dim_data::Array{Int64}, unbiased::Int, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_var_dim, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 self.pointer, dim_data, dim_len, unbiased, keepdim)
    return tensor_from_ptr(__cret)
end
# var_mean ignored

# var_mean_correction ignored

# var_mean_correction_out ignored

# var_mean_dim ignored



"""
    var_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, unbiased::Int, keepdim::Int)

 Wrapper of C++ function raw\\_tensor atg\\_var\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *dim\\_data, int dim\\_len, int unbiased, int keepdim)
"""
function var_out(out::Tensor, self::Tensor, dim_data::Array{Int64}, unbiased::Int, keepdim::Int)
    dim_len = length(dim_data)
    __cret = ccall((:atg_var_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint, Cint, Cint),
                 out.pointer, self.pointer, dim_data, dim_len, unbiased, keepdim)
    return tensor_from_ptr(__cret)
end


"""
    vdot(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_vdot(gc\\_tensor self, gc\\_tensor other)
"""
function vdot(self::Tensor, other::Tensor)

    __cret = ccall((:atg_vdot, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    vdot_out(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_vdot\\_out(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function vdot_out(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_vdot_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
import Base.view


"""
    view(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_view(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function view(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_view, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    view_as(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_as(gc\\_tensor self, gc\\_tensor other)
"""
function view_as(self::Tensor, other::Tensor)

    __cret = ccall((:atg_view_as, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    view_as_complex(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_as\\_complex(gc\\_tensor self)
"""
function view_as_complex(self::Tensor)

    __cret = ccall((:atg_view_as_complex, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    view_as_complex_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_as\\_complex\\_copy(gc\\_tensor self)
"""
function view_as_complex_copy(self::Tensor)

    __cret = ccall((:atg_view_as_complex_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    view_as_complex_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_as\\_complex\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function view_as_complex_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_view_as_complex_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    view_as_real(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_as\\_real(gc\\_tensor self)
"""
function view_as_real(self::Tensor)

    __cret = ccall((:atg_view_as_real, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    view_as_real_copy(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_as\\_real\\_copy(gc\\_tensor self)
"""
function view_as_real_copy(self::Tensor)

    __cret = ccall((:atg_view_as_real_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    view_as_real_copy_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_as\\_real\\_copy\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function view_as_real_copy_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_view_as_real_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    view_copy(self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_view\\_copy(gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function view_copy(self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_view_copy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    view_copy_dtype(self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_copy\\_dtype(gc\\_tensor self, int dtype)
"""
function view_copy_dtype(self::Tensor, dtype::Int)

    __cret = ccall((:atg_view_copy_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    view_copy_dtype_out(out::Tensor, self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_copy\\_dtype\\_out(gc\\_tensor out, gc\\_tensor self, int dtype)
"""
function view_copy_dtype_out(out::Tensor, self::Tensor, dtype::Int)

    __cret = ccall((:atg_view_copy_dtype_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    view_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_view\\_copy\\_out(gc\\_tensor out, gc\\_tensor self, int64\\_t *size\\_data, int size\\_len)
"""
function view_copy_out(out::Tensor, self::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_view_copy_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, self.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end


"""
    view_dtype(self::Tensor, dtype::Int)

 Wrapper of C++ function raw\\_tensor atg\\_view\\_dtype(gc\\_tensor self, int dtype)
"""
function view_dtype(self::Tensor, dtype::Int)

    __cret = ccall((:atg_view_dtype, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint),
                 self.pointer, dtype)
    return tensor_from_ptr(__cret)
end


"""
    vsplit(self::Tensor, sections::Int64)

 Wrapper of C++ function raw\\_tensor *atg\\_vsplit(gc\\_tensor self, int64\\_t sections)
"""
function vsplit(self::Tensor, sections::Int64)

    __cret = ccall((:atg_vsplit, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Clonglong),
                 self.pointer, sections)
    return __cret
end


"""
    vsplit_array(self::Tensor, indices_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor *atg\\_vsplit\\_array(gc\\_tensor self, int64\\_t *indices\\_data, int indices\\_len)
"""
function vsplit_array(self::Tensor, indices_data::Array{Int64})
    indices_len = length(indices_data)
    __cret = ccall((:atg_vsplit_array, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 self.pointer, indices_data, indices_len)
    return __cret
end
# vstack ignored

# vstack_out ignored



"""
    where(condition::Tensor)

 Wrapper of C++ function raw\\_tensor *atg\\_where(gc\\_tensor condition)
"""
function where(condition::Tensor)

    __cret = ccall((:atg_where, :libtorch_capi),
                 Cvoid, (Ptr{Cvoid},),
                 condition.pointer)
    return __cret
end


"""
    where_scalar(condition::Tensor, self::TorchNumber, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_where\\_scalar(gc\\_tensor condition, scalar self, scalar other)
"""
function where_scalar(condition::Tensor, self::TorchNumber, other::TorchNumber)
    self_s_ = Scalar(self)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_where_scalar, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 condition.pointer, self_s_.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    where_scalarother(condition::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_where\\_scalarother(gc\\_tensor condition, gc\\_tensor self, scalar other)
"""
function where_scalarother(condition::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_where_scalarother, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 condition.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    where_scalarself(condition::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_where\\_scalarself(gc\\_tensor condition, scalar self, gc\\_tensor other)
"""
function where_scalarself(condition::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_where_scalarself, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 condition.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    where_self(condition::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_where\\_self(gc\\_tensor condition, gc\\_tensor self, gc\\_tensor other)
"""
function where_self(condition::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_where_self, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 condition.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    where_self_out(out::Tensor, condition::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_where\\_self\\_out(gc\\_tensor out, gc\\_tensor condition, gc\\_tensor self, gc\\_tensor other)
"""
function where_self_out(out::Tensor, condition::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_where_self_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, condition.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    xlogy(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_xlogy(gc\\_tensor self, gc\\_tensor other)
"""
function xlogy(self::Tensor, other::Tensor)

    __cret = ccall((:atg_xlogy, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    xlogy!(self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_xlogy\\_(gc\\_tensor self, gc\\_tensor other)
"""
function xlogy!(self::Tensor, other::Tensor)

    __cret = ccall((:atg_xlogy_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    xlogy_outscalar_other(out::Tensor, self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_xlogy\\_outscalar\\_other(gc\\_tensor out, gc\\_tensor self, scalar other)
"""
function xlogy_outscalar_other(out::Tensor, self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_xlogy_outscalar_other, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    xlogy_outscalar_self(out::Tensor, self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_xlogy\\_outscalar\\_self(gc\\_tensor out, scalar self, gc\\_tensor other)
"""
function xlogy_outscalar_self(out::Tensor, self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_xlogy_outscalar_self, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    xlogy_outtensor(out::Tensor, self::Tensor, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_xlogy\\_outtensor(gc\\_tensor out, gc\\_tensor self, gc\\_tensor other)
"""
function xlogy_outtensor(out::Tensor, self::Tensor, other::Tensor)

    __cret = ccall((:atg_xlogy_outtensor, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end


"""
    xlogy_scalar_other(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_xlogy\\_scalar\\_other(gc\\_tensor self, scalar other)
"""
function xlogy_scalar_other(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_xlogy_scalar_other, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    xlogy_scalar_other!(self::Tensor, other::TorchNumber)

 Wrapper of C++ function raw\\_tensor atg\\_xlogy\\_scalar\\_other\\_(gc\\_tensor self, scalar other)
"""
function xlogy_scalar_other!(self::Tensor, other::TorchNumber)
    other_s_ = Scalar(other)
    __cret = ccall((:atg_xlogy_scalar_other_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self.pointer, other_s_.pointer)
    return tensor_from_ptr(__cret)
end


"""
    xlogy_scalar_self(self::TorchNumber, other::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_xlogy\\_scalar\\_self(scalar self, gc\\_tensor other)
"""
function xlogy_scalar_self(self::TorchNumber, other::Tensor)
    self_s_ = Scalar(self)
    __cret = ccall((:atg_xlogy_scalar_self, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 self_s_.pointer, other.pointer)
    return tensor_from_ptr(__cret)
end
import Base.zero


"""
    zero(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_zero(gc\\_tensor self)
"""
function zero(self::Tensor)

    __cret = ccall((:atg_zero, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    zero!(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_zero\\_(gc\\_tensor self)
"""
function zero!(self::Tensor)

    __cret = ccall((:atg_zero_, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    zero_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_zero\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function zero_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_zero_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end
import Base.zeros


"""
    zeros(size_data::Array{Int64}, options_kind::Int, options_device::Int)

 Wrapper of C++ function raw\\_tensor atg\\_zeros(int64\\_t *size\\_data, int size\\_len, int options\\_kind, int options\\_device)
"""
function zeros(size_data::Array{Int64}, options_kind::Int, options_device::Int)
    size_len = length(size_data)
    __cret = ccall((:atg_zeros, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Cint, Cint),
                 size_data, size_len, options_kind, options_device)
    return tensor_from_ptr(__cret)
end


"""
    zeros_like(self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_zeros\\_like(gc\\_tensor self)
"""
function zeros_like(self::Tensor)

    __cret = ccall((:atg_zeros_like, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid},),
                 self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    zeros_like_out(out::Tensor, self::Tensor)

 Wrapper of C++ function raw\\_tensor atg\\_zeros\\_like\\_out(gc\\_tensor out, gc\\_tensor self)
"""
function zeros_like_out(out::Tensor, self::Tensor)

    __cret = ccall((:atg_zeros_like_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}),
                 out.pointer, self.pointer)
    return tensor_from_ptr(__cret)
end


"""
    zeros_out(out::Tensor, size_data::Array{Int64})

 Wrapper of C++ function raw\\_tensor atg\\_zeros\\_out(gc\\_tensor out, int64\\_t *size\\_data, int size\\_len)
"""
function zeros_out(out::Tensor, size_data::Array{Int64})
    size_len = length(size_data)
    __cret = ccall((:atg_zeros_out, :libtorch_capi),
                 Ptr{Cvoid}, (Ptr{Cvoid}, Ptr{Cvoid}, Cint),
                 out.pointer, size_data, size_len)
    return tensor_from_ptr(__cret)
end
include("thc-opt.jl")

end
